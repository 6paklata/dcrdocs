{
    "docs": [
        {
            "location": "/", 
            "text": "Overview\n\n\n\n\n \nWhat is Decred?\n\n\nDecred is a cryptocurrency, similar to Bitcoin, with a strong focus on community input, open governance and sustainable funding and development. It utilises a hybrid \nproof-of-work\n and \nproof-of-stake\n mining system to ensure that a small group cannot dominate the flow of transactions or make changes to Decred without the input of the community. A unit of currency is called a \ndecred\n (DCR). To ensure the integrity of the currency and prevent people from making fraudulent transactions or creating their own coins, Decred uses a method of recording transactions known as a blockchain.\n\n\n\n\n\n\n \nWhat is a cryptocurrency?\n\n\nA cryptocurrency is a system of \nvalue exchange\n, just like any real world currency you may be familiar with. Its main difference is that it is not controlled by a central government or group and thus cannot be manipulated or restricted in the way those currencies can be.\n\n\nAs an example, you may buy Decred from a fiat currency exchange and use it to directly purchase a product in a different country without having to pay high exchange rates.\nDecred uses a wallet to store, transfer and receive DCR. This wallet signs every transaction in and out with a special public key that is unique to you. This is how the network knows that the address sending the transaction is the correct one. Think of your bank account and PIN. When you use your card (wallet) you also enter your PIN (public key) so the bank knows it was you that authorised the transaction. The main difference here is that the public key is known by everyone on the network whereas your PIN is not. When you start using Decred, you will generate a private key that you must not give to anyone.\n\n\n\n\n \nWhat is the blockchain?\n\n\nThe blockchain is the heart of Decred. It is where all transactions that take place are stored. It is similar to a bank ledger in that it records all the activity that happens when DCR are transferred. This ledger is able to confirm that new transactions are valid and that no fraud is taking place.\n\n\nEach block in the blockchain is a record of transactions that have occurred since the last block (about 5 minutes). Every computer (node) in the Decred network shares this blockchain. Nodes in the network run an algorithm many times over a block looking for a solution with a known difficulty. This process is known as \nproof-of-work\n mining. Once the solution is found it is broadcast to the network. The network then verifies the solution (finding the solution is very hard, but verifying it is easy). Decred uses an extra step of verification known as \nproof-of-stake\n mining. Stakeholders who have purchased tickets now have the chance to vote on the block. 5 tickets are chosen randomly from the ticket pool and if at least 3 of them vote \nyes\n the block is permanently added to the blockchain and the transactions are cleared. Both PoS and PoW miners are compensated with DCR for the resources used to mine the block.", 
            "title": "Home"
        }, 
        {
            "location": "/#overview", 
            "text": "", 
            "title": "Overview"
        }, 
        {
            "location": "/#what-is-decred", 
            "text": "Decred is a cryptocurrency, similar to Bitcoin, with a strong focus on community input, open governance and sustainable funding and development. It utilises a hybrid  proof-of-work  and  proof-of-stake  mining system to ensure that a small group cannot dominate the flow of transactions or make changes to Decred without the input of the community. A unit of currency is called a  decred  (DCR). To ensure the integrity of the currency and prevent people from making fraudulent transactions or creating their own coins, Decred uses a method of recording transactions known as a blockchain.", 
            "title": " What is Decred?"
        }, 
        {
            "location": "/#what-is-a-cryptocurrency", 
            "text": "A cryptocurrency is a system of  value exchange , just like any real world currency you may be familiar with. Its main difference is that it is not controlled by a central government or group and thus cannot be manipulated or restricted in the way those currencies can be.  As an example, you may buy Decred from a fiat currency exchange and use it to directly purchase a product in a different country without having to pay high exchange rates.\nDecred uses a wallet to store, transfer and receive DCR. This wallet signs every transaction in and out with a special public key that is unique to you. This is how the network knows that the address sending the transaction is the correct one. Think of your bank account and PIN. When you use your card (wallet) you also enter your PIN (public key) so the bank knows it was you that authorised the transaction. The main difference here is that the public key is known by everyone on the network whereas your PIN is not. When you start using Decred, you will generate a private key that you must not give to anyone.", 
            "title": " What is a cryptocurrency?"
        }, 
        {
            "location": "/#what-is-the-blockchain", 
            "text": "The blockchain is the heart of Decred. It is where all transactions that take place are stored. It is similar to a bank ledger in that it records all the activity that happens when DCR are transferred. This ledger is able to confirm that new transactions are valid and that no fraud is taking place.  Each block in the blockchain is a record of transactions that have occurred since the last block (about 5 minutes). Every computer (node) in the Decred network shares this blockchain. Nodes in the network run an algorithm many times over a block looking for a solution with a known difficulty. This process is known as  proof-of-work  mining. Once the solution is found it is broadcast to the network. The network then verifies the solution (finding the solution is very hard, but verifying it is easy). Decred uses an extra step of verification known as  proof-of-stake  mining. Stakeholders who have purchased tickets now have the chance to vote on the block. 5 tickets are chosen randomly from the ticket pool and if at least 3 of them vote  yes  the block is permanently added to the blockchain and the transactions are cleared. Both PoS and PoW miners are compensated with DCR for the resources used to mine the block.", 
            "title": " What is the blockchain?"
        }, 
        {
            "location": "/getting-started/overview/", 
            "text": "Overview\n\n\n\n\nThe very first thing you will need to do to get started with Decred is create your wallet. Your wallet is like a bank account. It can contain many address and like your bank account you don\nt want to give anyone else access to it. An address is like a sub account. If you want to receive DCR from someone else, you give them an address that is linked to your wallet. You can either reuse the same address or create one address for each transaction or anything in between. Your wallet can generate as many address as you want.\nThere are three parts to getting started with Decred:\n\n\n\n\nConnecting to the Decred network by starting a node.\n\n\nCreating your wallet and attaching it to the node.\n\n\nControlling your wallet and performing transactions.\n\n\n\n\nOnce you\nre setup and online there are three ways you can add DCR to your account.\n\n\n\n\nPurchase from an exchange\n\n\nProof of work mining\n\n\nProof of stake mining\n\n\n\n\n\n\n1. \n User Guides\n\n\n\n\n1.1 \n \nWindows\n\n\nWhile this guide assumes you have no knowledge of Decred, cryptocurrency in general or the Windows command line, it does assume you have some basic Windows knowledge including how to use Windows Explorer to unzip files.\n\n\n\n\n1.2 \n \nLinux\n\n\nThis guide will take you through the setup of the Decred daemon and wallet on Linux. Some familiarity with navigating the Linux shell and extracting tar balls is assumed.\n\n\n\n\n1.3. \n \nWeb\n\n\nThe web wallet is a basic online wallet that allows you to send and receive DCR. It is still under development and so lacks a number of features that are in the command line wallet. It is primarily designed to facilitate the transfer of DCR.\n\n\n\n\n2. \n \nObtaining DCR\n\n\n\n\n3. \n \nUsing the Block Explorer", 
            "title": "Overview"
        }, 
        {
            "location": "/getting-started/overview/#overview", 
            "text": "The very first thing you will need to do to get started with Decred is create your wallet. Your wallet is like a bank account. It can contain many address and like your bank account you don t want to give anyone else access to it. An address is like a sub account. If you want to receive DCR from someone else, you give them an address that is linked to your wallet. You can either reuse the same address or create one address for each transaction or anything in between. Your wallet can generate as many address as you want.\nThere are three parts to getting started with Decred:   Connecting to the Decred network by starting a node.  Creating your wallet and attaching it to the node.  Controlling your wallet and performing transactions.   Once you re setup and online there are three ways you can add DCR to your account.   Purchase from an exchange  Proof of work mining  Proof of stake mining", 
            "title": " Overview"
        }, 
        {
            "location": "/getting-started/overview/#1-user-guides", 
            "text": "", 
            "title": "1.  User Guides"
        }, 
        {
            "location": "/getting-started/overview/#11-windows", 
            "text": "While this guide assumes you have no knowledge of Decred, cryptocurrency in general or the Windows command line, it does assume you have some basic Windows knowledge including how to use Windows Explorer to unzip files.", 
            "title": "1.1  Windows"
        }, 
        {
            "location": "/getting-started/overview/#12-linux", 
            "text": "This guide will take you through the setup of the Decred daemon and wallet on Linux. Some familiarity with navigating the Linux shell and extracting tar balls is assumed.", 
            "title": "1.2  Linux"
        }, 
        {
            "location": "/getting-started/overview/#13-web", 
            "text": "The web wallet is a basic online wallet that allows you to send and receive DCR. It is still under development and so lacks a number of features that are in the command line wallet. It is primarily designed to facilitate the transfer of DCR.", 
            "title": "1.3.  Web"
        }, 
        {
            "location": "/getting-started/overview/#2-obtaining-dcr", 
            "text": "", 
            "title": "2.  Obtaining DCR"
        }, 
        {
            "location": "/getting-started/overview/#3-using-the-block-explorer", 
            "text": "", 
            "title": "3.  Using the Block Explorer"
        }, 
        {
            "location": "/getting-started/user-guides/windows/", 
            "text": "Windows User Guide\n\n\n\n\n Connect to the Decred network\n\n\n\n\nStep One\n\n\n\n\nDownload the latest Decred platform from the \nDecred releases page\n. Choose the zip for either \nwindows-386-[date]\n if you have a 32-bit version of Windows or \nwindows-amd64-[date]\n if you have 64-bit (\nHow can I tell?\n). If you are running Windows Vista or higher, you may need to unblock the zip file. After the file has downloaded, open the file location in Explorer, right click the file and choose properties. You may see a security section down the bottom. Click \nUnblock\n then \nOK\n. Double-click the zip to open it and copy the files in it to any location, e.g., \nC:\\Decred\n. Now we need a command prompt. Open the folder where you copied the files. In the location bar at the top, type in \ncmd\n and press \nEnter\n.\n\n\n\n\nStep Two\n\n\n\n\nYou should now have a command prompt open. Type the following (ignore square brackets):\n\n\nC:\\Decred\n dcrd --rpcuser [daemon username] --rpcpass [daemon password]\n\n\n\n\nChoose any username and password. It is one that you make up on the spot, you do not need to register anywhere to get one. It is what will identify you to the network. Save these, you will need them later. You can also put them in a file so you do not need to specify them on the command line or in scripts (See: \nStoring Login Details\n). This program is what is known as a daemon. It works in the background and you will not interface with it directly. It exists solely to connect you to the network.\n\n\n\n\nStep Three\n\n\n\n\nYou should now get a whole lot of text as the daemon connects to the network and starts processing blocks. Wait until it is completed. You will see a line at the start like:\n\n\n22:58:04 2016-02-09 [INF] BMGR: Syncing to block height 617 from peer 104.236.167.133:9108\n\n\n\n\nThen, as it downloads the blocks, you will see lines like:\n\n\n22:58:16 2016-02-09 [INF] BMGR: Processed 321 blocks in the last 10.03s (544 transactions, height 322, 2016-02-09 09:50:34 +1000 EST)\n\n\n\n\nOnce the \nSynching to block height\n equals the processed block height you can continue. This may take quite some time as the block height gets bigger (there is no limit). Note that you are not mining at this point, you are just connected to the network. This connection will be used in the future.\n\n\n\n\n Create your wallet\n\n\n\n\nStep One\n\n\n\n\nNow that you are connected to the network, the next thing you need to do is create a wallet that will hold your account addresses and DCR balance. If you participate in mining, this is where your payments will go.\n\n\n\n\nIMPORTANT\n\n\n\n\nDuring the creation process you will be provided with a list of 33 words that form the private key for your wallet. Treat this list in the same way you would a physical key to a safe. If you lose your key you lose access to your wallet and all funds within it permanently. It cannot be recovered, not even by Decred developers. It is up to you to keep a backup. It is recommended you write it down on paper then store it somewhere secure. If you decide to keep it on your computer, it would be best to keep it in an encrypted document (just do not forget the password) in case the file or your computer is stolen which brings us to the next point:\n\n\n\n\nVERY IMPORTANT\n\n\n\n\nDO NOT, UNDER ANY CIRCUMSTANCES, GIVE YOUR KEY WORDS OR THE ASSOCIATED HEX KEY TO ANYONE! NOT EVEN THE DEVELOPERS!\n\n\nWe will go through the hex key soon. If you give someone either key, they can use that to copy your wallet which gives them full access to your funds. It is like cutting a copy of a key, giving it to some random person on the train and telling him where the safe it opens is. And that you will be out of town for a few days. So to reiterate, keep your key words safe and do not give them to anyone else. With that in mind follow these steps to create a wallet:\n\n\n\n\nStep Two\n\n\n\n\nMake sure you have the \ndcrd\n daemon running (See: \nConnecting to the Decred network\n). Open a new command prompt in your Decred folder. To do that, open Windows Explorer, navigate to your Decred folder and type \ncmd\n in the location box at the top then press \nEnter\n. Type: \ndcrwallet --create\n and press \nEnter\n.\n\n\nC:\\Decred\n dcrwallet --create\nEnter the private passphrase for your new wallet:\n\n\n\n\nEnter a password that you will use for this wallet. It should be different to the one you used for the daemon. \nEnter\n again to confirm. Make sure you save this somewhere.\n\n\nDo you want to add an additional layer of encryption for public data? (n/no/y/yes) [no]:\n\n\n\n\n\n\nStep Three\n\n\n\n\nAs you can see above you will now be asked if you want extra encryption for your public wallet. Say no. We will have a look at putting all these passwords in a separate file so you do not need to remember them later.\n\n\nDo you have an existing wallet seed you want to use? (n/no/y/yes) [no]:\n\n\n\n\nYou are now asked if you have an existing seed. This is the list of words that make up your private key as explained above. Since this is a new wallet, say no. Your key words will now be displayed. If you have a seed, say yes and enter that instead.\n\n\n\n\nALSO VERY IMPORTANT\n\n\n\n\nSTOP HERE! TOUCH NOTHING!\n\n\nRead this entire step before you do anything. There are two very important pieces of information displayed on the screen. The first, and most important part is your key words. These words form the private key that is used to encrypt your wallet. If you lose this list (and the order they appear in) your wallet will be locked forever and any funds it contains will be lost permanently. As was mentioned above, no one, not even the developers can retrieve them.\n\n\nThe second part is your hex key. This is generated from your key words. Write this down as well, as you will use it to confirm you entered your seed words correctly if you need to restore your wallet.\n\n\n\n\nStep Four\n\n\n\n\nWrite down the key words and hex and store them somewhere safe. Seriously. This is the most important step. Also remember these words (and the hex string) are the keys to your wallet. Do not give them to anyone else. If you do, they can restore your wallet on their computer and steal your DCR.\n\n\nYour wallet generation seed is:\n[list of 33 words]\n\nHex: [long string of letters and numbers]\nIMPORTANT: Keep the seed in a safe place as you\nwill NOT be able to restore your wallet without it.\nPlease keep in mind that anyone who has access\nto the seed can also restore your wallet thereby\ngiving them access to all your funds, so it is\nimperative that you keep it in a secure location.\nOnce you have stored the seed in a safe and secure location, enter \nOK\n to continue:\n\n\n\n\nOnce you have written the key words and hex down type \nOK\n and press \nEnter\n. It should be noted that if you did not write the words down before continuing or somehow otherwise lost them, start this process again (See: \nHow Do I Remove My Wallet?\n).\n\n\nCreating the wallet...\nThe wallet has been created successfully.\n\n\n\n\nThe wallet will then be created. This might take a few minutes if you have a slow computer.\n\n\n\n\n Connect your wallet to the Decred network\n\n\nNow that you have \ncreated your wallet\n and \nconnected to the Decred network\n, you need to link your wallet to the network so it can send and receive coins and participate in mining.\n\n\n\n\nStep One\n\n\n\n\nOpen another command prompt in your Decred folder (or use the last one if you have just created your wallet). Type the following (ignore square brackets):\n\n\nC:\\Decred\n dcrwallet -u [wallet username] -P [wallet password] --dcrdusername=[daemon username] --dcrdpassword=[daemon password]\n\n\n\n\nOkay, there is a lot to go through here but it is not hard.\n\n\n\n\nFirst, the wallet username. You have not used this before, so just think of one. It will identify your wallet to the network.\n\n\nSecond is the wallet password. This is the private one you made when you created your wallet (Step Two in the \nCreating your wallet\n guide). Note the capital P, Decred is case sensitive.\n\n\nThird and fourth are the username and password you used when staring the daemon (Step Two in the \nConnecting to the Decred network\n guide).\n\n\n\n\nThe wallet will now connect to the network via the daemon. It will begin scans of the network and active addresses which can take a few minutes on slow computers. Eventually it will start showing lines like:\n\n\n[INF] WLLT: Connecting block 0000000000002004ea8fa74af334cb291a22832642b5be603995683534bbb97b, height 9990\n\n\n\n\nThis means your wallet is successfully connected to the network.\n\n\n\n\nStep Two\n\n\n\n\nFinally, you will need to unlock your wallet to allow it to send and receive funds. To do so we will introduce the third program in the Decred suite; \ndcrctl\n. This is the program you will use to control Decred. Open a third command prompt in your Decred folder. Type in (ignore square brackets):\n\n\nC:\\Decred\n dcrctl -u [daemon username] -P [daemon password] --wallet walletpassphrase [wallet password] 0\n\n\n\n\nWhat we are doing here is authenticating with the daemon and using the \n--wallet\n command to send the wallet password to unlock the wallet. The \n0\n means unlock without a time limit. Do note, however, that this only unlocks the wallet for the current session. If you close the window the wallet is running in, you will need to unlock it again the next time you start it. You will not get a confirmation from \ndcrctl\n, but if you look at your wallet window, it will say:\n\n\n[INF] RPCS: The wallet has been unlocked without a time limit.\n\n\n\n\n\n\nStep Three\n\n\n\n\nThat is it! You are now up and running. Some things you might want to try:\n\n\n\n\nPurchase Decred from an exchange (6)\n\n\nPut your credentials in a file.\n\n\nProof of work mining (7)\n\n\nProof of stake mining (8)\n\n\nHave a look at the options for dcrctl (9)", 
            "title": "Windows"
        }, 
        {
            "location": "/getting-started/user-guides/windows/#windows-user-guide", 
            "text": "", 
            "title": " Windows User Guide"
        }, 
        {
            "location": "/getting-started/user-guides/windows/#connect-to-the-decred-network", 
            "text": "Step One   Download the latest Decred platform from the  Decred releases page . Choose the zip for either  windows-386-[date]  if you have a 32-bit version of Windows or  windows-amd64-[date]  if you have 64-bit ( How can I tell? ). If you are running Windows Vista or higher, you may need to unblock the zip file. After the file has downloaded, open the file location in Explorer, right click the file and choose properties. You may see a security section down the bottom. Click  Unblock  then  OK . Double-click the zip to open it and copy the files in it to any location, e.g.,  C:\\Decred . Now we need a command prompt. Open the folder where you copied the files. In the location bar at the top, type in  cmd  and press  Enter .   Step Two   You should now have a command prompt open. Type the following (ignore square brackets):  C:\\Decred  dcrd --rpcuser [daemon username] --rpcpass [daemon password]  Choose any username and password. It is one that you make up on the spot, you do not need to register anywhere to get one. It is what will identify you to the network. Save these, you will need them later. You can also put them in a file so you do not need to specify them on the command line or in scripts (See:  Storing Login Details ). This program is what is known as a daemon. It works in the background and you will not interface with it directly. It exists solely to connect you to the network.   Step Three   You should now get a whole lot of text as the daemon connects to the network and starts processing blocks. Wait until it is completed. You will see a line at the start like:  22:58:04 2016-02-09 [INF] BMGR: Syncing to block height 617 from peer 104.236.167.133:9108  Then, as it downloads the blocks, you will see lines like:  22:58:16 2016-02-09 [INF] BMGR: Processed 321 blocks in the last 10.03s (544 transactions, height 322, 2016-02-09 09:50:34 +1000 EST)  Once the  Synching to block height  equals the processed block height you can continue. This may take quite some time as the block height gets bigger (there is no limit). Note that you are not mining at this point, you are just connected to the network. This connection will be used in the future.", 
            "title": " Connect to the Decred network"
        }, 
        {
            "location": "/getting-started/user-guides/windows/#create-your-wallet", 
            "text": "Step One   Now that you are connected to the network, the next thing you need to do is create a wallet that will hold your account addresses and DCR balance. If you participate in mining, this is where your payments will go.   IMPORTANT   During the creation process you will be provided with a list of 33 words that form the private key for your wallet. Treat this list in the same way you would a physical key to a safe. If you lose your key you lose access to your wallet and all funds within it permanently. It cannot be recovered, not even by Decred developers. It is up to you to keep a backup. It is recommended you write it down on paper then store it somewhere secure. If you decide to keep it on your computer, it would be best to keep it in an encrypted document (just do not forget the password) in case the file or your computer is stolen which brings us to the next point:   VERY IMPORTANT   DO NOT, UNDER ANY CIRCUMSTANCES, GIVE YOUR KEY WORDS OR THE ASSOCIATED HEX KEY TO ANYONE! NOT EVEN THE DEVELOPERS!  We will go through the hex key soon. If you give someone either key, they can use that to copy your wallet which gives them full access to your funds. It is like cutting a copy of a key, giving it to some random person on the train and telling him where the safe it opens is. And that you will be out of town for a few days. So to reiterate, keep your key words safe and do not give them to anyone else. With that in mind follow these steps to create a wallet:   Step Two   Make sure you have the  dcrd  daemon running (See:  Connecting to the Decred network ). Open a new command prompt in your Decred folder. To do that, open Windows Explorer, navigate to your Decred folder and type  cmd  in the location box at the top then press  Enter . Type:  dcrwallet --create  and press  Enter .  C:\\Decred  dcrwallet --create\nEnter the private passphrase for your new wallet:  Enter a password that you will use for this wallet. It should be different to the one you used for the daemon.  Enter  again to confirm. Make sure you save this somewhere.  Do you want to add an additional layer of encryption for public data? (n/no/y/yes) [no]:   Step Three   As you can see above you will now be asked if you want extra encryption for your public wallet. Say no. We will have a look at putting all these passwords in a separate file so you do not need to remember them later.  Do you have an existing wallet seed you want to use? (n/no/y/yes) [no]:  You are now asked if you have an existing seed. This is the list of words that make up your private key as explained above. Since this is a new wallet, say no. Your key words will now be displayed. If you have a seed, say yes and enter that instead.   ALSO VERY IMPORTANT   STOP HERE! TOUCH NOTHING!  Read this entire step before you do anything. There are two very important pieces of information displayed on the screen. The first, and most important part is your key words. These words form the private key that is used to encrypt your wallet. If you lose this list (and the order they appear in) your wallet will be locked forever and any funds it contains will be lost permanently. As was mentioned above, no one, not even the developers can retrieve them.  The second part is your hex key. This is generated from your key words. Write this down as well, as you will use it to confirm you entered your seed words correctly if you need to restore your wallet.   Step Four   Write down the key words and hex and store them somewhere safe. Seriously. This is the most important step. Also remember these words (and the hex string) are the keys to your wallet. Do not give them to anyone else. If you do, they can restore your wallet on their computer and steal your DCR.  Your wallet generation seed is:\n[list of 33 words]\n\nHex: [long string of letters and numbers]\nIMPORTANT: Keep the seed in a safe place as you\nwill NOT be able to restore your wallet without it.\nPlease keep in mind that anyone who has access\nto the seed can also restore your wallet thereby\ngiving them access to all your funds, so it is\nimperative that you keep it in a secure location.\nOnce you have stored the seed in a safe and secure location, enter  OK  to continue:  Once you have written the key words and hex down type  OK  and press  Enter . It should be noted that if you did not write the words down before continuing or somehow otherwise lost them, start this process again (See:  How Do I Remove My Wallet? ).  Creating the wallet...\nThe wallet has been created successfully.  The wallet will then be created. This might take a few minutes if you have a slow computer.", 
            "title": " Create your wallet"
        }, 
        {
            "location": "/getting-started/user-guides/windows/#connect-your-wallet-to-the-decred-network", 
            "text": "Now that you have  created your wallet  and  connected to the Decred network , you need to link your wallet to the network so it can send and receive coins and participate in mining.   Step One   Open another command prompt in your Decred folder (or use the last one if you have just created your wallet). Type the following (ignore square brackets):  C:\\Decred  dcrwallet -u [wallet username] -P [wallet password] --dcrdusername=[daemon username] --dcrdpassword=[daemon password]  Okay, there is a lot to go through here but it is not hard.   First, the wallet username. You have not used this before, so just think of one. It will identify your wallet to the network.  Second is the wallet password. This is the private one you made when you created your wallet (Step Two in the  Creating your wallet  guide). Note the capital P, Decred is case sensitive.  Third and fourth are the username and password you used when staring the daemon (Step Two in the  Connecting to the Decred network  guide).   The wallet will now connect to the network via the daemon. It will begin scans of the network and active addresses which can take a few minutes on slow computers. Eventually it will start showing lines like:  [INF] WLLT: Connecting block 0000000000002004ea8fa74af334cb291a22832642b5be603995683534bbb97b, height 9990  This means your wallet is successfully connected to the network.   Step Two   Finally, you will need to unlock your wallet to allow it to send and receive funds. To do so we will introduce the third program in the Decred suite;  dcrctl . This is the program you will use to control Decred. Open a third command prompt in your Decred folder. Type in (ignore square brackets):  C:\\Decred  dcrctl -u [daemon username] -P [daemon password] --wallet walletpassphrase [wallet password] 0  What we are doing here is authenticating with the daemon and using the  --wallet  command to send the wallet password to unlock the wallet. The  0  means unlock without a time limit. Do note, however, that this only unlocks the wallet for the current session. If you close the window the wallet is running in, you will need to unlock it again the next time you start it. You will not get a confirmation from  dcrctl , but if you look at your wallet window, it will say:  [INF] RPCS: The wallet has been unlocked without a time limit.   Step Three   That is it! You are now up and running. Some things you might want to try:   Purchase Decred from an exchange (6)  Put your credentials in a file.  Proof of work mining (7)  Proof of stake mining (8)  Have a look at the options for dcrctl (9)", 
            "title": " Connect your wallet to the Decred network"
        }, 
        {
            "location": "/getting-started/user-guides/linux/", 
            "text": "Linux User Guide\n\n\n\n\n Connect to the Decred network\n\n\n\n\nStep One\n\n\n\n\nDownload the latest Decred platform from the \nDecred releases page\n. Extract it to a directory (e.g., \n~/Decred\n). Open three command terminals. If you are running in headless mode via SSH, you will need to use a terminal multiplexer such as \nscreen\n (\nHow do I use \nscreen\n?\n). Where you see the instruction to move to another terminal, you\nll need to start a new screen.\n\n\n\n\nStep Two\n\n\n\n\nGo to one of your terminals and change to the Decred directory that you extracted the files to. They will likely be under a subdirectory such as \n~/Decred/linux-386\n. Type the following (ignore square brackets):\n\n\n~/Decred/$ ./dcrd --rpcuser [daemon username] --rpcpass [daemon password]\n\n\n\n\nChoose any username and password. It is one that you make up on the spot, you do not need to register anywhere to get one. It is what will identify you to the network. Save these, you will need them later. You can also put them in a file so you do ont need to specify them on the command line or in scripts. (See: \nStoring Login Details\n). This program is what is known as a daemon. It works in the background and you will not interface with it directly. It exists solely to connect you to the network.\n\n\n\n\nStep Three\n\n\n\n\nYou should now get a whole lot of text as the daemon connects to the network and starts processing blocks. Wait until it is completed. You will see a line at the start like:\n\n\n22:58:04 2016-02-09 [INF] BMGR: Syncing to block height 617 from peer 104.236.167.133:9108\n\n\n\n\nThen, as it downloads the blocks, you will see lines like:\n\n\n22:58:16 2016-02-09 [INF] BMGR: Processed 321 blocks in the last 10.03s (544 transactions, height 322, 2016-02-09 09:50:34 +1000 EST)\n\n\n\n\nOnce the \nSynching to block height\n equals the processed block height you can continue. This may take quite some time as the block height gets bigger (there is no limit). Note that you are not mining at this point, you are just connected to the network. This connection will be used in the future.\n\n\n\n\n Create your wallet\n\n\n\n\nStep One\n\n\n\n\nNow that you are connected to the network, the next thing you need to do is create a wallet that will hold your account addresses and DCR balance. If you participate in mining, this is where your payments will go.\n\n\n\n\nIMPORTANT\n\n\n\n\nDuring the creation process you will be provided with a list of 33 words that form the private key for your wallet. Treat this list in the same way you would a physical key to a safe. If you lose your key you lose access to your wallet and all funds within it permanently. It cannot be recovered, not even by the Decred developers. It is up to you to keep a backup. It is recommended you write it down on paper then store it somewhere secure. If you decide to keep it on your computer, it would be best to keep it in an encrypted document (just do not forget the password) in case the file or your computer is stolen which brings us to the next point:\n\n\n\n\nVERY IMPORTANT\n\n\n\n\nDO NOT, UNDER ANY CIRCUMSTANCES, GIVE YOUR KEY WORDS OR THE ASSOCIATED HEX KEY TO ANYONE! NOT EVEN THE DEVELOPERS!\n\n\nWe will go through the hex key soon. If you give someone either key, they can use that to copy your wallet which gives them full access to your funds. It\ns like cutting a copy of a key, giving it to some random person on the train and telling him where the safe it opens is. And that you will be out of town for a few days. So to reiterate, keep your key words safe and do not give them to anyone else. With that in mind follow these steps to create a wallet:\n\n\n\n\nStep Two\n\n\n\n\nMake sure you have the \ndcrd\n daemon running (See: \nConnecting to the Decred network\n). Open a new command terminal or screen if using SSH. Navigate to the Decred folder and type: \n./dcrwallet --create\n and press \nEnter\n.\n\n\n~/Decred/$ ./dcrwallet --create\nEnter the private passphrase for your new wallet:\n\n\n\n\nEnter a password that you will use for this wallet. It should be different to the one you used for the daemon. \nEnter\n again to confirm. Make sure you save this somewhere.\n\n\nDo you want to add an additional layer of encryption for public data? (n/no/y/yes) [no]:\n\n\n\n\n\n\nStep Three\n\n\n\n\nAs you can see above you will now be asked if you want extra encryption for your public wallet. Say no. We will have a look at putting all these passwords in a separate file so you do not need to remember them later.\n\n\nDo you have an existing wallet seed you want to use? (n/no/y/yes) [no]:\n\n\n\n\nYou are now asked if you have an existing seed. This is the list of words that make up your private key as explained above. Since this is a new wallet, say no. Your key words will now be displayed. If you have a seed, say yes and enter that instead.\n\n\n\n\nALSO VERY IMPORTANT\n\n\n\n\nSTOP HERE! TOUCH NOTHING!\n\n\nRead this entire step before you do anything. There are two very important pieces of information displayed on the screen. The first, and most important part is your key words. These words form the private key that is used to encrypt your wallet. If you lose this list (and the order they appear in) your wallet will be locked forever and any funds it contains will be lost permanently. As was mentioned above, no one, not even the developers can retrieve them.\n\n\nThe second part is your hex key. This is generated from your key words. Write this down as well, as you will use it to confirm you entered your seed words correctly if you need to restore your wallet.\n\n\n\n\nStep Four\n\n\n\n\nWrite down the key words and hex and store them somewhere safe. Seriously. This is the most important step. Also remember these words (and the hex string) are the keys to your wallet. Do not give them to anyone else. If you do, they can restore your wallet on their computer and steal your DCR.\n\n\nYour wallet generation seed is:\n[list of 33 words]\n\nHex: [long string of letters and numbers]\nIMPORTANT: Keep the seed in a safe place as you\nwill NOT be able to restore your wallet without it.\nPlease keep in mind that anyone who has access\nto the seed can also restore your wallet thereby\ngiving them access to all your funds, so it is\nimperative that you keep it in a secure location.\nOnce you have stored the seed in a safe and secure location, enter \nOK\n to continue:\n\n\n\n\nOnce you have written the key words and hex down type \nOK\n and press \nEnter\n. It should be noted that if you did not write the words down before continuing or somehow otherwise lost them, start this process again (See: \nHow Do I Remove My Wallet?\n).\n\n\nCreating the wallet...\nThe wallet has been created successfully.\n\n\n\n\nThe wallet will then be created. This might take a few minutes if you have a slow computer.\n\n\n\n\n Connect your wallet to the Decred network\n\n\nNow that you have \ncreated your wallet\n and \nconnected to the Decred network\n, you need to link your wallet to the network so it can send and receive coins and participate in mining.\n\n\n\n\nStep One\n\n\n\n\nOpen another command terminal in your Decred directory (or use the last one if you have just created your wallet). Type the following (ignore square brackets):\n\n\n~/Decred/$ ./dcrwallet -u [wallet username] -P [wallet password] --dcrdusername=[daemon username] --dcrdpassword=[daemon password]\n\n\n\n\nOkay, there is a lot to go through here but it is not hard.\n\n\n\n\nFirst, the wallet username. You have not used this before, so just think of one. It will identify your wallet to the network.\n\n\nSecond is the wallet password. This is the private one you made when you created your wallet (Step Two in the \nCreating your wallet\n guide). Note the capital P, Decred is case sensitive.\n\n\nThird and fourth are the username and password you used when staring the daemon (Step Two in the \nConnecting to the Decred network\n guide).\n\n\n\n\nThe wallet will now connect to the network via the daemon. It will begin scans of the network and active addresses which can take a few minutes on slow computers. Eventually it will start showing lines like:\n\n\n[INF] WLLT: Connecting block 0000000000002004ea8fa74af334cb291a22832642b5be603995683534bbb97b, height 9990\n\n\n\n\nThis means your wallet is successfully connected to the network.\n\n\n\n\nStep Two\n\n\n\n\nFinally, you will need to unlock your wallet to allow it to send and receive funds. To do so we\nll introduce the third program in the Decred suite; dcrctl. This is the program you will use to control Decred. Open a third terminal and go to your Decred directory. Type in (ignore square brackets):\n\n\n~/Decred/$ ./dcrctl -u [daemon username] -P [daemon password] --wallet walletpassphrase [wallet password] 0\n\n\n\n\nWhat we are doing here is authenticating with the daemon and using the \n--wallet\n command to send the wallet password to unlock the wallet. The \n0\n means unlock without a time limit. Do note, however, that this only unlocks the wallet for the current session. If you close the window the wallet is running in, you will need to unlock it again the next time you start it. You will not get a confirmation from \ndcrctl\n, but if you look at your wallet terminal/\nscreen\n session, it will say:\n\n\n[INF] RPCS: The wallet has been unlocked without a time limit.\n\n\n\n\n\n\nStep Three\n\n\n\n\nThat is it! You are now up and running. Some things you might want to try:\n\n\n\n\nPurchase Decred from an exchange (6)\n\n\nPut your credentials in a file.\n\n\nProof of work mining (7)\n\n\nProof of stake mining (8)\n\n\nHave a look at the options for dcrctl (9)", 
            "title": "Linux"
        }, 
        {
            "location": "/getting-started/user-guides/linux/#linux-user-guide", 
            "text": "", 
            "title": " Linux User Guide"
        }, 
        {
            "location": "/getting-started/user-guides/linux/#connect-to-the-decred-network", 
            "text": "Step One   Download the latest Decred platform from the  Decred releases page . Extract it to a directory (e.g.,  ~/Decred ). Open three command terminals. If you are running in headless mode via SSH, you will need to use a terminal multiplexer such as  screen  ( How do I use  screen ? ). Where you see the instruction to move to another terminal, you ll need to start a new screen.   Step Two   Go to one of your terminals and change to the Decred directory that you extracted the files to. They will likely be under a subdirectory such as  ~/Decred/linux-386 . Type the following (ignore square brackets):  ~/Decred/$ ./dcrd --rpcuser [daemon username] --rpcpass [daemon password]  Choose any username and password. It is one that you make up on the spot, you do not need to register anywhere to get one. It is what will identify you to the network. Save these, you will need them later. You can also put them in a file so you do ont need to specify them on the command line or in scripts. (See:  Storing Login Details ). This program is what is known as a daemon. It works in the background and you will not interface with it directly. It exists solely to connect you to the network.   Step Three   You should now get a whole lot of text as the daemon connects to the network and starts processing blocks. Wait until it is completed. You will see a line at the start like:  22:58:04 2016-02-09 [INF] BMGR: Syncing to block height 617 from peer 104.236.167.133:9108  Then, as it downloads the blocks, you will see lines like:  22:58:16 2016-02-09 [INF] BMGR: Processed 321 blocks in the last 10.03s (544 transactions, height 322, 2016-02-09 09:50:34 +1000 EST)  Once the  Synching to block height  equals the processed block height you can continue. This may take quite some time as the block height gets bigger (there is no limit). Note that you are not mining at this point, you are just connected to the network. This connection will be used in the future.", 
            "title": " Connect to the Decred network"
        }, 
        {
            "location": "/getting-started/user-guides/linux/#create-your-wallet", 
            "text": "Step One   Now that you are connected to the network, the next thing you need to do is create a wallet that will hold your account addresses and DCR balance. If you participate in mining, this is where your payments will go.   IMPORTANT   During the creation process you will be provided with a list of 33 words that form the private key for your wallet. Treat this list in the same way you would a physical key to a safe. If you lose your key you lose access to your wallet and all funds within it permanently. It cannot be recovered, not even by the Decred developers. It is up to you to keep a backup. It is recommended you write it down on paper then store it somewhere secure. If you decide to keep it on your computer, it would be best to keep it in an encrypted document (just do not forget the password) in case the file or your computer is stolen which brings us to the next point:   VERY IMPORTANT   DO NOT, UNDER ANY CIRCUMSTANCES, GIVE YOUR KEY WORDS OR THE ASSOCIATED HEX KEY TO ANYONE! NOT EVEN THE DEVELOPERS!  We will go through the hex key soon. If you give someone either key, they can use that to copy your wallet which gives them full access to your funds. It s like cutting a copy of a key, giving it to some random person on the train and telling him where the safe it opens is. And that you will be out of town for a few days. So to reiterate, keep your key words safe and do not give them to anyone else. With that in mind follow these steps to create a wallet:   Step Two   Make sure you have the  dcrd  daemon running (See:  Connecting to the Decred network ). Open a new command terminal or screen if using SSH. Navigate to the Decred folder and type:  ./dcrwallet --create  and press  Enter .  ~/Decred/$ ./dcrwallet --create\nEnter the private passphrase for your new wallet:  Enter a password that you will use for this wallet. It should be different to the one you used for the daemon.  Enter  again to confirm. Make sure you save this somewhere.  Do you want to add an additional layer of encryption for public data? (n/no/y/yes) [no]:   Step Three   As you can see above you will now be asked if you want extra encryption for your public wallet. Say no. We will have a look at putting all these passwords in a separate file so you do not need to remember them later.  Do you have an existing wallet seed you want to use? (n/no/y/yes) [no]:  You are now asked if you have an existing seed. This is the list of words that make up your private key as explained above. Since this is a new wallet, say no. Your key words will now be displayed. If you have a seed, say yes and enter that instead.   ALSO VERY IMPORTANT   STOP HERE! TOUCH NOTHING!  Read this entire step before you do anything. There are two very important pieces of information displayed on the screen. The first, and most important part is your key words. These words form the private key that is used to encrypt your wallet. If you lose this list (and the order they appear in) your wallet will be locked forever and any funds it contains will be lost permanently. As was mentioned above, no one, not even the developers can retrieve them.  The second part is your hex key. This is generated from your key words. Write this down as well, as you will use it to confirm you entered your seed words correctly if you need to restore your wallet.   Step Four   Write down the key words and hex and store them somewhere safe. Seriously. This is the most important step. Also remember these words (and the hex string) are the keys to your wallet. Do not give them to anyone else. If you do, they can restore your wallet on their computer and steal your DCR.  Your wallet generation seed is:\n[list of 33 words]\n\nHex: [long string of letters and numbers]\nIMPORTANT: Keep the seed in a safe place as you\nwill NOT be able to restore your wallet without it.\nPlease keep in mind that anyone who has access\nto the seed can also restore your wallet thereby\ngiving them access to all your funds, so it is\nimperative that you keep it in a secure location.\nOnce you have stored the seed in a safe and secure location, enter  OK  to continue:  Once you have written the key words and hex down type  OK  and press  Enter . It should be noted that if you did not write the words down before continuing or somehow otherwise lost them, start this process again (See:  How Do I Remove My Wallet? ).  Creating the wallet...\nThe wallet has been created successfully.  The wallet will then be created. This might take a few minutes if you have a slow computer.", 
            "title": " Create your wallet"
        }, 
        {
            "location": "/getting-started/user-guides/linux/#connect-your-wallet-to-the-decred-network", 
            "text": "Now that you have  created your wallet  and  connected to the Decred network , you need to link your wallet to the network so it can send and receive coins and participate in mining.   Step One   Open another command terminal in your Decred directory (or use the last one if you have just created your wallet). Type the following (ignore square brackets):  ~/Decred/$ ./dcrwallet -u [wallet username] -P [wallet password] --dcrdusername=[daemon username] --dcrdpassword=[daemon password]  Okay, there is a lot to go through here but it is not hard.   First, the wallet username. You have not used this before, so just think of one. It will identify your wallet to the network.  Second is the wallet password. This is the private one you made when you created your wallet (Step Two in the  Creating your wallet  guide). Note the capital P, Decred is case sensitive.  Third and fourth are the username and password you used when staring the daemon (Step Two in the  Connecting to the Decred network  guide).   The wallet will now connect to the network via the daemon. It will begin scans of the network and active addresses which can take a few minutes on slow computers. Eventually it will start showing lines like:  [INF] WLLT: Connecting block 0000000000002004ea8fa74af334cb291a22832642b5be603995683534bbb97b, height 9990  This means your wallet is successfully connected to the network.   Step Two   Finally, you will need to unlock your wallet to allow it to send and receive funds. To do so we ll introduce the third program in the Decred suite; dcrctl. This is the program you will use to control Decred. Open a third terminal and go to your Decred directory. Type in (ignore square brackets):  ~/Decred/$ ./dcrctl -u [daemon username] -P [daemon password] --wallet walletpassphrase [wallet password] 0  What we are doing here is authenticating with the daemon and using the  --wallet  command to send the wallet password to unlock the wallet. The  0  means unlock without a time limit. Do note, however, that this only unlocks the wallet for the current session. If you close the window the wallet is running in, you will need to unlock it again the next time you start it. You will not get a confirmation from  dcrctl , but if you look at your wallet terminal/ screen  session, it will say:  [INF] RPCS: The wallet has been unlocked without a time limit.   Step Three   That is it! You are now up and running. Some things you might want to try:   Purchase Decred from an exchange (6)  Put your credentials in a file.  Proof of work mining (7)  Proof of stake mining (8)  Have a look at the options for dcrctl (9)", 
            "title": " Connect your wallet to the Decred network"
        }, 
        {
            "location": "/getting-started/user-guides/web/", 
            "text": "Web Client User Guide\n\n\n\n\nThere are a couple of things you need to know about the web client before you use it:\n\n\n\n\nYou cannot \nproof-of-stake mine\n with it.\n\n\nYour wallet is identified by your seed key words, but there is no other authentication at this time. This means that anyone with access to your computer will be able to access your funds in the wallet. However, you can set a password for sending funds.\n\n\n\n\n\n\n Create your web client wallet\n\n\n\n\nStep One\n\n\n\n\nGo to \nhttps://wallet.decred.org\n. You will be presented with the \nTerms and Conditions\n screen. Pay extra attention to the following:\n\n\nJust like the command-line wallet, if you lose your seed words or your password for sending funds you will lose access to your wallet. There is no password reset. Also note that all transactions on Decred are irreversible by design. If you accidentally send funds to the wrong address, you will need to ask the recipient to send them back. The developers are unable to reverse transactions. Click \nI Agree\n once you have read them. You will now see the welcome screen. If this is the first time you have used Decred, click \nGet Started\n. If you want to restore a previously used wallet, click \nImport Backup\n. This guide will assume you are just starting out so click \nGet Started\n.\n\n\n\n\nStep Two\n\n\n\n\nA wallet will be generated for you and you will see this screen:\n\n\nNote that under \nPersonal Wallet\n on the left it says \nTestnet\n. This wallet will only work on the test Decred network which is not very useful to us. Click the dropdown in the top left, then click \nAdd wallet\n. Click \nCreate New Wallet\n. Give your wallet a name then click \nCreate New Wallet\n.\n\n\n\n\nStep Three\n\n\n\n\nYour wallet is now created and ready to use. However, before you do anything else, you should add a password for sending funds and backup the seed words that were used to create your wallet. This is doubly true for the web client which does not store a permanent record. Your wallet data is stored in the browser cache and can be deleted quite easily. If you are running in incognito mode, it will be deleted as soon as you close the browser. \nWITHOUT THESE KEY WORDS YOU LOSE ACCESS TO ALL FUNDS IN YOUR WALLET\n should the wallet data be deleted. The funds themselves still exist in the blockchain, however, without the key you cannot access them.\n\n\nClick the \nPreferences\n button on the right opposite your wallet name. There are really only three things you will be interested in here:\n\n\n\n\n\n\n\n\nOption\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nWallet Alias\n\n\nYou can rename the wallet if you wish.\n\n\n\n\n\n\nRequest Password for Spending Funds\n\n\nSince your wallet is saved in the browser cache, there is no extra password required to access it. By setting a password here, you ensure that only you can send funds if someone else accesses your browser. Type a password in and click \nSet\n. Note the alert that says passwords cannot be recovered. There is no password reset feature on the wallet. If you lose the password, you will never be able to move your coins out of the wallet or use them for proof-of-stake voting.\n\n\n\n\n\n\nBackup\n\n\nThis is where you will find your seed key words.\n\n\n\n\n\n\n\n\n\n\nStep Four\n\n\n\n\nClick \nBackup\n. You will see this screen:\n\n\nFirst of all, read the note. Only use ONE wallet at a time with a given seed (See: \nFAQ\n). You can have multiple wallets installed on different machines, but only one of them should be running at any given time. Click \nShow Wallet Seed\n. Write this down somewhere safe, or put it in an encrypted document to which you will not forget the password. This list of words is used to generate the authentication key for your wallet. Anyone who possesses this list can access the funds in your wallet.\n\n\n\n\nVERY IMPORTANT\n\n\n\n\nDO NOT, UNDER ANY CIRCUMSTANCES, GIVE YOUR KEY WORDS TO ANYONE! NOT EVEN THE DEVELOPERS!\n\n\nOnce you have written the words down (and have triple-checked that they are correct; capitalization is important), go to the next step.\n\n\n\n\nStep Five\n\n\n\n\nNow that you have written down your key words and checked them, do it again. Seriously. This step is critical. Without this list your wallet cannot be reconstructed and no one, not even the developers, can restore it. Now that you are sure the list is stored correctly, click \nDelete Words\n. Click \nBack\n twice to get to the main wallet screen.\n\n\n\n\n Send funds with the web client\n\n\n\n\nStep One\n\n\n\n\nOn the main web wallet page, click the \nSend\n button at the bottom. You will be taken to this page. Note the \nAdvanced Options\n section has already been expanded. In the \nTo\n field, put in the Decred address of the recipient.\n\n\n\n\nStep Two\n\n\n\n\nIn \nAmount\n, enter the value in DCR to send to the recipient. If you wish you can type an optional message in the \nNote\n field. Press \nSend\n. The \nUse Unconfirmed Funds\n option lets you use funds that the network knows are being sent to you but have not yet been confirmed by \nproof-of-work miners\n. If this is turned on and the amount specified can only be covered by using unconfirmed funds, the transaction will not proceed until the required funds have been confirmed.\n\n\n\n\n Receive funds with the web client\n\n\n\n\nStep One\n\n\n\n\nClick the \nReceive\n button at the bottom of the window. You will see this screen:\n\n\nGive the person sending you DCR the address displayed (it will start with \nDs\n) or they can use the QR code if their wallet or service accepts them. You can use the same address as often as you want, but for privacy it is recommended that you generate a new address each time. Do not worry about being given a duplicate address. There are around \n2.08x10^93\n possible addresses, so we will probably reach the heat death of the universe before we run of Decred addresses.\n\n\n\n\nWARNING\n\n\n\n\nThe above address is for demonstration purposes only, but is a real address. The wallet it is linked to is temporary and the key has already been deleted. If you try sending DCR to this address it will work and no one will ever be able to access them again.\n\n\nDO NOT ATTEMPT TO SEND DCR TO THIS ADDRESS\n.", 
            "title": "Web"
        }, 
        {
            "location": "/getting-started/user-guides/web/#web-client-user-guide", 
            "text": "There are a couple of things you need to know about the web client before you use it:   You cannot  proof-of-stake mine  with it.  Your wallet is identified by your seed key words, but there is no other authentication at this time. This means that anyone with access to your computer will be able to access your funds in the wallet. However, you can set a password for sending funds.", 
            "title": " Web Client User Guide"
        }, 
        {
            "location": "/getting-started/user-guides/web/#create-your-web-client-wallet", 
            "text": "Step One   Go to  https://wallet.decred.org . You will be presented with the  Terms and Conditions  screen. Pay extra attention to the following:  Just like the command-line wallet, if you lose your seed words or your password for sending funds you will lose access to your wallet. There is no password reset. Also note that all transactions on Decred are irreversible by design. If you accidentally send funds to the wrong address, you will need to ask the recipient to send them back. The developers are unable to reverse transactions. Click  I Agree  once you have read them. You will now see the welcome screen. If this is the first time you have used Decred, click  Get Started . If you want to restore a previously used wallet, click  Import Backup . This guide will assume you are just starting out so click  Get Started .   Step Two   A wallet will be generated for you and you will see this screen:  Note that under  Personal Wallet  on the left it says  Testnet . This wallet will only work on the test Decred network which is not very useful to us. Click the dropdown in the top left, then click  Add wallet . Click  Create New Wallet . Give your wallet a name then click  Create New Wallet .   Step Three   Your wallet is now created and ready to use. However, before you do anything else, you should add a password for sending funds and backup the seed words that were used to create your wallet. This is doubly true for the web client which does not store a permanent record. Your wallet data is stored in the browser cache and can be deleted quite easily. If you are running in incognito mode, it will be deleted as soon as you close the browser.  WITHOUT THESE KEY WORDS YOU LOSE ACCESS TO ALL FUNDS IN YOUR WALLET  should the wallet data be deleted. The funds themselves still exist in the blockchain, however, without the key you cannot access them.  Click the  Preferences  button on the right opposite your wallet name. There are really only three things you will be interested in here:     Option  Description      Wallet Alias  You can rename the wallet if you wish.    Request Password for Spending Funds  Since your wallet is saved in the browser cache, there is no extra password required to access it. By setting a password here, you ensure that only you can send funds if someone else accesses your browser. Type a password in and click  Set . Note the alert that says passwords cannot be recovered. There is no password reset feature on the wallet. If you lose the password, you will never be able to move your coins out of the wallet or use them for proof-of-stake voting.    Backup  This is where you will find your seed key words.      Step Four   Click  Backup . You will see this screen:  First of all, read the note. Only use ONE wallet at a time with a given seed (See:  FAQ ). You can have multiple wallets installed on different machines, but only one of them should be running at any given time. Click  Show Wallet Seed . Write this down somewhere safe, or put it in an encrypted document to which you will not forget the password. This list of words is used to generate the authentication key for your wallet. Anyone who possesses this list can access the funds in your wallet.   VERY IMPORTANT   DO NOT, UNDER ANY CIRCUMSTANCES, GIVE YOUR KEY WORDS TO ANYONE! NOT EVEN THE DEVELOPERS!  Once you have written the words down (and have triple-checked that they are correct; capitalization is important), go to the next step.   Step Five   Now that you have written down your key words and checked them, do it again. Seriously. This step is critical. Without this list your wallet cannot be reconstructed and no one, not even the developers, can restore it. Now that you are sure the list is stored correctly, click  Delete Words . Click  Back  twice to get to the main wallet screen.", 
            "title": " Create your web client wallet"
        }, 
        {
            "location": "/getting-started/user-guides/web/#send-funds-with-the-web-client", 
            "text": "Step One   On the main web wallet page, click the  Send  button at the bottom. You will be taken to this page. Note the  Advanced Options  section has already been expanded. In the  To  field, put in the Decred address of the recipient.   Step Two   In  Amount , enter the value in DCR to send to the recipient. If you wish you can type an optional message in the  Note  field. Press  Send . The  Use Unconfirmed Funds  option lets you use funds that the network knows are being sent to you but have not yet been confirmed by  proof-of-work miners . If this is turned on and the amount specified can only be covered by using unconfirmed funds, the transaction will not proceed until the required funds have been confirmed.", 
            "title": " Send funds with the web client"
        }, 
        {
            "location": "/getting-started/user-guides/web/#receive-funds-with-the-web-client", 
            "text": "Step One   Click the  Receive  button at the bottom of the window. You will see this screen:  Give the person sending you DCR the address displayed (it will start with  Ds ) or they can use the QR code if their wallet or service accepts them. You can use the same address as often as you want, but for privacy it is recommended that you generate a new address each time. Do not worry about being given a duplicate address. There are around  2.08x10^93  possible addresses, so we will probably reach the heat death of the universe before we run of Decred addresses.   WARNING   The above address is for demonstration purposes only, but is a real address. The wallet it is linked to is temporary and the key has already been deleted. If you try sending DCR to this address it will work and no one will ever be able to access them again.  DO NOT ATTEMPT TO SEND DCR TO THIS ADDRESS .", 
            "title": " Receive funds with the web client"
        }, 
        {
            "location": "/getting-started/obtaining-dcr/", 
            "text": "", 
            "title": "Obtaining DCR"
        }, 
        {
            "location": "/getting-started/using-the-block-explorer/", 
            "text": "Using the Block Explorer\n\n\n\n\n Overview\n\n\nAll transactions in the Decred network are visible through use of the block explorer, located at \nhttps://mainnet.decred.org\n. Let us review the home page:\n\n\n\n\n\n\n\n\nOption\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nHeight\n\n\nThe block number.\n\n\n\n\n\n\nAge\n\n\nHow long ago the block was added to the blockchain.\n\n\n\n\n\n\nTransactions\n\n\nThe number of transactions included in the block.\n\n\n\n\n\n\nVotes\n\n\nThe number of proof-of-stake votes included in the block.\n\n\n\n\n\n\nFresh Stake\n\n\nThe number of new tickets purchased in this block.\n\n\n\n\n\n\nSize\n\n\nThe size (in bytes) of the block.\n\n\n\n\n\n\n\n\nUnder \nLatest Transactions\n, you can see the transaction ID (txid) and the value (in DCR) transmitted across the network.\n\n\n\n\n Blocks\n\n\nBlocks can be found by searching for their block height number, clicking on a \nHeight\n value from the home page, or from their \nBlockHash\n value. Older blocks will have lower block numbers. The top half of a block overview shows relevant information about this specific block. This information includes: the block height, the block hash, and several key network parameters, described below:\n\n\n\n\n\n\n\n\nOption\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nNumber of Transactions\n\n\nThe number of standard transactions (DCR sent from one user to another).\n\n\n\n\n\n\nHeight\n\n\nThe height of the blockchain in which this block resides.\n\n\n\n\n\n\nBlock Reward\n\n\nThe amount of new DCR minted in this block.\n\n\n\n\n\n\nTimestamp\n\n\nThe time this block was created by a miner and was included in the blockchain.\n\n\n\n\n\n\nMerkle Root\n\n\nA hash value of all the transaction hashes included in this block.\n\n\n\n\n\n\nStake Root\n\n\nA hash value of all the stake related transaction hashes in this block. This includes ticket purchases, votes, and ticket revocations.\n\n\n\n\n\n\nVoteBits\n\n\n(1) Block was approved by proof-of-stake voters. (2) Block was vetoed by proof-of-stake voters and all non-stake transactions in the block were invalidated, along with the proof-of-work miner and development subsidy.\n\n\n\n\n\n\nFinal State\n\n\nThe final state of the pseudo random number generator used for ticket selection.\n\n\n\n\n\n\nVoters\n\n\nThe number of successful proof-of-stake votes cast in this block. The maximum value is 5.\n\n\n\n\n\n\nFresh Stake\n\n\nThe number of stake ticket purchases confirmed in this block.\n\n\n\n\n\n\nRevocations\n\n\nThe number of tickets that failed to vote and were revoked.\n\n\n\n\n\n\nPoolSize\n\n\nThe total number of active proof-of-stake tickets.\n\n\n\n\n\n\nDifficulty\n\n\nThe proof-of-work network difficulty.\n\n\n\n\n\n\nSBits\n\n\nThe price of one proof-of-stake ticket.\n\n\n\n\n\n\nBits\n\n\nA compact version of the network difficulty at the time the block was mined.\n\n\n\n\n\n\nSize\n\n\nThe size of the block (in bytes).\n\n\n\n\n\n\nVersion\n\n\nThe version of the block.\n\n\n\n\n\n\nNonce\n\n\nThe value used by a miner to find the correct solution for this block.\n\n\n\n\n\n\n\n\n Transactions\n\n\nThis section lists all the transactions that were mined into this block. Transactions are chosen from the network mempool in order of highest fee first. All transactions in the block overview follow this order: Standard transactions (peer-to-peer transfer), proof-of-stake votes, proof-of-stake ticket purchases. The following sections will review each type of transaction.\n\n\n\n\nStandard transactions\n\n\nHere is an unconfirmed standard transaction that went through the Decred network. Unconfirmed means it has not been included into a block yet, which implies it is a very recent transaction or it was sent with a very low fee. This transaction below depicts one user sending DCR to two separate addresses. The sending address is on the left, and the receiving address is on the right.\n\n\n\n\n\n\n\n\nOption\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nSize\n\n\nThe size of the transaction in bytes.\n\n\n\n\n\n\nFee rate\n\n\nThe rate of fees collected by the network (per kB).\n\n\n\n\n\n\nReceived Time\n\n\nThe time the network confirmed the transaction.\n\n\n\n\n\n\nMined Time\n\n\nThe time a miner included the transaction in a block.\n\n\n\n\n\n\nIncluded in Block\n\n\nThe block number that the transaction became a part of.\n\n\n\n\n\n\n\n\nNote \nReceived Time\n, \nMined Time\n, and \nIncluded in Block\n will not have a value until a miner confirms the transaction. Depending on the fees in the mempool, this will take five minutes on average. Once there is at least one confirmation, the transaction is considered complete.\n\n\n\n\nTicket purchases\n\n\nHere is an example of a ticket purchase (stake submission). The same details described above appear in the upper summary section. This time, the example transaction has been confirmed.\n\n\nNote the difference under details: The word \nTicket\n appears above the sender\ns wallet address on the left, and the words \nSubsidy Commitment\n appear on the right. This particular user purchased a stake ticket for 8.75411638 DCR and received change in the amount of 7.15994209 DCR. The address listed on the left under \nTicket\n is the address that that contains the funds used to purchase this ticket. The first output on the right is the address that retains voting rights for this specific ticket. The second output, \nSubsidy Commitment\n, is the address where the reward will go. This is not yet shown by the block explorer at this time. The third and final output is the address where change for this transaction will be sent.\n\n\n\n\nProof-of-stake votes\n\n\nNote the identifying terms in the details section: \nVote\n, \nStake Base\n, \nBlock Commitment\n, and \nVote Bits\n:\n\n\nThese keywords indicate that this transaction is a vote that was cast from a proof-of-stake ticket holder. In this particular example, the user had previously purchased a ticket for 8.99472311 DCR and was sent 10.82959184 DCR after the vote was cast in this transaction.", 
            "title": "Using the Block Explorer"
        }, 
        {
            "location": "/getting-started/using-the-block-explorer/#using-the-block-explorer", 
            "text": "", 
            "title": " Using the Block Explorer"
        }, 
        {
            "location": "/getting-started/using-the-block-explorer/#overview", 
            "text": "All transactions in the Decred network are visible through use of the block explorer, located at  https://mainnet.decred.org . Let us review the home page:     Option  Explanation      Height  The block number.    Age  How long ago the block was added to the blockchain.    Transactions  The number of transactions included in the block.    Votes  The number of proof-of-stake votes included in the block.    Fresh Stake  The number of new tickets purchased in this block.    Size  The size (in bytes) of the block.     Under  Latest Transactions , you can see the transaction ID (txid) and the value (in DCR) transmitted across the network.", 
            "title": " Overview"
        }, 
        {
            "location": "/getting-started/using-the-block-explorer/#blocks", 
            "text": "Blocks can be found by searching for their block height number, clicking on a  Height  value from the home page, or from their  BlockHash  value. Older blocks will have lower block numbers. The top half of a block overview shows relevant information about this specific block. This information includes: the block height, the block hash, and several key network parameters, described below:     Option  Explanation      Number of Transactions  The number of standard transactions (DCR sent from one user to another).    Height  The height of the blockchain in which this block resides.    Block Reward  The amount of new DCR minted in this block.    Timestamp  The time this block was created by a miner and was included in the blockchain.    Merkle Root  A hash value of all the transaction hashes included in this block.    Stake Root  A hash value of all the stake related transaction hashes in this block. This includes ticket purchases, votes, and ticket revocations.    VoteBits  (1) Block was approved by proof-of-stake voters. (2) Block was vetoed by proof-of-stake voters and all non-stake transactions in the block were invalidated, along with the proof-of-work miner and development subsidy.    Final State  The final state of the pseudo random number generator used for ticket selection.    Voters  The number of successful proof-of-stake votes cast in this block. The maximum value is 5.    Fresh Stake  The number of stake ticket purchases confirmed in this block.    Revocations  The number of tickets that failed to vote and were revoked.    PoolSize  The total number of active proof-of-stake tickets.    Difficulty  The proof-of-work network difficulty.    SBits  The price of one proof-of-stake ticket.    Bits  A compact version of the network difficulty at the time the block was mined.    Size  The size of the block (in bytes).    Version  The version of the block.    Nonce  The value used by a miner to find the correct solution for this block.", 
            "title": " Blocks"
        }, 
        {
            "location": "/getting-started/using-the-block-explorer/#transactions", 
            "text": "This section lists all the transactions that were mined into this block. Transactions are chosen from the network mempool in order of highest fee first. All transactions in the block overview follow this order: Standard transactions (peer-to-peer transfer), proof-of-stake votes, proof-of-stake ticket purchases. The following sections will review each type of transaction.", 
            "title": " Transactions"
        }, 
        {
            "location": "/getting-started/using-the-block-explorer/#standard-transactions", 
            "text": "Here is an unconfirmed standard transaction that went through the Decred network. Unconfirmed means it has not been included into a block yet, which implies it is a very recent transaction or it was sent with a very low fee. This transaction below depicts one user sending DCR to two separate addresses. The sending address is on the left, and the receiving address is on the right.     Option  Explanation      Size  The size of the transaction in bytes.    Fee rate  The rate of fees collected by the network (per kB).    Received Time  The time the network confirmed the transaction.    Mined Time  The time a miner included the transaction in a block.    Included in Block  The block number that the transaction became a part of.     Note  Received Time ,  Mined Time , and  Included in Block  will not have a value until a miner confirms the transaction. Depending on the fees in the mempool, this will take five minutes on average. Once there is at least one confirmation, the transaction is considered complete.", 
            "title": "Standard transactions"
        }, 
        {
            "location": "/getting-started/using-the-block-explorer/#ticket-purchases", 
            "text": "Here is an example of a ticket purchase (stake submission). The same details described above appear in the upper summary section. This time, the example transaction has been confirmed.  Note the difference under details: The word  Ticket  appears above the sender s wallet address on the left, and the words  Subsidy Commitment  appear on the right. This particular user purchased a stake ticket for 8.75411638 DCR and received change in the amount of 7.15994209 DCR. The address listed on the left under  Ticket  is the address that that contains the funds used to purchase this ticket. The first output on the right is the address that retains voting rights for this specific ticket. The second output,  Subsidy Commitment , is the address where the reward will go. This is not yet shown by the block explorer at this time. The third and final output is the address where change for this transaction will be sent.", 
            "title": "Ticket purchases"
        }, 
        {
            "location": "/getting-started/using-the-block-explorer/#proof-of-stake-votes", 
            "text": "Note the identifying terms in the details section:  Vote ,  Stake Base ,  Block Commitment , and  Vote Bits :  These keywords indicate that this transaction is a vote that was cast from a proof-of-stake ticket holder. In this particular example, the user had previously purchased a ticket for 8.99472311 DCR and was sent 10.82959184 DCR after the vote was cast in this transaction.", 
            "title": "Proof-of-stake votes"
        }, 
        {
            "location": "/mining/overview/", 
            "text": "Overview\n\n\nDecred has two methods of transaction verification proof-of-work (PoW) and proof-of-stake (PoS).\n\n\n\n\n1. \n Proof-of-work Mining\n\n\nProof-of-work mining, more commonly referred to as PoW mining, is the activity of committing your computer\u2019s hardware and resources to process network transactions and build the blocks that make up the blockchain in the Decred network. Each time a block is created (by a miner), about 30 new Decred coins are made. These coins are then split up as follows:\n\n\n\n\n\n\n\n\nSubsidy\n\n\nParty\n\n\n\n\n\n\n\n\n\n\n60%\n\n\nPoW Miners\n\n\n\n\n\n\n30%\n\n\nPoS Voters\n\n\n\n\n\n\n10%\n\n\nDecred development subsidy\n\n\n\n\n\n\n\n\nYou will, on average, receive a reward that is roughly proportional to the hashrate of your miner and the overall hashrate of the network when you commit your computer to PoW mining. To get started, you must have a computer with a video card. Most video cards can be used for mining (including the \nmobile\n types found in some laptops). In general, higher end video cards perform at higher hashrates and therefore receive higher rewards.\n\n\n\n\n1.1 \n Pool Mining\n\n\nIf you have a small hashrate compared to the hashrate of the network, pool mining may be your best option. When you mine in a pool, your miner\u2019s hashrate is combined with all the other pool miners\u2019 hashrates to look for the correct solution for a block. You will receive a reward based on the amount of work your miner performs in the pool.\n\n\nThese are the community mining pools:\n\n\n\n\nhttp://coinmine.pl/dcr\n\n\nhttps://dcr.maxminers.net\n\n\nhttps://dcr.suprnova.cc\n\n\nhttps://pool.mn/dcr\n\n\nhttp://yiimp.ccminer.org\n\n\nhttps://zpool.ca\n\n\n\n\n\n\n1.1.1 cgminer\n\n\n\n\n1.1.1.1 \n \nWindows\n\n\n\n\n1.1.1.2 \n \nLinux\n\n\n\n\n1.2 \n Solo Mining\n\n\n\n\n1.2.1 cgminer\n\n\n\n\n1.2.1.1 \n \nWindows\n\n\n\n\n1.2.2.2 \n \nLinux\n\n\n\n\n2. \n Proof-of-stake Mining\n\n\nProof of Stake mining is the second method of transaction verification in Decred. It is computationally cheap (you can run a full PoS node on a Rasberry Pi) but it requires you to already have some DCR in your wallet. In the Decred network, PoW miners solve blocks then turn those blocks over to PoS miners to vote on them. PoS miners buy tickets for the stake pool via their wallets. When a block is completed, 5 tickets are chosen at random from the stake pool to vote on the block. If at least 3 votes are \u2018Yes\n then the block is validated, included in the block chain and both PoW and PoS miners are paid. If the vote fails, the block is discarded and the transactions return to be included in another block. The PoW miners are not paid, however the PoS miners are.\n\n\nThis is to incentivise PoW miners to mine according to the wishes of PoS miners. For example, if the rules of the network change in the future any PoW miners who don\nt follow them will not be paid. It also helps stop large mining pools getting too much influence over the network. In other cryptocurrencies that don\nt use PoS, the large groups of PoW miners who effectively control the network can collude to block transactions, stop network changes or even force faked transactions (although this would take a huge amount of resources). Collusion between PoW and PoS miners is not possible as tickets are not chosen until the time of the vote. Collusion between PoS miners is likewise remote as the ticket pool is kept at around 40,960 active tickets at any time. The chance of three tickets belonging to the same individual or group being chosen for the same block is very small. Even if this did happen every transaction is validated at least twice so the chance of anyone manipulating the blockchain is effectively zero.\n\n\n\n\n2.1 \n \nPool Mining\n\n\n\n\n2.2 \n \nSolo Mining", 
            "title": "Overview"
        }, 
        {
            "location": "/mining/overview/#overview", 
            "text": "Decred has two methods of transaction verification proof-of-work (PoW) and proof-of-stake (PoS).", 
            "title": " Overview"
        }, 
        {
            "location": "/mining/overview/#1-proof-of-work-mining", 
            "text": "Proof-of-work mining, more commonly referred to as PoW mining, is the activity of committing your computer\u2019s hardware and resources to process network transactions and build the blocks that make up the blockchain in the Decred network. Each time a block is created (by a miner), about 30 new Decred coins are made. These coins are then split up as follows:     Subsidy  Party      60%  PoW Miners    30%  PoS Voters    10%  Decred development subsidy     You will, on average, receive a reward that is roughly proportional to the hashrate of your miner and the overall hashrate of the network when you commit your computer to PoW mining. To get started, you must have a computer with a video card. Most video cards can be used for mining (including the  mobile  types found in some laptops). In general, higher end video cards perform at higher hashrates and therefore receive higher rewards.", 
            "title": "1.  Proof-of-work Mining"
        }, 
        {
            "location": "/mining/overview/#11-pool-mining", 
            "text": "If you have a small hashrate compared to the hashrate of the network, pool mining may be your best option. When you mine in a pool, your miner\u2019s hashrate is combined with all the other pool miners\u2019 hashrates to look for the correct solution for a block. You will receive a reward based on the amount of work your miner performs in the pool.  These are the community mining pools:   http://coinmine.pl/dcr  https://dcr.maxminers.net  https://dcr.suprnova.cc  https://pool.mn/dcr  http://yiimp.ccminer.org  https://zpool.ca", 
            "title": "1.1  Pool Mining"
        }, 
        {
            "location": "/mining/overview/#111-cgminer", 
            "text": "", 
            "title": "1.1.1 cgminer"
        }, 
        {
            "location": "/mining/overview/#1111-windows", 
            "text": "", 
            "title": "1.1.1.1  Windows"
        }, 
        {
            "location": "/mining/overview/#1112-linux", 
            "text": "", 
            "title": "1.1.1.2  Linux"
        }, 
        {
            "location": "/mining/overview/#12-solo-mining", 
            "text": "", 
            "title": "1.2  Solo Mining"
        }, 
        {
            "location": "/mining/overview/#121-cgminer", 
            "text": "", 
            "title": "1.2.1 cgminer"
        }, 
        {
            "location": "/mining/overview/#1211-windows", 
            "text": "", 
            "title": "1.2.1.1  Windows"
        }, 
        {
            "location": "/mining/overview/#1222-linux", 
            "text": "", 
            "title": "1.2.2.2  Linux"
        }, 
        {
            "location": "/mining/overview/#2-proof-of-stake-mining", 
            "text": "Proof of Stake mining is the second method of transaction verification in Decred. It is computationally cheap (you can run a full PoS node on a Rasberry Pi) but it requires you to already have some DCR in your wallet. In the Decred network, PoW miners solve blocks then turn those blocks over to PoS miners to vote on them. PoS miners buy tickets for the stake pool via their wallets. When a block is completed, 5 tickets are chosen at random from the stake pool to vote on the block. If at least 3 votes are \u2018Yes  then the block is validated, included in the block chain and both PoW and PoS miners are paid. If the vote fails, the block is discarded and the transactions return to be included in another block. The PoW miners are not paid, however the PoS miners are.  This is to incentivise PoW miners to mine according to the wishes of PoS miners. For example, if the rules of the network change in the future any PoW miners who don t follow them will not be paid. It also helps stop large mining pools getting too much influence over the network. In other cryptocurrencies that don t use PoS, the large groups of PoW miners who effectively control the network can collude to block transactions, stop network changes or even force faked transactions (although this would take a huge amount of resources). Collusion between PoW and PoS miners is not possible as tickets are not chosen until the time of the vote. Collusion between PoS miners is likewise remote as the ticket pool is kept at around 40,960 active tickets at any time. The chance of three tickets belonging to the same individual or group being chosen for the same block is very small. Even if this did happen every transaction is validated at least twice so the chance of anyone manipulating the blockchain is effectively zero.", 
            "title": "2.  Proof-of-stake Mining"
        }, 
        {
            "location": "/mining/overview/#21-pool-mining", 
            "text": "", 
            "title": "2.1  Pool Mining"
        }, 
        {
            "location": "/mining/overview/#22-solo-mining", 
            "text": "", 
            "title": "2.2  Solo Mining"
        }, 
        {
            "location": "/mining/proof-of-work/pool-mining/cgminer/windows/", 
            "text": "Windows User Guide\n\n\n\n\n Download and extract cgminer\n\n\nVisit https://github.com/decred/cgminer/releases to find the latest cgminer release. For 64-bit Windows, download and extract \ncgminer-decred-w64_*.zip\n. For 32-bit Windows, download and extract \ncgminer-decred-w32_*.zip\n. Extract all files to a new folder and open the new folder to view the files.\n\n\n Initialize and run cgminer\n\n\n\n\nStep One\n\n\n\n\nOpen a command prompt window by typing \ncmd\n into the address bar at the top of the file explorer that has the new cgminer files and pressing \nEnter\n. Type the following in your command prompt window to list your mining-capable hardware:\n\n\nC:\\Decred\n cgminer -n\n\n\n\n\nYou should see your video cards listed either by their GPU codename or the driver name. The last line of output should show the number of compatible GPUs you can mine with.\n\n\n\n\nStep Two (Optional)\n\n\n\n\nTo benchmark your system and find out the hashrate it can perform at, use the command:\n\n\nC:\\Decred\n cgminer --blake256 --benchmark\n\n\n\n\n\n\nStep Three\n\n\n\n\nRegister on one of the pool websites and setup a new miner for each of your mining computers. Refer to the pool website of your choice for instructions, if needed. In your command line window from step one, type the following command to launch cgminer (ignore square brackets):\n\n\nC:\\Decred\n cgminer --blake256 -o [pool url]:[port number] -u [web login].[worker name] -p [worker password]\n\n\n\n\nExample:\n\n\nC:\\Decred\n cgminer --blake256 -o http://dcr.maxminers.net:7727 -u DecredMiner.miner1 -p 7@!x5L1\n\n\n\n\n\n\nStep Four\n\n\n\n\ncgminer should now launch. Create a cgminer configuration file by pressing the following keys: \nS\n (Settings), \nW\n (Write Config File), \nEnter\n (Save config file as \ncgminer.conf\n). Note that \ncgminer.conf\n will be placed in the same directory as \ncgminer.exe\n To add any other pools to your configuration file, open \ncgminer.conf\n with Notepad or a similar text editor. Use the following syntax to make changes in the \npools\n section of the configuration file (note the comma between each individual pool entry):\n\n\npools\n : [\n   {\n      \nurl\n : \nhttp://dcr.maxminers.net:7727\n,\n      \nuser\n : \nLogin.Worker\n,\n      \npass\n : \npassword\n\n   },\n   {\n      \nurl\n : \nhttp://dcr.suprnova.cc:9110\n,\n      \nuser\n : \nLogin.Worker\n,\n      \npass\n : \npassword\n\n   }\n]\n\n\n\n\n\n\nStep Five\n\n\n\n\nSave \ncgminer.conf\n and close \ncgminer.exe\n. Double-click on the cgminer program and it will launch and load the newly created configuration file. This concludes the basic cgminer pool setup guide. For more information on cgminer usage and detailed explanations on program functions, refer to the \ncgminer README\n.", 
            "title": "Windows"
        }, 
        {
            "location": "/mining/proof-of-work/pool-mining/cgminer/windows/#windows-user-guide", 
            "text": "", 
            "title": " Windows User Guide"
        }, 
        {
            "location": "/mining/proof-of-work/pool-mining/cgminer/windows/#download-and-extract-cgminer", 
            "text": "Visit https://github.com/decred/cgminer/releases to find the latest cgminer release. For 64-bit Windows, download and extract  cgminer-decred-w64_*.zip . For 32-bit Windows, download and extract  cgminer-decred-w32_*.zip . Extract all files to a new folder and open the new folder to view the files.", 
            "title": " Download and extract cgminer"
        }, 
        {
            "location": "/mining/proof-of-work/pool-mining/cgminer/windows/#initialize-and-run-cgminer", 
            "text": "Step One   Open a command prompt window by typing  cmd  into the address bar at the top of the file explorer that has the new cgminer files and pressing  Enter . Type the following in your command prompt window to list your mining-capable hardware:  C:\\Decred  cgminer -n  You should see your video cards listed either by their GPU codename or the driver name. The last line of output should show the number of compatible GPUs you can mine with.   Step Two (Optional)   To benchmark your system and find out the hashrate it can perform at, use the command:  C:\\Decred  cgminer --blake256 --benchmark   Step Three   Register on one of the pool websites and setup a new miner for each of your mining computers. Refer to the pool website of your choice for instructions, if needed. In your command line window from step one, type the following command to launch cgminer (ignore square brackets):  C:\\Decred  cgminer --blake256 -o [pool url]:[port number] -u [web login].[worker name] -p [worker password]  Example:  C:\\Decred  cgminer --blake256 -o http://dcr.maxminers.net:7727 -u DecredMiner.miner1 -p 7@!x5L1   Step Four   cgminer should now launch. Create a cgminer configuration file by pressing the following keys:  S  (Settings),  W  (Write Config File),  Enter  (Save config file as  cgminer.conf ). Note that  cgminer.conf  will be placed in the same directory as  cgminer.exe  To add any other pools to your configuration file, open  cgminer.conf  with Notepad or a similar text editor. Use the following syntax to make changes in the  pools  section of the configuration file (note the comma between each individual pool entry):  pools  : [\n   {\n       url  :  http://dcr.maxminers.net:7727 ,\n       user  :  Login.Worker ,\n       pass  :  password \n   },\n   {\n       url  :  http://dcr.suprnova.cc:9110 ,\n       user  :  Login.Worker ,\n       pass  :  password \n   }\n]   Step Five   Save  cgminer.conf  and close  cgminer.exe . Double-click on the cgminer program and it will launch and load the newly created configuration file. This concludes the basic cgminer pool setup guide. For more information on cgminer usage and detailed explanations on program functions, refer to the  cgminer README .", 
            "title": " Initialize and run cgminer"
        }, 
        {
            "location": "/mining/proof-of-work/pool-mining/cgminer/linux/", 
            "text": "Linux User Guide\n\n\n\n\n Download and extract cgminer\n\n\nVisit https://github.com/decred/cgminer/releases to find the latest cgminer release. To download and extract the files through the terminal, run the following commands. Note that this example downloads cgminer v0.0.4.\n\n\n~/Decred/$ wget \nhttps://github.com/decred/decred-release/releases/download/v0.0.4_cgminer/cgminer-decred-linux-x86_64-20160208.tar.gz\n\n~/Decred/$ tar -xvf cgminer*\n\n\n\n\nMove into the new cgminer directory:\n\n\n~/Decred/$ cd cgminer*\n\n\n\n\n Initialize and run cgminer\n\n\n\n\nStep One\n\n\n\n\nType the following in your terminal window to list your mining-capable hardware:\n\n\n~/Decred/$ ./cgminer -n\n\n\n\n\nYou should see your video cards listed either by their GPU codename or the driver name. The last line of output should show the number of compatible GPUs you can mine with.\n\n\n\n\nStep Two (Optional)\n\n\n\n\nTo benchmark your system and find out the hashrate your GPUs are capable of, use the command:\n\n\n~/Decred/$ ./cgminer --blake256 --benchmark\n\n\n\n\n\n\nStep Three\n\n\n\n\nRegister on one of the pool websites and setup a new miner for each of your mining computers. Refer to the pool website of your choice for instructions, if needed. In your terminal window from step one, type the following command to launch cgminer (ignore square brackets):\n\n\n~/Decred/$ ./cgminer --blake256 -o [pool url]:[port number] -u [web login].[worker name] -p [worker password]\n\n\n\n\nExample:\n\n\n~/Decred/$ ./cgminer --blake256 -o http://dcr.maxminers.net:7727 -u DecredMiner.miner1 -p 7@!x5L1\n\n\n\n\n\n\nStep Four\n\n\n\n\ncgminer should now launch. Create a cgminer configuration file by pressing the following keys: \nS\n (Settings), \nW\n (Write Config File), \nEnter\n (Save config file as \ncgminer.conf\n). Note that \ncgminer.conf\n will be placed in the same directory as \ncgminer\n. To add any other pools to your configuration file, open \ncgminer.conf\n with Gedit (GUI) / Pico (CLI) or a similar text editor. Multiple pools can be added by following this syntax in the \npools\n section of the configuration file (note the comma between each individual pool entry):\n\n\npools\n : [\n   {\n      \nurl\n : \nhttp://dcr.maxminers.net:7727\n,\n      \nuser\n : \nLogin.Worker\n,\n      \npass\n : \npassword\n\n   },\n   {\n      \nurl\n : \nhttp://dcr.suprnova.cc:9110\n,\n      \nuser\n : \nLogin.Worker\n,\n      \npass\n : \npassword\n\n   }\n]\n\n\n\n\n\n\nStep Five\n\n\n\n\nSave \ncgminer.conf\n and close \ncgminer\n. Relaunch cgminer using the command:\n\n\n~/Decred/$ ./cgminer\n\n\n\n\nThis concludes the basic cgminer pool setup guide. For more information on cgminer usage and detailed explanations on program functions, refer to the official \ncgminer README\n.", 
            "title": "Linux"
        }, 
        {
            "location": "/mining/proof-of-work/pool-mining/cgminer/linux/#linux-user-guide", 
            "text": "", 
            "title": " Linux User Guide"
        }, 
        {
            "location": "/mining/proof-of-work/pool-mining/cgminer/linux/#download-and-extract-cgminer", 
            "text": "Visit https://github.com/decred/cgminer/releases to find the latest cgminer release. To download and extract the files through the terminal, run the following commands. Note that this example downloads cgminer v0.0.4.  ~/Decred/$ wget  https://github.com/decred/decred-release/releases/download/v0.0.4_cgminer/cgminer-decred-linux-x86_64-20160208.tar.gz \n~/Decred/$ tar -xvf cgminer*  Move into the new cgminer directory:  ~/Decred/$ cd cgminer*", 
            "title": " Download and extract cgminer"
        }, 
        {
            "location": "/mining/proof-of-work/pool-mining/cgminer/linux/#initialize-and-run-cgminer", 
            "text": "Step One   Type the following in your terminal window to list your mining-capable hardware:  ~/Decred/$ ./cgminer -n  You should see your video cards listed either by their GPU codename or the driver name. The last line of output should show the number of compatible GPUs you can mine with.   Step Two (Optional)   To benchmark your system and find out the hashrate your GPUs are capable of, use the command:  ~/Decred/$ ./cgminer --blake256 --benchmark   Step Three   Register on one of the pool websites and setup a new miner for each of your mining computers. Refer to the pool website of your choice for instructions, if needed. In your terminal window from step one, type the following command to launch cgminer (ignore square brackets):  ~/Decred/$ ./cgminer --blake256 -o [pool url]:[port number] -u [web login].[worker name] -p [worker password]  Example:  ~/Decred/$ ./cgminer --blake256 -o http://dcr.maxminers.net:7727 -u DecredMiner.miner1 -p 7@!x5L1   Step Four   cgminer should now launch. Create a cgminer configuration file by pressing the following keys:  S  (Settings),  W  (Write Config File),  Enter  (Save config file as  cgminer.conf ). Note that  cgminer.conf  will be placed in the same directory as  cgminer . To add any other pools to your configuration file, open  cgminer.conf  with Gedit (GUI) / Pico (CLI) or a similar text editor. Multiple pools can be added by following this syntax in the  pools  section of the configuration file (note the comma between each individual pool entry):  pools  : [\n   {\n       url  :  http://dcr.maxminers.net:7727 ,\n       user  :  Login.Worker ,\n       pass  :  password \n   },\n   {\n       url  :  http://dcr.suprnova.cc:9110 ,\n       user  :  Login.Worker ,\n       pass  :  password \n   }\n]   Step Five   Save  cgminer.conf  and close  cgminer . Relaunch cgminer using the command:  ~/Decred/$ ./cgminer  This concludes the basic cgminer pool setup guide. For more information on cgminer usage and detailed explanations on program functions, refer to the official  cgminer README .", 
            "title": " Initialize and run cgminer"
        }, 
        {
            "location": "/mining/proof-of-work/solo-mining/cgminer/windows/", 
            "text": "Windows User Guide\n\n\n\n\n Connect dcrd to the Decred network\n\n\n\n\nStep One\n\n\n\n\nNote that all \ndcrd\n, \ndcrwallet\n, and \ndcrctl\n commands must be executed in the directory where your Decred files are! Start \ndcrd\n:\n\n\nC:\\Decred\n dcrd -u user -P password\n\n\n\n\nStart dcrwallet:\n\n\nC:\\Decred\n dcrwallet -u user -P password\n\n\n\n\n\n\nStep Two\n\n\n\n\nGenerate a new wallet address:\n\n\nC:\\Decred\n dcrctl -u user -P password --wallet getnewaddress\n\n\n\n\nCopy the new address (output from the last command). Close/stop \ndcrd\n and \ndcrwallet\n by pressing \nctrl+c\n in each window.\n\n\n\n\nStep Three\n\n\n\n\nRestart \ndcrd\n using the command:\n\n\nC:\\Decred\n dcrd --miningaddr [new address from step two or your web client wallet address]\n\n\n\n\n\n\n Download and extract cgminer\n\n\nVisit https://github.com/decred/cgminer/releases to find the latest cgminer release. For 64-bit Windows, download and extract \ncgminer-decred-w64_*.zip\n. For 32-bit Windows, download and extract \ncgminer-decred-w32_*.zip\n. Extract all files to a new folder and open the new folder to view the files.\n\n\n\n\n Initialize and run cgminer\n\n\n\n\nStep One\n\n\n\n\nRight-click on \nstart_local.bat\n and click \nEdit\n. Change the username and password to match the credentials used in step 1. Save and close start_local.bat  For reference, here is the command in start_local.bat:\n\n\nC:\\Decred\n cgminer --blake256 -o https://127.0.0.1:9109 -u username -p password --cert \n%LOCALAPPDATA%\\Dcrd\\rpc.cert\n\n\n\n\n\n\n\nStep Two\n\n\n\n\nIf dcrd is not finished syncing to the blockchain, wait for it to finish, then proceed to the next step. When it is finished, it will show:\n\n\n[INF] BMGR: Processed 1 block in the last 5m34.49s\n\n\n\n\n\n\nStep Three\n\n\n\n\nDouble click on \nstart_local.bat\n. \ncgminer\n should open. Create a \ncgminer\n configuration file by pressing the following keys: \nS\n (Settings), \nW\n (Write Config File), \nEnter\n (Save config file as \ncgminer.conf\n). Note that \ncgminer.conf\n will be placed in the same directory as cgminer. cgminer can now be launched by simply double clicking \ncgminer.exe\n. This concludes the basic solo cgminer setup guide. For more information on cgminer usage and detailed explanations on program functions, refer to the official \ncgminer README\n.", 
            "title": "Windows"
        }, 
        {
            "location": "/mining/proof-of-work/solo-mining/cgminer/windows/#windows-user-guide", 
            "text": "", 
            "title": " Windows User Guide"
        }, 
        {
            "location": "/mining/proof-of-work/solo-mining/cgminer/windows/#connect-dcrd-to-the-decred-network", 
            "text": "Step One   Note that all  dcrd ,  dcrwallet , and  dcrctl  commands must be executed in the directory where your Decred files are! Start  dcrd :  C:\\Decred  dcrd -u user -P password  Start dcrwallet:  C:\\Decred  dcrwallet -u user -P password   Step Two   Generate a new wallet address:  C:\\Decred  dcrctl -u user -P password --wallet getnewaddress  Copy the new address (output from the last command). Close/stop  dcrd  and  dcrwallet  by pressing  ctrl+c  in each window.   Step Three   Restart  dcrd  using the command:  C:\\Decred  dcrd --miningaddr [new address from step two or your web client wallet address]", 
            "title": " Connect dcrd to the Decred network"
        }, 
        {
            "location": "/mining/proof-of-work/solo-mining/cgminer/windows/#download-and-extract-cgminer", 
            "text": "Visit https://github.com/decred/cgminer/releases to find the latest cgminer release. For 64-bit Windows, download and extract  cgminer-decred-w64_*.zip . For 32-bit Windows, download and extract  cgminer-decred-w32_*.zip . Extract all files to a new folder and open the new folder to view the files.", 
            "title": " Download and extract cgminer"
        }, 
        {
            "location": "/mining/proof-of-work/solo-mining/cgminer/windows/#initialize-and-run-cgminer", 
            "text": "Step One   Right-click on  start_local.bat  and click  Edit . Change the username and password to match the credentials used in step 1. Save and close start_local.bat  For reference, here is the command in start_local.bat:  C:\\Decred  cgminer --blake256 -o https://127.0.0.1:9109 -u username -p password --cert  %LOCALAPPDATA%\\Dcrd\\rpc.cert    Step Two   If dcrd is not finished syncing to the blockchain, wait for it to finish, then proceed to the next step. When it is finished, it will show:  [INF] BMGR: Processed 1 block in the last 5m34.49s   Step Three   Double click on  start_local.bat .  cgminer  should open. Create a  cgminer  configuration file by pressing the following keys:  S  (Settings),  W  (Write Config File),  Enter  (Save config file as  cgminer.conf ). Note that  cgminer.conf  will be placed in the same directory as cgminer. cgminer can now be launched by simply double clicking  cgminer.exe . This concludes the basic solo cgminer setup guide. For more information on cgminer usage and detailed explanations on program functions, refer to the official  cgminer README .", 
            "title": " Initialize and run cgminer"
        }, 
        {
            "location": "/mining/proof-of-work/solo-mining/cgminer/linux/", 
            "text": "Linux User Guide\n\n\n\n\n Connect dcrd to the Decred network\n\n\n\n\nStep One\n\n\n\n\nNote that all \ndcrd\n, \ndcrwallet\n, and \ndcrctl\n commands must be executed in the directory where your Decred files are! Start \ndcrd\n:\n\n\n~/Decred/$ ./dcrd -u user -P password\n\n\n\n\nStart dcrwallet:\n\n\n~/Decred/$ ./dcrwallet -u user -P password\n\n\n\n\n\n\nStep Two\n\n\n\n\nGenerate a new wallet address:\n\n\n~/Decred/$ ./dcrctl -u user -P password --wallet getnewaddress default\n\n\n\n\nCopy the new address (output from the last command). Close/stop \ndcrd\n and \ndcrwallet\n by pressing \nctrl+c\n in each window.\n\n\n\n\nStep Three\n\n\n\n\nRestart \ndcrd\n using the command:\n\n\n~/Decred/$ ./dcrd -u user -P password --miningaddr [new address from step two or your web client wallet address]\n\n\n\n\n\n\nStep Four\n\n\n\n\nSetup TLS security by copying rpc.cert to /usr/share/ca-certificates:\n\n\nsudo cp /home/user/.dcrd/rpc.cert /usr/share/ca-certificates/dcrd.crt\n\n\n\n\nUse a text editor to add the line \ndcrd.crt\n (no quotes) to /etc/ca-certificates.conf:\n\n\nsudo gedit /etc/ca-certificates.conf\n\n\n\n\nUpdate the CA certificate list:\n\n\nsudo update-ca-certificates\n\n\n\n\n\n\n Download and extract cgminer\n\n\nVisit https://github.com/decred/cgminer/releases to find the latest cgminer release. To download and extract via your Linux terminal, use the following commands:\n\n\nwget https://github.com/decred/decred-release/releases/download/v0.0.4_cgminer/cgminer-decred-linux-x86_64-20160208.tar.gz\ntar -xvf cgminer-decred-linux-x86_64-20160208.tar.gz\n\n\n\n\n\n\n Initialize and run cgminer\n\n\n\n\nStep One\n\n\n\n\nIf \ndcrd\n is not finished syncing to the blockchain, wait for it to finish, then proceed to the next step. When it is finished, it will show:\n\n\n[INF] BMGR: Processed 1 block in the last 5m34.49s\n\n\n\n\n\n\nStep Two\n\n\n\n\nIn your cgminer directory, start cgminer with the command:\n\n\n~/Decred/$ ./cgminer --blake256 -o https://127.0.0.1:9109 -u user -p password\n\n\n\n\nCreate a cgminer configuration file by pressing the following keys: \nS\n (Settings), \nW\n (Write Config File), \nEnter\n (Save config file as \ncgminer.conf\n). Note that \ncgminer.conf\n will be placed in the same directory as cgminer. cgminer can now be launched by simply running the command:\n\n\n~/Decred/$ ./cgminer\n\n\n\n\nThis concludes the basic solo cgminer setup guide. For more information on cgminer usage and detailed explanations on program functions, refer to the official \ncgminer README\n.", 
            "title": "Linux"
        }, 
        {
            "location": "/mining/proof-of-work/solo-mining/cgminer/linux/#linux-user-guide", 
            "text": "", 
            "title": " Linux User Guide"
        }, 
        {
            "location": "/mining/proof-of-work/solo-mining/cgminer/linux/#connect-dcrd-to-the-decred-network", 
            "text": "Step One   Note that all  dcrd ,  dcrwallet , and  dcrctl  commands must be executed in the directory where your Decred files are! Start  dcrd :  ~/Decred/$ ./dcrd -u user -P password  Start dcrwallet:  ~/Decred/$ ./dcrwallet -u user -P password   Step Two   Generate a new wallet address:  ~/Decred/$ ./dcrctl -u user -P password --wallet getnewaddress default  Copy the new address (output from the last command). Close/stop  dcrd  and  dcrwallet  by pressing  ctrl+c  in each window.   Step Three   Restart  dcrd  using the command:  ~/Decred/$ ./dcrd -u user -P password --miningaddr [new address from step two or your web client wallet address]   Step Four   Setup TLS security by copying rpc.cert to /usr/share/ca-certificates:  sudo cp /home/user/.dcrd/rpc.cert /usr/share/ca-certificates/dcrd.crt  Use a text editor to add the line  dcrd.crt  (no quotes) to /etc/ca-certificates.conf:  sudo gedit /etc/ca-certificates.conf  Update the CA certificate list:  sudo update-ca-certificates", 
            "title": " Connect dcrd to the Decred network"
        }, 
        {
            "location": "/mining/proof-of-work/solo-mining/cgminer/linux/#download-and-extract-cgminer", 
            "text": "Visit https://github.com/decred/cgminer/releases to find the latest cgminer release. To download and extract via your Linux terminal, use the following commands:  wget https://github.com/decred/decred-release/releases/download/v0.0.4_cgminer/cgminer-decred-linux-x86_64-20160208.tar.gz\ntar -xvf cgminer-decred-linux-x86_64-20160208.tar.gz", 
            "title": " Download and extract cgminer"
        }, 
        {
            "location": "/mining/proof-of-work/solo-mining/cgminer/linux/#initialize-and-run-cgminer", 
            "text": "Step One   If  dcrd  is not finished syncing to the blockchain, wait for it to finish, then proceed to the next step. When it is finished, it will show:  [INF] BMGR: Processed 1 block in the last 5m34.49s   Step Two   In your cgminer directory, start cgminer with the command:  ~/Decred/$ ./cgminer --blake256 -o https://127.0.0.1:9109 -u user -p password  Create a cgminer configuration file by pressing the following keys:  S  (Settings),  W  (Write Config File),  Enter  (Save config file as  cgminer.conf ). Note that  cgminer.conf  will be placed in the same directory as cgminer. cgminer can now be launched by simply running the command:  ~/Decred/$ ./cgminer  This concludes the basic solo cgminer setup guide. For more information on cgminer usage and detailed explanations on program functions, refer to the official  cgminer README .", 
            "title": " Initialize and run cgminer"
        }, 
        {
            "location": "/mining/proof-of-stake/pool-mining/", 
            "text": "", 
            "title": "Pool Mining"
        }, 
        {
            "location": "/mining/proof-of-stake/solo-mining/", 
            "text": "Solo Mining\n\n\n\n\n Buying tickets\n\n\nIt is quite simple to buy tickets to participate in PoS mining. First, you will need DCR \nDavid and Scott guide\n. Second you will need to have the Decred daemon running and your wallet created (but not loaded).\n\n\n\n\nLinux Note\n\n\n\n\nThe following guide is for Windows, but the same commands work in Linux (do not forget to prefix them with \n./\n (that is a dot and forward slash). See the \nLinux Setup Guide to get your wallet set up. Where you see \nopen a command window\n open a new terminal or screen. You will need two (in addition to the daemon terminal) to complete this guide.\n\n\n\n\nStep One\n\n\n\n\nOpen a command prompt in your Decred folder (type \ncmd\n in the location bar in Explorer when in the folder). Enter the following command (ignore square brackets):\n\n\ndcrwallet -u [wallet username] -P [wallet password] --dcrdusername [daemon username] --dcrdpassword [daemon password] --enablestakemining --ticketmaxprice=10 --balancetomaintain=200\n\n\n\n\nOkay, there is a lot here so let us unpack it:\n\n\n\n\n\n\n\n\nOption\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\n-u [wallet username]\n\n\nThis is the username you gave when you created your wallet.\n\n\n\n\n\n\n-P [wallet password]\n\n\nThis is the password you gave when you created your wallet. Note the capital P.\n\n\n\n\n\n\n--dcrdusername [daemon username]\n\n\nThis is the username you used to start the daemon.\n\n\n\n\n\n\n--dcrdpassword [daemon password]\n\n\nThis is the password you used to start the daemon.\n\n\n\n\n\n\n--enablestakemining\n\n\nThis tells the wallet that you want to participate in proof-of-stake mining. It will enable automatic ticket buying.\n\n\n\n\n\n\n--ticketmaxprice=10\n\n\nThis sets the maximum price you will pay per ticket (it can be a decimal). If the ticket price is above this the wallet will not buy tickets. See \nPoS Commands for information on viewing ticket price.\n\n\n\n\n\n\n--balancetomaintain=200\n\n\nThe minimum number of DCR to keep in your wallet. You will not buy tickets if your balance is less than this.\n\n\n\n\n\n\n\n\nNote that you can also put these arguments in a configuration file so you do not need to type them when starting your wallet. See \nthis guide.\n\n\n\n\nStep Two\n\n\n\n\nOnce you hit \nEnter\n you will see a lot of text start coming up as the wallet connects to the daemon. It will rescan addresses which can take a few minutes if you are using a slow CPU. Eventually you will see this:\n\n\n23:34:18 2016-03-01 [INF] WLLT: PLEASE ENSURE YOUR WALLET IS UNLOCKED SO IT MAY VOTE ON BLOCKS AND RECEIVE STAKE REWARDS\n\n\n\n\nBy default, your wallet is locked. It can receive DCR but cannot send them. You need to unlock the wallet so it can purchase tickets. Open a new command window in your Decred folder. Type in this command (ignore square brackets):\n\n\ndcrctl -u [daemon username] -P [daemon password] --wallet walletpassphrase [wallet password] 0\n\n\n\n\nWhat we are doing here is authenticating with the daemon and using the \n--wallet\n command to send the wallet password to unlock the wallet. The \n0\n means unlock with no time limit. Do note, however, that this only unlocks the wallet for the current session. If you close the window the wallet is running in, you will need to unlock it again the next time you start it. That is it! Your wallet will now automatically buy tickets.\n\n\n\n\nStep Three\n\n\n\n\nIt may take some time but eventually you will see:\n\n\n00:23:21 2016-03-02 [INF] WLLT: Successfully sent SStx purchase transaction 71c1ffe55bd36aea49b46050692438912494a60436c96b63e1625ba9665a5583\n\n\n\n\nThis means a ticket was purchased. A couple of important notes:\n\n\n\n\nThe ticket price is not spent, although it is removed from your balance as it is not spendable. It is just a deposit. You will get it back when your ticket votes or expires.\n\n\n20 tickets are accepted into the voting pool each block. Tickets that are waiting stay in the mempool. Tickets are moved from the mempool to the voting pool in order of txfee.\n\n\nThe txfee is a user-settable fee (0.05 DCR by default) that is not refunded. Higher fees may entice proof-of-work miners to include your ticket in the ticket pool, but at this point it is not recommended setting it above the average since your ticket will be included fairly quickly anyway.\n\n\nTickets take 256 blocks (about a day) to mature. During this time the stake price you paid will not be visible in your total balance.\n\n\nSee the \nFAQ for more info.\n\n\n\n\nFinally, what you are looking for is:\n\n\n00:21:05 2016-03-02 [INF] WLLT: Voted on block 000000000000278b4465fde3b14668eb0b67aa11bfa8ccc95196f86d87215bee (height 6575) using ticket ed6085bfa76d3875bbf2c3f877797338639344d83c1de7c17fa32eefc9017111 (vote hash: 6cd642e7e88917c78dcaa01b77db572a4564116955b41fb183c9eefb340fd536)\n\n\n\n\nThis means your ticket has successfully voted! Your stake and reward will be returned to you, minus the purchase fee. That is all you need to get started with proof-of-stake mining, but there is a lot more to it that you might want to know. See the \nPoS FAQ and \n Network Parameters#PoS for more information.\n\n\n\n\nAdvanced mining\n\n\n Rest of text on https://wiki.decred.org/Solo_Stake_Mining below the simple node section\nPoS Commands\n\n\n to Network Parameters#PoS\n\n\n\n\nProof-of-stake pools\n\n\nIn order to successfully participate in PoS, you need to ensure that your wallet is online 24/7. This is because your ticket may be called on to vote at any time and if your wallet is unable to respond you will lose the vote reward, however, you will still be charged the stake fee (the stake itself is returned to you though). PoS pools allow you to submit tickets to a central pool that will vote on your behalf so you do not always need to be online. There are two different types of pools:\n\n\n\n\nThose that simply act as a pass through. They vote on your behalf and you receive all the income from a successful vote. There is no interaction with other members of the pool at all and the pool does not have access to your reward or stake. It is the same as solo mining except that you do not need to keep your wallet online 24/7. The stake pool will do that for you. This is also the most secure method of PoS pool mining.\n\n\nThose that pool all of the tickets from pool members together then every time a ticket is selected members get a share of the reward proportional to the number of tickets they have in the pool. This method can be less secure because you are trusting the pool with your stake and reward.\n\n\n\n\n\n\nWhich one pays better?\n\n\nOver time both types of pools should pay out about the same. Pass through pools will provide a larger reward less frequently while share pools will pay smaller rewards more often. Pools will charge a small fee per ticket to help cover server and administration expense.\n\n\n\n\nAvailable pools\n\n\nAt this time there is only one PoS pool available at https://stakepool.decred.org which is pass through.", 
            "title": "Solo Mining"
        }, 
        {
            "location": "/mining/proof-of-stake/solo-mining/#solo-mining", 
            "text": "", 
            "title": " Solo Mining"
        }, 
        {
            "location": "/mining/proof-of-stake/solo-mining/#buying-tickets", 
            "text": "It is quite simple to buy tickets to participate in PoS mining. First, you will need DCR  David and Scott guide . Second you will need to have the Decred daemon running and your wallet created (but not loaded).   Linux Note   The following guide is for Windows, but the same commands work in Linux (do not forget to prefix them with  ./  (that is a dot and forward slash). See the  Linux Setup Guide to get your wallet set up. Where you see  open a command window  open a new terminal or screen. You will need two (in addition to the daemon terminal) to complete this guide.   Step One   Open a command prompt in your Decred folder (type  cmd  in the location bar in Explorer when in the folder). Enter the following command (ignore square brackets):  dcrwallet -u [wallet username] -P [wallet password] --dcrdusername [daemon username] --dcrdpassword [daemon password] --enablestakemining --ticketmaxprice=10 --balancetomaintain=200  Okay, there is a lot here so let us unpack it:     Option  Explanation      -u [wallet username]  This is the username you gave when you created your wallet.    -P [wallet password]  This is the password you gave when you created your wallet. Note the capital P.    --dcrdusername [daemon username]  This is the username you used to start the daemon.    --dcrdpassword [daemon password]  This is the password you used to start the daemon.    --enablestakemining  This tells the wallet that you want to participate in proof-of-stake mining. It will enable automatic ticket buying.    --ticketmaxprice=10  This sets the maximum price you will pay per ticket (it can be a decimal). If the ticket price is above this the wallet will not buy tickets. See  PoS Commands for information on viewing ticket price.    --balancetomaintain=200  The minimum number of DCR to keep in your wallet. You will not buy tickets if your balance is less than this.     Note that you can also put these arguments in a configuration file so you do not need to type them when starting your wallet. See  this guide.   Step Two   Once you hit  Enter  you will see a lot of text start coming up as the wallet connects to the daemon. It will rescan addresses which can take a few minutes if you are using a slow CPU. Eventually you will see this:  23:34:18 2016-03-01 [INF] WLLT: PLEASE ENSURE YOUR WALLET IS UNLOCKED SO IT MAY VOTE ON BLOCKS AND RECEIVE STAKE REWARDS  By default, your wallet is locked. It can receive DCR but cannot send them. You need to unlock the wallet so it can purchase tickets. Open a new command window in your Decred folder. Type in this command (ignore square brackets):  dcrctl -u [daemon username] -P [daemon password] --wallet walletpassphrase [wallet password] 0  What we are doing here is authenticating with the daemon and using the  --wallet  command to send the wallet password to unlock the wallet. The  0  means unlock with no time limit. Do note, however, that this only unlocks the wallet for the current session. If you close the window the wallet is running in, you will need to unlock it again the next time you start it. That is it! Your wallet will now automatically buy tickets.   Step Three   It may take some time but eventually you will see:  00:23:21 2016-03-02 [INF] WLLT: Successfully sent SStx purchase transaction 71c1ffe55bd36aea49b46050692438912494a60436c96b63e1625ba9665a5583  This means a ticket was purchased. A couple of important notes:   The ticket price is not spent, although it is removed from your balance as it is not spendable. It is just a deposit. You will get it back when your ticket votes or expires.  20 tickets are accepted into the voting pool each block. Tickets that are waiting stay in the mempool. Tickets are moved from the mempool to the voting pool in order of txfee.  The txfee is a user-settable fee (0.05 DCR by default) that is not refunded. Higher fees may entice proof-of-work miners to include your ticket in the ticket pool, but at this point it is not recommended setting it above the average since your ticket will be included fairly quickly anyway.  Tickets take 256 blocks (about a day) to mature. During this time the stake price you paid will not be visible in your total balance.  See the  FAQ for more info.   Finally, what you are looking for is:  00:21:05 2016-03-02 [INF] WLLT: Voted on block 000000000000278b4465fde3b14668eb0b67aa11bfa8ccc95196f86d87215bee (height 6575) using ticket ed6085bfa76d3875bbf2c3f877797338639344d83c1de7c17fa32eefc9017111 (vote hash: 6cd642e7e88917c78dcaa01b77db572a4564116955b41fb183c9eefb340fd536)  This means your ticket has successfully voted! Your stake and reward will be returned to you, minus the purchase fee. That is all you need to get started with proof-of-stake mining, but there is a lot more to it that you might want to know. See the  PoS FAQ and   Network Parameters#PoS for more information.", 
            "title": " Buying tickets"
        }, 
        {
            "location": "/mining/proof-of-stake/solo-mining/#advanced-mining", 
            "text": "Rest of text on https://wiki.decred.org/Solo_Stake_Mining below the simple node section\nPoS Commands   to Network Parameters#PoS", 
            "title": "Advanced mining"
        }, 
        {
            "location": "/mining/proof-of-stake/solo-mining/#proof-of-stake-pools", 
            "text": "In order to successfully participate in PoS, you need to ensure that your wallet is online 24/7. This is because your ticket may be called on to vote at any time and if your wallet is unable to respond you will lose the vote reward, however, you will still be charged the stake fee (the stake itself is returned to you though). PoS pools allow you to submit tickets to a central pool that will vote on your behalf so you do not always need to be online. There are two different types of pools:   Those that simply act as a pass through. They vote on your behalf and you receive all the income from a successful vote. There is no interaction with other members of the pool at all and the pool does not have access to your reward or stake. It is the same as solo mining except that you do not need to keep your wallet online 24/7. The stake pool will do that for you. This is also the most secure method of PoS pool mining.  Those that pool all of the tickets from pool members together then every time a ticket is selected members get a share of the reward proportional to the number of tickets they have in the pool. This method can be less secure because you are trusting the pool with your stake and reward.", 
            "title": "Proof-of-stake pools"
        }, 
        {
            "location": "/mining/proof-of-stake/solo-mining/#which-one-pays-better", 
            "text": "Over time both types of pools should pay out about the same. Pass through pools will provide a larger reward less frequently while share pools will pay smaller rewards more often. Pools will charge a small fee per ticket to help cover server and administration expense.", 
            "title": "Which one pays better?"
        }, 
        {
            "location": "/mining/proof-of-stake/solo-mining/#available-pools", 
            "text": "At this time there is only one PoS pool available at https://stakepool.decred.org which is pass through.", 
            "title": "Available pools"
        }, 
        {
            "location": "/faq/overview/", 
            "text": "Sources", 
            "title": "Overview"
        }, 
        {
            "location": "/faq/overview/#sources", 
            "text": "", 
            "title": "Sources"
        }, 
        {
            "location": "/faq/general/", 
            "text": "General\n\n\n\n\n1. What lead to the development of Decred?\n\n\nHere are a series of blog posts that discuss the motivation\n1\n for Decred:\n\n\n\n\nIterating Bitcoin\n\n\nBitcoin\ns biggest challenges\n\n\n\n\n\n\n2. How do you pronounce Decred?\n\n\nThe correct pronunciation\n2\n is in the opening line of the Decred Constitution.\n\n\nDecred (/\u02c8di:\u02c8kred/, /d\u026a\u02c8kred/, dee-cred)\n\n\n\n\nIn other words, it is a long e as in the word decentralized.\n\n\n\n\n Sources\n\n\n\n\n\n\n\n\n\n\nDecred Forum, \nPost 8,550\n\n\n\n\n\n\nDecred Forum, \nPost 14,482", 
            "title": "General"
        }, 
        {
            "location": "/faq/general/#general", 
            "text": "", 
            "title": " General"
        }, 
        {
            "location": "/faq/general/#1-what-lead-to-the-development-of-decred", 
            "text": "Here are a series of blog posts that discuss the motivation 1  for Decred:   Iterating Bitcoin  Bitcoin s biggest challenges", 
            "title": "1. What lead to the development of Decred?"
        }, 
        {
            "location": "/faq/general/#2-how-do-you-pronounce-decred", 
            "text": "The correct pronunciation 2  is in the opening line of the Decred Constitution.  Decred (/\u02c8di:\u02c8kred/, /d\u026a\u02c8kred/, dee-cred)  In other words, it is a long e as in the word decentralized.", 
            "title": "2. How do you pronounce Decred?"
        }, 
        {
            "location": "/faq/general/#sources", 
            "text": "Decred Forum,  Post 8,550    Decred Forum,  Post 14,482", 
            "title": " Sources"
        }, 
        {
            "location": "/faq/configuration/", 
            "text": "Configuration\n\n\n\n\n1. How can I see information about the port numbers \ndcrd\n uses?\n\n\nYou can get the port numbers\n1\n from the \n-h\n or \n--help\n parameters passed to \ndcrd\n:\n\n\ndcrd -h\n\n\n\n\nLook for the following line:\n\n\n--rpclisten=  Add an interface/port to listen for RPC connections (default port: 9109, testnet: 19109)\n\n\n\n\nIt is also logged when you start \ndcrd\n:\n\n\n12:01:46 2016-02-08 [INF] RPCS: RPC server listening on [::1]:9109\n12:01:46 2016-02-08 [INF] RPCS: RPC server listening on 127.0.0.1:9109\n\n\n\n\n\n\n2. What do you mean by configuration files for \ndcrd\n, \ndcrwallet\n, and \ndcrctl\n?\n\n\nEach application (\ndcrd\n, \ndcrwallet\n, \ndcrctl\n) can have their own configuration files\n2\n. Use \n-h\n and look at the path in parenthesis of the configuration file option (\n-C\n, \n--configfile\n) to see the default path. Create a text file at the path and named according to that path you just looked up.\n\n\nThen you can use the \ndcrd\n \nsample config file\n and \ndcrwallet\n \nsample config file\n to set whatever options you want. You can do the same thing for \ndcrctl\n too. The format is the same. Every command line option listed by \n-h\n can be specified in the config files (just use the long option name).\n\n\nOnce those are created and in place, you don\nt have add all of the options to the command line all the time. That is why I can do:\n\n\ndcrctl getnetworkhashps\n2547036949350\n\n\n\n\n\n\n3. Can I run mainnet and testnet daemons and wallets at the same time and on the same machine?\n\n\nYes\n3\n, just add \n--testnet\n to the appropriate spots (\ndcrd\n, \ndcrwallet\n, \ndcrctl\n) and everything will work. This is why they use different ports and data/log directories!\n\n\n\n\n4. What are the security implications of using the same RPC server authentication passwords with \ndcrd\n and \ndcrwallet\n?\n\n\nThere is a lot less you can do with access to \ndcrd\n than you can to \ndcrwallet\n. The key point is that RPC access\n4\n to \ndcrwallet\n, when the wallet is unlocked, can be used to spend coins.\n\n\nWhen they are both on the same machine, it probably does not matter all that much, but when you are running more secure setups where the wallet is on a separate machine than \ndcrd\n, you would pretty clearly not want to use the same credentials for both. Remember that \ndcrd\n has to be on an Internet-facing machine in order to stay synced to the network (download the block chain data, broadcast transactions, and so on).\n\n\nOn the other hand, the \ndcrwallet\n that contains your funds, for best security, should really not be on a system that has internet access as it is infinitely more difficult for someone to steal your coins if the wallet that contains them is not even on a machine that is accessible via the Internet. Obviously, if you are staking your coins, you will need at least one Internet-facing \ndcrwallet\n instance. Thus, the most secure setup involves having one \ncold\n \ndcrwallet\n instance that is on a machine that is not Internet-accessible, and a second \nhot\n \ndcrwallet\n instance (using a different seed of course) to which the cold dcrwallet instance delegates voting right via the \n--ticketaddress\n parameter, both of which use different credentials.\n\n\n\n\n5. Why am I connecting to only 8 outbound peers?\n\n\nThere is an intentional unconfigurable limit of 8 outbound peers\n5\n. More outbound peers than that does not help you in any way and is actually worse for both you and the network. This has been tested extremely thoroughly in Bitcoin, including btcsuite (the upstream project for Decred). All you would do by upping your outbound connections is waste valuable slots of the relatively few public peers there are (there are always a much higher number of \nleechers\n than there are \nseeders\n).\n\n\nOn the other hand, increasing your maximum connections, which really just increases the number of allowed inbound connections, helps the network by ensuring there are more slots available for new nodes and SPV clients which Decred does not have any yet, but it will.\n\n\n\n\n Sources\n\n\n\n\n\n\n\n\n\n\nDecred Forum, \nPost 8,929\n\n\n\n\n\n\nDecred Forum, \nPost 9,062\n\n\n\n\n\n\nDecred Forum, \nPost 9,264\n\n\n\n\n\n\nDecred Forum, \nPost 11,480\n\n\n\n\n\n\nDecred Forum, \nPost 15,399", 
            "title": "Configuration"
        }, 
        {
            "location": "/faq/configuration/#configuration", 
            "text": "", 
            "title": " Configuration"
        }, 
        {
            "location": "/faq/configuration/#1-how-can-i-see-information-about-the-port-numbers-dcrd-uses", 
            "text": "You can get the port numbers 1  from the  -h  or  --help  parameters passed to  dcrd :  dcrd -h  Look for the following line:  --rpclisten=  Add an interface/port to listen for RPC connections (default port: 9109, testnet: 19109)  It is also logged when you start  dcrd :  12:01:46 2016-02-08 [INF] RPCS: RPC server listening on [::1]:9109\n12:01:46 2016-02-08 [INF] RPCS: RPC server listening on 127.0.0.1:9109", 
            "title": "1. How can I see information about the port numbers dcrd uses?"
        }, 
        {
            "location": "/faq/configuration/#2-what-do-you-mean-by-configuration-files-for-dcrd-dcrwallet-and-dcrctl", 
            "text": "Each application ( dcrd ,  dcrwallet ,  dcrctl ) can have their own configuration files 2 . Use  -h  and look at the path in parenthesis of the configuration file option ( -C ,  --configfile ) to see the default path. Create a text file at the path and named according to that path you just looked up.  Then you can use the  dcrd   sample config file  and  dcrwallet   sample config file  to set whatever options you want. You can do the same thing for  dcrctl  too. The format is the same. Every command line option listed by  -h  can be specified in the config files (just use the long option name).  Once those are created and in place, you don t have add all of the options to the command line all the time. That is why I can do:  dcrctl getnetworkhashps\n2547036949350", 
            "title": "2. What do you mean by configuration files for dcrd, dcrwallet, and dcrctl?"
        }, 
        {
            "location": "/faq/configuration/#3-can-i-run-mainnet-and-testnet-daemons-and-wallets-at-the-same-time-and-on-the-same-machine", 
            "text": "Yes 3 , just add  --testnet  to the appropriate spots ( dcrd ,  dcrwallet ,  dcrctl ) and everything will work. This is why they use different ports and data/log directories!", 
            "title": "3. Can I run mainnet and testnet daemons and wallets at the same time and on the same machine?"
        }, 
        {
            "location": "/faq/configuration/#4-what-are-the-security-implications-of-using-the-same-rpc-server-authentication-passwords-with-dcrd-and-dcrwallet", 
            "text": "There is a lot less you can do with access to  dcrd  than you can to  dcrwallet . The key point is that RPC access 4  to  dcrwallet , when the wallet is unlocked, can be used to spend coins.  When they are both on the same machine, it probably does not matter all that much, but when you are running more secure setups where the wallet is on a separate machine than  dcrd , you would pretty clearly not want to use the same credentials for both. Remember that  dcrd  has to be on an Internet-facing machine in order to stay synced to the network (download the block chain data, broadcast transactions, and so on).  On the other hand, the  dcrwallet  that contains your funds, for best security, should really not be on a system that has internet access as it is infinitely more difficult for someone to steal your coins if the wallet that contains them is not even on a machine that is accessible via the Internet. Obviously, if you are staking your coins, you will need at least one Internet-facing  dcrwallet  instance. Thus, the most secure setup involves having one  cold   dcrwallet  instance that is on a machine that is not Internet-accessible, and a second  hot   dcrwallet  instance (using a different seed of course) to which the cold dcrwallet instance delegates voting right via the  --ticketaddress  parameter, both of which use different credentials.", 
            "title": "4. What are the security implications of using the same RPC server authentication passwords with dcrd and dcrwallet?"
        }, 
        {
            "location": "/faq/configuration/#5-why-am-i-connecting-to-only-8-outbound-peers", 
            "text": "There is an intentional unconfigurable limit of 8 outbound peers 5 . More outbound peers than that does not help you in any way and is actually worse for both you and the network. This has been tested extremely thoroughly in Bitcoin, including btcsuite (the upstream project for Decred). All you would do by upping your outbound connections is waste valuable slots of the relatively few public peers there are (there are always a much higher number of  leechers  than there are  seeders ).  On the other hand, increasing your maximum connections, which really just increases the number of allowed inbound connections, helps the network by ensuring there are more slots available for new nodes and SPV clients which Decred does not have any yet, but it will.", 
            "title": "5. Why am I connecting to only 8 outbound peers?"
        }, 
        {
            "location": "/faq/configuration/#sources", 
            "text": "Decred Forum,  Post 8,929    Decred Forum,  Post 9,062    Decred Forum,  Post 9,264    Decred Forum,  Post 11,480    Decred Forum,  Post 15,399", 
            "title": " Sources"
        }, 
        {
            "location": "/faq/wallets-and-seeds/", 
            "text": "Wallets and Seeds\n\n\n\n\n1. Should I give my wallet seed to someone?\n\n\nNo, you should never\n1\n share your wallet seed with anyone. Doing so is the equivalent of giving them all of your DCR in that wallet.\n\n\n\n\n2. How can I convert my wallet seed hex to seed words?\n\n\nYou can use the \ndcrseedhextowords\n2\n utility to convert a Decred seed from hex to the seed words needed for importing into wallets.\n\n\n\n\n3. Can I run multiple wallets?\n\n\nRunning multiple wallets\n3\n with the same seed will absolutely lead to the situation where the wallets will not see the same balance. You should not be running multiple wallets with the same seed.\n\n\nThe problem is simply that addresses are generated deterministically from the seed. So if you have two wallets running on the same seed, you basically end up with a situation like this:\n\n\n\n\nWallet A: Knows about all addresses up to address #15\n\n\nWallet B: Knows about all addresses up to address #12\n\n\n\n\nSo, any coins that have been sent to addresses #13, #14, and #15 will be known to Wallet A, but not Wallet B.\n\n\nFurther, if you simply tell Wallet B to get the next address it also will not see the coins because, from its point of view, that address just now came into existence and so it will not search for transactions before the current point in time. This is an optimization because, as you can imagine, the blockchain ends up getting extremely large over time and it would be incredibly expensive (in terms of resource usage) to scan the entire chain every time a new address is generated.\n\n\n\n\n4. Can someone steal my coins if they access wallet.db?\n\n\nNobody can steal your coins if they get access to the wallet.db\n4\n file unless they also have your private passphrase. If you chose to use public encryption, they also cannot get access to any of your extended public keys or addresses.\n\n\n\n\n5. Can someone use a brute-force attack on a random wallet to regenerate its seed words?\n\n\nAll the seed words are is a direct mapping of English words to hex digits. The seed is nothing more than a 256-bit (32-byte) cryptographically random number. Salt does not apply here at all. It has nothing to do with brute-forcing\n5\n random cryptographic numbers.\n\n\nIn other words, since each word can be 256 possibilities and there are 32 words, that yields 256^32 (or 2^256 depending on how you want to look at it, but it\ns the same number) possibilities. That number is larger than the entire number of hydrogen atoms in the known universe. In fact, it\ns almost more than the number or atoms total in known universe.\n\n\nTo put this in perspective, assuming there are 7 billion people on the planet and each person owned 10 computers and each one of those computers could test a billion possibilities a second and that you could find the solution on average after testing only 50% of the total possibilities, it would still take 26x10^48 (that\ns 26 trillion trillion trillion trillion) years to brute-force a single seed.\n\n\n\n\n6. My seed is not working. What can I do?\n\n\nMake sure all of the words are on a single line separated by spaces\n6\n. Even though they are printed out on multiple lines for readbility, they must be entered on a single line. Also double-check your words have no typos by comparing them to the words in the \nPGP word list\n.\n\n\n\n\n7. How do I import a key that is in wallet import format (WIF)?\n\n\nIt is possible to import a standalone private key\n7\n into \ndcrwallet\n. Note that this is only for \n--noseed\n addresses and you should not run this unless you know what you are doing!\n\n\nUnlock the wallet (ignore square brackets):\n\n\ndcrctl --wallet walletpassphrase [private encryption passphrase] 60\n\n\n\n\nImport the standalone (\n--noseed\n) private key (ignore square brackets):\n\n\ndcrctl --wallet importprivkey [put WIF private key here]\n\n\n\n\nView balance of imported account (give it some time to rescan and look at the log in dcrwallet to see rescan progress):\n\n\ndcrctl --wallet getbalance \nimported\n 0 all\n\n\n\n\n\n\n8. What is the difference between a testnet and mainnet address?\n\n\nA testnet public key address\n8\n that starts with Tk. A mainnet address starts with Dk. T = Testnet, D = (Decred) Mainnet.\n\n\n\n\n9. What are the different types of addresses?\n\n\nA Decred address\n9\n is actually just a representation of a public key (which itself could be a script hash) along with a 2-byte prefix which identifies the network and type and a checksum suffix in order to detect improperly entered addresses.\n\n\nConsequently, you can always tell what type of address it is based on the 2-byte prefix.\n\n\nThe first byte of the prefix identifies the network. This is why all mainnet addresses start with \nD\n, testnet addresses start with \nT\n, and simnet addresses start with \nS\n. The second byte of the prefix identifies the type of address it is.\n\n\nThe most common addresses used at the moment are secp256k1 pubkey hashes, which are identified by a lowercase \ns\n. It represents a single public key and therefore only has a single associated private key which can be used to redeem it.\n\n\nThe stake pool, however, uses a pay-to-script-hash address, which is identified by the second byte being a lowercase \nc\n (again that is shown in the linked params). The specific flavor of script it generates is a multi-signature 1-of-2, which is how it allows either the pool, or you, to vote. Both you and the stake pool have your own private keys and since the script only requires one signature of the possible two, that is how it allows delegation of voting rights to the pool without you giving up your voting rights completely.\n\n\n\n\n Sources\n\n\n\n\n\n\n\n\n\n\nDecred Forum, \nPost 8,613\n\n\n\n\n\n\nDecred Forum, \nPost 8,660\n\n\n\n\n\n\nDecred Forum, \nPost 9,731\n\n\n\n\n\n\nDecred Forum, \nPost 9,803\n\n\n\n\n\n\nDecred Forum, \nPost 10,452\n\n\n\n\n\n\nDecred Forum, \nPost 10,657\n\n\n\n\n\n\nDecred Forum, \nPost 10,724\n\n\n\n\n\n\nDecred Forum, \nPost 11,507\n\n\n\n\n\n\nDecred Forum, \nPost 14,995", 
            "title": "Wallets and Seeds"
        }, 
        {
            "location": "/faq/wallets-and-seeds/#wallets-and-seeds", 
            "text": "", 
            "title": " Wallets and Seeds"
        }, 
        {
            "location": "/faq/wallets-and-seeds/#1-should-i-give-my-wallet-seed-to-someone", 
            "text": "No, you should never 1  share your wallet seed with anyone. Doing so is the equivalent of giving them all of your DCR in that wallet.", 
            "title": "1. Should I give my wallet seed to someone?"
        }, 
        {
            "location": "/faq/wallets-and-seeds/#2-how-can-i-convert-my-wallet-seed-hex-to-seed-words", 
            "text": "You can use the  dcrseedhextowords 2  utility to convert a Decred seed from hex to the seed words needed for importing into wallets.", 
            "title": "2. How can I convert my wallet seed hex to seed words?"
        }, 
        {
            "location": "/faq/wallets-and-seeds/#3-can-i-run-multiple-wallets", 
            "text": "Running multiple wallets 3  with the same seed will absolutely lead to the situation where the wallets will not see the same balance. You should not be running multiple wallets with the same seed.  The problem is simply that addresses are generated deterministically from the seed. So if you have two wallets running on the same seed, you basically end up with a situation like this:   Wallet A: Knows about all addresses up to address #15  Wallet B: Knows about all addresses up to address #12   So, any coins that have been sent to addresses #13, #14, and #15 will be known to Wallet A, but not Wallet B.  Further, if you simply tell Wallet B to get the next address it also will not see the coins because, from its point of view, that address just now came into existence and so it will not search for transactions before the current point in time. This is an optimization because, as you can imagine, the blockchain ends up getting extremely large over time and it would be incredibly expensive (in terms of resource usage) to scan the entire chain every time a new address is generated.", 
            "title": "3. Can I run multiple wallets?"
        }, 
        {
            "location": "/faq/wallets-and-seeds/#4-can-someone-steal-my-coins-if-they-access-walletdb", 
            "text": "Nobody can steal your coins if they get access to the wallet.db 4  file unless they also have your private passphrase. If you chose to use public encryption, they also cannot get access to any of your extended public keys or addresses.", 
            "title": "4. Can someone steal my coins if they access wallet.db?"
        }, 
        {
            "location": "/faq/wallets-and-seeds/#5-can-someone-use-a-brute-force-attack-on-a-random-wallet-to-regenerate-its-seed-words", 
            "text": "All the seed words are is a direct mapping of English words to hex digits. The seed is nothing more than a 256-bit (32-byte) cryptographically random number. Salt does not apply here at all. It has nothing to do with brute-forcing 5  random cryptographic numbers.  In other words, since each word can be 256 possibilities and there are 32 words, that yields 256^32 (or 2^256 depending on how you want to look at it, but it s the same number) possibilities. That number is larger than the entire number of hydrogen atoms in the known universe. In fact, it s almost more than the number or atoms total in known universe.  To put this in perspective, assuming there are 7 billion people on the planet and each person owned 10 computers and each one of those computers could test a billion possibilities a second and that you could find the solution on average after testing only 50% of the total possibilities, it would still take 26x10^48 (that s 26 trillion trillion trillion trillion) years to brute-force a single seed.", 
            "title": "5. Can someone use a brute-force attack on a random wallet to regenerate its seed words?"
        }, 
        {
            "location": "/faq/wallets-and-seeds/#6-my-seed-is-not-working-what-can-i-do", 
            "text": "Make sure all of the words are on a single line separated by spaces 6 . Even though they are printed out on multiple lines for readbility, they must be entered on a single line. Also double-check your words have no typos by comparing them to the words in the  PGP word list .", 
            "title": "6. My seed is not working. What can I do?"
        }, 
        {
            "location": "/faq/wallets-and-seeds/#7-how-do-i-import-a-key-that-is-in-wallet-import-format-wif", 
            "text": "It is possible to import a standalone private key 7  into  dcrwallet . Note that this is only for  --noseed  addresses and you should not run this unless you know what you are doing!  Unlock the wallet (ignore square brackets):  dcrctl --wallet walletpassphrase [private encryption passphrase] 60  Import the standalone ( --noseed ) private key (ignore square brackets):  dcrctl --wallet importprivkey [put WIF private key here]  View balance of imported account (give it some time to rescan and look at the log in dcrwallet to see rescan progress):  dcrctl --wallet getbalance  imported  0 all", 
            "title": "7. How do I import a key that is in wallet import format (WIF)?"
        }, 
        {
            "location": "/faq/wallets-and-seeds/#8-what-is-the-difference-between-a-testnet-and-mainnet-address", 
            "text": "A testnet public key address 8  that starts with Tk. A mainnet address starts with Dk. T = Testnet, D = (Decred) Mainnet.", 
            "title": "8. What is the difference between a testnet and mainnet address?"
        }, 
        {
            "location": "/faq/wallets-and-seeds/#9-what-are-the-different-types-of-addresses", 
            "text": "A Decred address 9  is actually just a representation of a public key (which itself could be a script hash) along with a 2-byte prefix which identifies the network and type and a checksum suffix in order to detect improperly entered addresses.  Consequently, you can always tell what type of address it is based on the 2-byte prefix.  The first byte of the prefix identifies the network. This is why all mainnet addresses start with  D , testnet addresses start with  T , and simnet addresses start with  S . The second byte of the prefix identifies the type of address it is.  The most common addresses used at the moment are secp256k1 pubkey hashes, which are identified by a lowercase  s . It represents a single public key and therefore only has a single associated private key which can be used to redeem it.  The stake pool, however, uses a pay-to-script-hash address, which is identified by the second byte being a lowercase  c  (again that is shown in the linked params). The specific flavor of script it generates is a multi-signature 1-of-2, which is how it allows either the pool, or you, to vote. Both you and the stake pool have your own private keys and since the script only requires one signature of the possible two, that is how it allows delegation of voting rights to the pool without you giving up your voting rights completely.", 
            "title": "9. What are the different types of addresses?"
        }, 
        {
            "location": "/faq/wallets-and-seeds/#sources", 
            "text": "Decred Forum,  Post 8,613    Decred Forum,  Post 8,660    Decred Forum,  Post 9,731    Decred Forum,  Post 9,803    Decred Forum,  Post 10,452    Decred Forum,  Post 10,657    Decred Forum,  Post 10,724    Decred Forum,  Post 11,507    Decred Forum,  Post 14,995", 
            "title": " Sources"
        }, 
        {
            "location": "/faq/web-client/", 
            "text": "Web Client\n\n\n\n\n1. How secure is the web client?\n\n\nThe web client is a fork of \nCopay\n, so it is as secure as that\n1\n. The seed (and hence private keys) are kept and computed locally in your browser\ns local storage and everything is run client side. The server never has access to any of the private data needed to spend coins.\n\n\n\n\n2. Can you solo stake mine with the web client?\n\n\nNo, recall that the browser wallet runs locally on your machine. That would not lend itself well to running 24/7. As a result, the browser wallet will never be able to solo stake\n2\n. It would however be possible to support stake pooling with it. Stake pools provide you with the ability to not have a wallet running 24/7 since it will be the pool\ns responsibility to be online and cast a vote on your behalf at that point.\n\n\n\n\n3. Is it safe to delete the wallet and start over?\n\n\nIt is safe\n3\n. The only difference is you will need to go to \nImport Wallet\n this time instead of creating a new one.\n\n\n\n\n Sources\n\n\n\n\n\n\n\n\n\n\nDecred Forum, \nPost 7,981\n\n\n\n\n\n\nDecred Forum, \nPost 9,093\n\n\n\n\n\n\nDecred Forum, \nPost 10,652", 
            "title": "Web Client"
        }, 
        {
            "location": "/faq/web-client/#web-client", 
            "text": "", 
            "title": " Web Client"
        }, 
        {
            "location": "/faq/web-client/#1-how-secure-is-the-web-client", 
            "text": "The web client is a fork of  Copay , so it is as secure as that 1 . The seed (and hence private keys) are kept and computed locally in your browser s local storage and everything is run client side. The server never has access to any of the private data needed to spend coins.", 
            "title": "1. How secure is the web client?"
        }, 
        {
            "location": "/faq/web-client/#2-can-you-solo-stake-mine-with-the-web-client", 
            "text": "No, recall that the browser wallet runs locally on your machine. That would not lend itself well to running 24/7. As a result, the browser wallet will never be able to solo stake 2 . It would however be possible to support stake pooling with it. Stake pools provide you with the ability to not have a wallet running 24/7 since it will be the pool s responsibility to be online and cast a vote on your behalf at that point.", 
            "title": "2. Can you solo stake mine with the web client?"
        }, 
        {
            "location": "/faq/web-client/#3-is-it-safe-to-delete-the-wallet-and-start-over", 
            "text": "It is safe 3 . The only difference is you will need to go to  Import Wallet  this time instead of creating a new one.", 
            "title": "3. Is it safe to delete the wallet and start over?"
        }, 
        {
            "location": "/faq/web-client/#sources", 
            "text": "Decred Forum,  Post 7,981    Decred Forum,  Post 9,093    Decred Forum,  Post 10,652", 
            "title": " Sources"
        }, 
        {
            "location": "/faq/blocks/", 
            "text": "Blocks\n\n\n\n\n1. Can a block become orphaned after being confirmed multiple times?\n\n\nOnly if there as a reorg that is sufficiently long\n1\n. In order for that to happen, you need more hash power working on the other side of a fork than the hash power that is working on the current best chain.\n\n\n\n\n2. Can we remove the testnet block explorer given that one for mainnet is available?\n\n\nTestnet will continue to be a testing ground for new features, so it makes sense to keep the testnet block explorer\n2\n up.\n\n\n\n\n3. What do \n[INF] CHAN: Adding orphan block\n messages mean?\n\n\nIt just means a block that you do not have the parent for was received\n3\n. It pretty much always happens when restarting \ndcrd\n due to the way the sync works. You are still syncing up to the latest block, but the remote peer, that is ahead of you, send a notification that a new block showed up, one for which you do not have the parent yet.\n\n\nRather than ignoring it, once you are sufficiently close to being synced, it essentially saves them for later so once you do have the parent blocks those newer block automatically get connected.\n\n\n\n\n4. Should I download the blockchain again with every new software release?\n\n\nYou should almost never have to download the chain again\n4\n on an upgrade unless it is just a super massive change where it makes sense to start over. Typically though, it should migrate things so it just works.\n\n\n\n\n5. What is the genesis block number?\n\n\nThe genesis block\n5\n is block height 0 (block number 0). Every block after that increases by 1.\n\n\n\n\n6. What do \n[INF] CHAN: FORK: Block 000\n messages mean?\n\n\nHere is an example message:\n\n\n[INF] CHAN: FORK: Block 0000000000001aedcf1b82b087a1d05ef787550174da1012e473e8ee8c178937 (height 17879) forks the chain at height 17878/block 000000000000150f863186cab6ef5c433bcc155d2f683394f8e65cb037f80b16, but does not cause a reorganize\n\n\n\n\nIt means two miners found a solution to a block around the same time and both submitted their solved blocks to the network\n6\n. Both are equally valid, however your node saw the other solution (\n000000000000147d33cde5e9823122924fb43405418712720eb6457956d8edbb\n) first, so from your node\ns point of view, the new block (\n0000000000001aedcf1b82b087a1d05ef787550174da1012e473e8ee8c178937\n) was on a side chain.\n\n\nSince it takes blocks time to relay, other nodes might have seen 0000000000001aedcf1b82b087a1d05ef787550174da1012e473e8ee8c178937 first which means to them the other solution that your node saw first (\n000000000000147d33cde5e9823122924fb43405418712720eb6457956d8edbb\n) was the one on the side chain.\n\n\nThis is totally normal and resolves itself whenever the next block is found since it will now define the longest chain and whichever solution was not built on will be orphaned.\n\n\nIn this case, block #17880 (\n000000000000154c6091747245e3c2620447c71b346aed09548e74b4543d0d66\n) ended up building on top of 000000000000147d33cde5e9823122924fb43405418712720eb6457956d8edbb, so the other solution (\n0000000000001aedcf1b82b087a1d05ef787550174da1012e473e8ee8c178937\n) was orphaned.\n\n\n\n\n Sources\n\n\n\n\n\n\n\n\n\n\nDecred Forum, \nPost 8,918\n\n\n\n\n\n\nDecred Forum, \nPost 9,621\n\n\n\n\n\n\nDecred Forum, \nPost 14,660\n\n\n\n\n\n\nDecred Forum, \nPost 14,788\n\n\n\n\n\n\nDecred Forum, \nPost 16,987\n\n\n\n\n\n\nDecred Forum, \nPost 17,791", 
            "title": "Blocks"
        }, 
        {
            "location": "/faq/blocks/#blocks", 
            "text": "", 
            "title": " Blocks"
        }, 
        {
            "location": "/faq/blocks/#1-can-a-block-become-orphaned-after-being-confirmed-multiple-times", 
            "text": "Only if there as a reorg that is sufficiently long 1 . In order for that to happen, you need more hash power working on the other side of a fork than the hash power that is working on the current best chain.", 
            "title": "1. Can a block become orphaned after being confirmed multiple times?"
        }, 
        {
            "location": "/faq/blocks/#2-can-we-remove-the-testnet-block-explorer-given-that-one-for-mainnet-is-available", 
            "text": "Testnet will continue to be a testing ground for new features, so it makes sense to keep the testnet block explorer 2  up.", 
            "title": "2. Can we remove the testnet block explorer given that one for mainnet is available?"
        }, 
        {
            "location": "/faq/blocks/#3-what-do-inf-chan-adding-orphan-block-messages-mean", 
            "text": "It just means a block that you do not have the parent for was received 3 . It pretty much always happens when restarting  dcrd  due to the way the sync works. You are still syncing up to the latest block, but the remote peer, that is ahead of you, send a notification that a new block showed up, one for which you do not have the parent yet.  Rather than ignoring it, once you are sufficiently close to being synced, it essentially saves them for later so once you do have the parent blocks those newer block automatically get connected.", 
            "title": "3. What do \"[INF] CHAN: Adding orphan block\" messages mean?"
        }, 
        {
            "location": "/faq/blocks/#4-should-i-download-the-blockchain-again-with-every-new-software-release", 
            "text": "You should almost never have to download the chain again 4  on an upgrade unless it is just a super massive change where it makes sense to start over. Typically though, it should migrate things so it just works.", 
            "title": "4. Should I download the blockchain again with every new software release?"
        }, 
        {
            "location": "/faq/blocks/#5-what-is-the-genesis-block-number", 
            "text": "The genesis block 5  is block height 0 (block number 0). Every block after that increases by 1.", 
            "title": "5. What is the genesis block number?"
        }, 
        {
            "location": "/faq/blocks/#6-what-do-inf-chan-fork-block-000-messages-mean", 
            "text": "Here is an example message:  [INF] CHAN: FORK: Block 0000000000001aedcf1b82b087a1d05ef787550174da1012e473e8ee8c178937 (height 17879) forks the chain at height 17878/block 000000000000150f863186cab6ef5c433bcc155d2f683394f8e65cb037f80b16, but does not cause a reorganize  It means two miners found a solution to a block around the same time and both submitted their solved blocks to the network 6 . Both are equally valid, however your node saw the other solution ( 000000000000147d33cde5e9823122924fb43405418712720eb6457956d8edbb ) first, so from your node s point of view, the new block ( 0000000000001aedcf1b82b087a1d05ef787550174da1012e473e8ee8c178937 ) was on a side chain.  Since it takes blocks time to relay, other nodes might have seen 0000000000001aedcf1b82b087a1d05ef787550174da1012e473e8ee8c178937 first which means to them the other solution that your node saw first ( 000000000000147d33cde5e9823122924fb43405418712720eb6457956d8edbb ) was the one on the side chain.  This is totally normal and resolves itself whenever the next block is found since it will now define the longest chain and whichever solution was not built on will be orphaned.  In this case, block #17880 ( 000000000000154c6091747245e3c2620447c71b346aed09548e74b4543d0d66 ) ended up building on top of 000000000000147d33cde5e9823122924fb43405418712720eb6457956d8edbb, so the other solution ( 0000000000001aedcf1b82b087a1d05ef787550174da1012e473e8ee8c178937 ) was orphaned.", 
            "title": "6. What do \"[INF] CHAN: FORK: Block 000...\" messages mean?"
        }, 
        {
            "location": "/faq/blocks/#sources", 
            "text": "Decred Forum,  Post 8,918    Decred Forum,  Post 9,621    Decred Forum,  Post 14,660    Decred Forum,  Post 14,788    Decred Forum,  Post 16,987    Decred Forum,  Post 17,791", 
            "title": " Sources"
        }, 
        {
            "location": "/faq/proof-of-stake/solo-mining/", 
            "text": "Solo Mining\n\n\n\n\n1. Do I need hash power to stake mine?\n\n\nStake \nmining\n does not need any hash power\n1\n. Think of it a bit like interest on invested coins. You lock your coins for a period of time in order to purchase a ticket that gives you a high probability (\n99%) of gaining voting rights and receiving interest in exchange for casting a voting and the opportunity cost of not being able to use those coins for potentially up to ~4.7 months.\n\n\nIf you have already purchased stake tickets, those coins are locked until the tickets either win or expire. You are solo staking and therefore you MUST keep your wallet online 24/7 until all of your tickets have won (or expired) or you will miss out on the rewards since you can\nt cast a vote if you wallet is not online. Because those coins are now locked there is no way for you to change the already staked coins now.\n\n\nThe stake pool, on the other hand, allows you to delegate your voting rights to the pool so it is responsible for being online 24/7 and casting your vote for you.\n\n\n\n\n2. Isn\nt one of the main reasons for stake mining to ensure there are always a sufficient amount of peers online?\n\n\nDefinitely not\n2\n. Staking mining cannot possibly enforce that. An SPV style wallet could easily perform the necessary staking by communicating with other full nodes (\ndcrd\n instances) on the network. It is true that the current wallet requires \ndcrd\n to be running, but that will not always be the case.\n\n\nEven if the software did try to enforce that, you could not stop people from writing utilities and such do it via the peer-2-peer network without needing to run their own local instance anyways.\n\n\n\n\n3. What happens if my wallet is unreachable or locked when my tickets are selected by miners?\n\n\nIf your wallet is offline or locked\n3\n when your tickets are selected, you lose out on the rewards and your ticket is removed from the pool immediately. There are no \nredos\n.\n\n\n\n\n4. Can I somehow test if my machine is reachable for voting? In other words, run the actions of a miner who would want to get my vote.\n\n\nYou do not need to be reachable. Voting is deterministic on a per-block basis\n3\n. That is to say your wallet will know if your ticket is selected based on the current block and then a \nvote transaction\n (ssgen transaction) is broadcast to the network, just like other transactions.\n\n\n\n\n5. Can I run multiple voting-only wallets with the same seed on multiple servers?\n\n\nYou can have multiple voting-only wallets because they are not creating new addresses\n4\n. The problem comes in when you have two wallet creating transactions that involve new addresses because they do not know what the other one is doing.\n\n\nIf you are doing a hot/cold setup, you can create multiple voting-only hot wallets without any issues so long as they both are aware of the address you give voting rights to.\n\n\n\n\n Sources\n\n\n\n\n\n\n\n\n\n\nDecred Forum, \nPost 9,304\n\n\n\n\n\n\nDecred Forum, \nPost 9,311\n\n\n\n\n\n\nDecred Forum, \nPost 9,806\n\n\n\n\n\n\nDecred Forum, \nPost 12,697", 
            "title": "Solo Mining"
        }, 
        {
            "location": "/faq/proof-of-stake/solo-mining/#solo-mining", 
            "text": "", 
            "title": " Solo Mining"
        }, 
        {
            "location": "/faq/proof-of-stake/solo-mining/#1-do-i-need-hash-power-to-stake-mine", 
            "text": "Stake  mining  does not need any hash power 1 . Think of it a bit like interest on invested coins. You lock your coins for a period of time in order to purchase a ticket that gives you a high probability ( 99%) of gaining voting rights and receiving interest in exchange for casting a voting and the opportunity cost of not being able to use those coins for potentially up to ~4.7 months.  If you have already purchased stake tickets, those coins are locked until the tickets either win or expire. You are solo staking and therefore you MUST keep your wallet online 24/7 until all of your tickets have won (or expired) or you will miss out on the rewards since you can t cast a vote if you wallet is not online. Because those coins are now locked there is no way for you to change the already staked coins now.  The stake pool, on the other hand, allows you to delegate your voting rights to the pool so it is responsible for being online 24/7 and casting your vote for you.", 
            "title": "1. Do I need hash power to stake mine?"
        }, 
        {
            "location": "/faq/proof-of-stake/solo-mining/#2-isnt-one-of-the-main-reasons-for-stake-mining-to-ensure-there-are-always-a-sufficient-amount-of-peers-online", 
            "text": "Definitely not 2 . Staking mining cannot possibly enforce that. An SPV style wallet could easily perform the necessary staking by communicating with other full nodes ( dcrd  instances) on the network. It is true that the current wallet requires  dcrd  to be running, but that will not always be the case.  Even if the software did try to enforce that, you could not stop people from writing utilities and such do it via the peer-2-peer network without needing to run their own local instance anyways.", 
            "title": "2. Isn't one of the main reasons for stake mining to ensure there are always a sufficient amount of peers online?"
        }, 
        {
            "location": "/faq/proof-of-stake/solo-mining/#3-what-happens-if-my-wallet-is-unreachable-or-locked-when-my-tickets-are-selected-by-miners", 
            "text": "If your wallet is offline or locked 3  when your tickets are selected, you lose out on the rewards and your ticket is removed from the pool immediately. There are no  redos .", 
            "title": "3. What happens if my wallet is unreachable or locked when my tickets are selected by miners?"
        }, 
        {
            "location": "/faq/proof-of-stake/solo-mining/#4-can-i-somehow-test-if-my-machine-is-reachable-for-voting-in-other-words-run-the-actions-of-a-miner-who-would-want-to-get-my-vote", 
            "text": "You do not need to be reachable. Voting is deterministic on a per-block basis 3 . That is to say your wallet will know if your ticket is selected based on the current block and then a  vote transaction  (ssgen transaction) is broadcast to the network, just like other transactions.", 
            "title": "4. Can I somehow test if my machine is reachable for voting? In other words, run the actions of a miner who would want to get my vote."
        }, 
        {
            "location": "/faq/proof-of-stake/solo-mining/#5-can-i-run-multiple-voting-only-wallets-with-the-same-seed-on-multiple-servers", 
            "text": "You can have multiple voting-only wallets because they are not creating new addresses 4 . The problem comes in when you have two wallet creating transactions that involve new addresses because they do not know what the other one is doing.  If you are doing a hot/cold setup, you can create multiple voting-only hot wallets without any issues so long as they both are aware of the address you give voting rights to.", 
            "title": "5. Can I run multiple voting-only wallets with the same seed on multiple servers?"
        }, 
        {
            "location": "/faq/proof-of-stake/solo-mining/#sources", 
            "text": "Decred Forum,  Post 9,304    Decred Forum,  Post 9,311    Decred Forum,  Post 9,806    Decred Forum,  Post 12,697", 
            "title": " Sources"
        }, 
        {
            "location": "/faq/proof-of-stake/buying-tickets-and-fees/", 
            "text": "Buying Tickets and Fees\n\n\n\n\n1. Is there a way to see tickets purchased by a local wallet?\n\n\nUse the following command to show all of your tickets\n1\n:\n\n\ndcrctl --wallet gettickets true\n\n\n\n\n\n\n2. Do I pay a transaction fee for the ssgen transaction?\n\n\nNo, ssgen transactions do not impose a fee\n2\n (unlike the original ticket purchase transactions which are competing for limited space in each block). They are effectively like proof-of-work coinbase transactions in this regard.\n\n\n\n\n3. How do I change the ticket fee?\n\n\ndcrctl --wallet setticketfee [fee]\n\n\n\n\n\n\n4. How do I manually buy tickets?\n\n\ndcrctl --wallet purchaseticket \nfromaccount\n spendlimit minconf\n\n\n\n\nWhere:\n\n\n\n\n\n\n\n\nOption\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nfromaccount\n\n\nUsually \ndefault\n (unless you have created a different one).\n\n\n\n\n\n\nspendlimit\n\n\nMaximum number of DCR you want to spend on tickets.\n\n\n\n\n\n\nminconf\n\n\nThis can be set to 0.\n\n\n\n\n\n\n\n\n\n\n5. How should I set the txfee?\n\n\nThe txfee (or ticket fee) determines the order in which mempool tickets enter the voting pool. Higher fees encourage PoW miners to put your tickets at the front of the queue. If you set the fee higher than the average your tickets are more likely to be included in the next block. The default txfee is 0.05 DCR. It would seem then that the best idea is to set your txfee high so you are at the front of the line. But that is not always a good idea. In fact, it is rarely a good idea simply because the mempool queue is very short or zero most of the time. Do not forget that the txfee will eat into your DCR profit as it is changed on every ticket and is non-refundable whether or not it votes.\n\n\nConsider a constant stake cost of 10 DCR. Every block 20 tickets can move into the voting pool from the mempool. That is a value of 200 DCR. Every block generates about 30 DCR and returns 50DCR to the voters. 3 DCR is sent to the developers to help fund development of Decred so only 27 ends up in the hands of miners. This means that 77 DCR is freed up each block to go back into tickets, assuming that all returns are reinvested. That is less than half of what the block can handle. The only way more DCR can enter the mempool is by external investment (i.e buying from an exchange) or from miners who have been saving their DCR waiting for the stake cost to drop.\n\n\nIn the case of a cost drop, a miner is looking to get into the pool before the cost changes again. This happens every 144 blocks (about 12 hours). It does not matter if it is in the first block or the 100th. In 144 blocks 2,880 tickets will be accepted with a value of 28,800 DCR. There is not that sort of volume in the proof-of-stake network at this time. There is one scenario in which you might want to set your fee higher. If the stake cost is about to change in a few blocks, the mempool is not empty and you want to make sure you get the current price, it can help to set your fee a little higher than average to ensure you get in, especially if the next change will mean you miss a ticket.\n\n\n\n\n Sources\n\n\n\n\n\n\n\n\n\n\nDecred Forum, \nPost 9,987\n\n\n\n\n\n\nDecred Forum, \nPost 10,219", 
            "title": "Buying Tickets and Fees"
        }, 
        {
            "location": "/faq/proof-of-stake/buying-tickets-and-fees/#buying-tickets-and-fees", 
            "text": "", 
            "title": " Buying Tickets and Fees"
        }, 
        {
            "location": "/faq/proof-of-stake/buying-tickets-and-fees/#1-is-there-a-way-to-see-tickets-purchased-by-a-local-wallet", 
            "text": "Use the following command to show all of your tickets 1 :  dcrctl --wallet gettickets true", 
            "title": "1. Is there a way to see tickets purchased by a local wallet?"
        }, 
        {
            "location": "/faq/proof-of-stake/buying-tickets-and-fees/#2-do-i-pay-a-transaction-fee-for-the-ssgen-transaction", 
            "text": "No, ssgen transactions do not impose a fee 2  (unlike the original ticket purchase transactions which are competing for limited space in each block). They are effectively like proof-of-work coinbase transactions in this regard.", 
            "title": "2. Do I pay a transaction fee for the ssgen transaction?"
        }, 
        {
            "location": "/faq/proof-of-stake/buying-tickets-and-fees/#3-how-do-i-change-the-ticket-fee", 
            "text": "dcrctl --wallet setticketfee [fee]", 
            "title": "3. How do I change the ticket fee?"
        }, 
        {
            "location": "/faq/proof-of-stake/buying-tickets-and-fees/#4-how-do-i-manually-buy-tickets", 
            "text": "dcrctl --wallet purchaseticket  fromaccount  spendlimit minconf  Where:     Option  Explanation      fromaccount  Usually  default  (unless you have created a different one).    spendlimit  Maximum number of DCR you want to spend on tickets.    minconf  This can be set to 0.", 
            "title": "4. How do I manually buy tickets?"
        }, 
        {
            "location": "/faq/proof-of-stake/buying-tickets-and-fees/#5-how-should-i-set-the-txfee", 
            "text": "The txfee (or ticket fee) determines the order in which mempool tickets enter the voting pool. Higher fees encourage PoW miners to put your tickets at the front of the queue. If you set the fee higher than the average your tickets are more likely to be included in the next block. The default txfee is 0.05 DCR. It would seem then that the best idea is to set your txfee high so you are at the front of the line. But that is not always a good idea. In fact, it is rarely a good idea simply because the mempool queue is very short or zero most of the time. Do not forget that the txfee will eat into your DCR profit as it is changed on every ticket and is non-refundable whether or not it votes.  Consider a constant stake cost of 10 DCR. Every block 20 tickets can move into the voting pool from the mempool. That is a value of 200 DCR. Every block generates about 30 DCR and returns 50DCR to the voters. 3 DCR is sent to the developers to help fund development of Decred so only 27 ends up in the hands of miners. This means that 77 DCR is freed up each block to go back into tickets, assuming that all returns are reinvested. That is less than half of what the block can handle. The only way more DCR can enter the mempool is by external investment (i.e buying from an exchange) or from miners who have been saving their DCR waiting for the stake cost to drop.  In the case of a cost drop, a miner is looking to get into the pool before the cost changes again. This happens every 144 blocks (about 12 hours). It does not matter if it is in the first block or the 100th. In 144 blocks 2,880 tickets will be accepted with a value of 28,800 DCR. There is not that sort of volume in the proof-of-stake network at this time. There is one scenario in which you might want to set your fee higher. If the stake cost is about to change in a few blocks, the mempool is not empty and you want to make sure you get the current price, it can help to set your fee a little higher than average to ensure you get in, especially if the next change will mean you miss a ticket.", 
            "title": "5. How should I set the txfee?"
        }, 
        {
            "location": "/faq/proof-of-stake/buying-tickets-and-fees/#sources", 
            "text": "Decred Forum,  Post 9,987    Decred Forum,  Post 10,219", 
            "title": " Sources"
        }, 
        {
            "location": "/faq/proof-of-stake/voting-tickets/", 
            "text": "Voting Tickets\n\n\n\n\n1. When did proof-of-stake voting start?\n\n\nProof-of-stake voting began\n1\n at block 4,096.\n\n\n\n\n2. In the source code TicketPoolSize is set to 8,192, but the current ticket pool size is larger than that. Why?\n\n\nIt is intentional and is an integral part of the dynamic ticket price adjustment\n2\n. The \nTicketPoolSize\n is the target ticket pool size and it works very similar to the target difficulty for proof-of-work (PoW). The fact the current ticket pool size is larger than the target is what causes the ticket price to rise which will in turn will eventually cause less tickets to be purchased and result in the number of tickets in the pool reducing back towards the target. If it falls under, the price will fall to encourage more ticket sales in order to increase the number of tickets in the pool towards the target.\n\n\n\n\n3. If I am unlucky and my ticket expires without voting, do I lose the transaction fee?\n\n\nYes\n3\n.\n\n\n\n\n4. Voting on mainnet was on \nhold\n up until block 4,096, with people buying tickets. Does this mean there will be a significantly higher risk for these tickets to expire?\n\n\nNo\n3\n, the expiration time does not start until a ticket is actually mined into a block. The tickets were just sitting in the memory pool until they could be included in blocks starting with block 4,096.\n\n\n\n\n5. What happens if none (or less than 3) of the selected voters issue their ssgen transactions?\n\n\nVotes are always determined by the current tip. Miners do not start mining for a new block until at least 3+ of the selected voters issue their ssgen transactions. So, if a found block does not manage to get the selected votes\n4\n, the block is simply orphaned by the next block another miner finds.\n\n\nFor a more concrete example, assume the current chain tip is at block 5,000. The voters determined by block 5,000 have already submitted their votes, so miners are chugging away looking for block 5,001. Now, a miner finds a solution for block 5,001 and submits it to the network. All of the daemons (and hence wallets) will see that 5,001 just showed up. However, the miners do not immediately start mining off of 5001. Instead they continue mining off of 5,000 until 3+ votes for block 5,001 show up. At that point they all switch and start mining off of 5,001. If those 3+ votes never show up, another candidate block 5,001 will be found by the other miners still working on block 5,000 who will submit their (different) solution for block 5001 to the network. Since each of these new candidate blocks for 5,001 have a different hash, different tickets are selected.\n\n\n\n\n6. What happens if a ticket I have missed a vote?\n\n\nYour wallet will automatically revoke the ticket in the block after it is missed\n5\n, so you get them back just after they were missed as immature funds (that means they will not be spendable for 256 blocks when they mature).\n\n\nFor example:\n\n\ndcrctl --wallet getstakeinfo\n\n\n\n\n\n\n\n\n\n\nOutput\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nallmempooltix\n\n\nAll of the stake tickets in the memory pool (waiting to be mined into a block).\n\n\n\n\n\n\nownmempooltix\n\n\nYour stake tickets in the memory pool (waiting to be mined into a block).\n\n\n\n\n\n\n\n\n\n\n7. What is the difference between a missed and revoked ticket?\n\n\nMissed tickets are tickets that were called to vote, but did not. After a ticket has been missed, it can be revoked\n6\n. The wallet automatically revokes missed tickets it controls (assuming it is unlocked so it can sign the revocation transaction).\n\n\nAll \nrebroadcastmissed\n does is tell wallet to ask the chain server (\ndcrd\n) to give it the list of missed tickets again so it can double check if it needs to revoke any. Typically it\ns not needed unless, for example, it tried to revoke a ticket but couldn\nt because the wallet was not unlocked. In other words, if you noticed that revoked != missed, you might need to \nrebroadcastmissed\n. As said though, there is rarely a need for this since the wallet automatically does it on startup and looks for missed tickets on every block.\n\n\n\n\n Sources\n\n\n\n\n\n\n\n\n\n\nDecred Forum, \nPost 7,969\n\n\n\n\n\n\nDecred Forum, \nPost 8,965\n\n\n\n\n\n\nDecred Forum, \nPost 9,806\n\n\n\n\n\n\nDecred Forum, \nPost 10,219\n\n\n\n\n\n\nDecred Forum, \nPost 13,912\n\n\n\n\n\n\nDecred Forum, \nPost 14,763", 
            "title": "Voting Tickets"
        }, 
        {
            "location": "/faq/proof-of-stake/voting-tickets/#voting-tickets", 
            "text": "", 
            "title": "Voting Tickets"
        }, 
        {
            "location": "/faq/proof-of-stake/voting-tickets/#1-when-did-proof-of-stake-voting-start", 
            "text": "Proof-of-stake voting began 1  at block 4,096.", 
            "title": "1. When did proof-of-stake voting start?"
        }, 
        {
            "location": "/faq/proof-of-stake/voting-tickets/#2-in-the-source-code-ticketpoolsize-is-set-to-8192-but-the-current-ticket-pool-size-is-larger-than-that-why", 
            "text": "It is intentional and is an integral part of the dynamic ticket price adjustment 2 . The  TicketPoolSize  is the target ticket pool size and it works very similar to the target difficulty for proof-of-work (PoW). The fact the current ticket pool size is larger than the target is what causes the ticket price to rise which will in turn will eventually cause less tickets to be purchased and result in the number of tickets in the pool reducing back towards the target. If it falls under, the price will fall to encourage more ticket sales in order to increase the number of tickets in the pool towards the target.", 
            "title": "2. In the source code TicketPoolSize is set to 8,192, but the current ticket pool size is larger than that. Why?"
        }, 
        {
            "location": "/faq/proof-of-stake/voting-tickets/#3-if-i-am-unlucky-and-my-ticket-expires-without-voting-do-i-lose-the-transaction-fee", 
            "text": "Yes 3 .", 
            "title": "3. If I am unlucky and my ticket expires without voting, do I lose the transaction fee?"
        }, 
        {
            "location": "/faq/proof-of-stake/voting-tickets/#4-voting-on-mainnet-was-on-hold-up-until-block-4096-with-people-buying-tickets-does-this-mean-there-will-be-a-significantly-higher-risk-for-these-tickets-to-expire", 
            "text": "No 3 , the expiration time does not start until a ticket is actually mined into a block. The tickets were just sitting in the memory pool until they could be included in blocks starting with block 4,096.", 
            "title": "4. Voting on mainnet was on 'hold' up until block 4,096, with people buying tickets. Does this mean there will be a significantly higher risk for these tickets to expire?"
        }, 
        {
            "location": "/faq/proof-of-stake/voting-tickets/#5-what-happens-if-none-or-less-than-3-of-the-selected-voters-issue-their-ssgen-transactions", 
            "text": "Votes are always determined by the current tip. Miners do not start mining for a new block until at least 3+ of the selected voters issue their ssgen transactions. So, if a found block does not manage to get the selected votes 4 , the block is simply orphaned by the next block another miner finds.  For a more concrete example, assume the current chain tip is at block 5,000. The voters determined by block 5,000 have already submitted their votes, so miners are chugging away looking for block 5,001. Now, a miner finds a solution for block 5,001 and submits it to the network. All of the daemons (and hence wallets) will see that 5,001 just showed up. However, the miners do not immediately start mining off of 5001. Instead they continue mining off of 5,000 until 3+ votes for block 5,001 show up. At that point they all switch and start mining off of 5,001. If those 3+ votes never show up, another candidate block 5,001 will be found by the other miners still working on block 5,000 who will submit their (different) solution for block 5001 to the network. Since each of these new candidate blocks for 5,001 have a different hash, different tickets are selected.", 
            "title": "5. What happens if none (or less than 3) of the selected voters issue their ssgen transactions?"
        }, 
        {
            "location": "/faq/proof-of-stake/voting-tickets/#6-what-happens-if-a-ticket-i-have-missed-a-vote", 
            "text": "Your wallet will automatically revoke the ticket in the block after it is missed 5 , so you get them back just after they were missed as immature funds (that means they will not be spendable for 256 blocks when they mature).  For example:  dcrctl --wallet getstakeinfo     Output  Description      allmempooltix  All of the stake tickets in the memory pool (waiting to be mined into a block).    ownmempooltix  Your stake tickets in the memory pool (waiting to be mined into a block).", 
            "title": "6. What happens if a ticket I have missed a vote?"
        }, 
        {
            "location": "/faq/proof-of-stake/voting-tickets/#7-what-is-the-difference-between-a-missed-and-revoked-ticket", 
            "text": "Missed tickets are tickets that were called to vote, but did not. After a ticket has been missed, it can be revoked 6 . The wallet automatically revokes missed tickets it controls (assuming it is unlocked so it can sign the revocation transaction).  All  rebroadcastmissed  does is tell wallet to ask the chain server ( dcrd ) to give it the list of missed tickets again so it can double check if it needs to revoke any. Typically it s not needed unless, for example, it tried to revoke a ticket but couldn t because the wallet was not unlocked. In other words, if you noticed that revoked != missed, you might need to  rebroadcastmissed . As said though, there is rarely a need for this since the wallet automatically does it on startup and looks for missed tickets on every block.", 
            "title": "7. What is the difference between a missed and revoked ticket?"
        }, 
        {
            "location": "/faq/proof-of-stake/voting-tickets/#sources", 
            "text": "Decred Forum,  Post 7,969    Decred Forum,  Post 8,965    Decred Forum,  Post 9,806    Decred Forum,  Post 10,219    Decred Forum,  Post 13,912    Decred Forum,  Post 14,763", 
            "title": " Sources"
        }, 
        {
            "location": "/faq/proof-of-stake/stake-pools/", 
            "text": "Stake Pools\n\n\n\n\n1. Are there any other benefits to a stake pool other than not needing to run a full node and keeping your wallet unlocked? For example, will it have a better chance of winning or anything like that?\n\n\nWell first keep in mind that wallet (\ndcrwallet\n) != core network (\ndcrd\n). In order to stake you need to have \ndcrwallet\n online and unlocked 24/7.\n\n\nWith that out of the way, you are correct that the only real benefit of the current pool is that it will provide worry-free voting since it provides multi-location redundancy and automatic failure recovery\n1\n, neither of which your local setup is very likely to have.\n\n\nHowever, it is entirely possible that a stake pool could implement proportional reward splitting so stakers receive smaller and more consistent payouts, however that would come at the expense of having to trust the pool with the rewards since it would have to receive them in order to split them out (just like with PoW pools).\n\n\n\n\n2. Does a proof-of-stake pool split reward between all participants (% based on the amount of tickets you submitted to pool)?\n\n\nIt is technically possible to create a pool that supports proportional reward splitting\n1\n, but this pool does not do that at all. This one simply votes on your behalf. It does this by making the ticket voting rights a 1-of-2 multi-signature P2SH script. The pool signs the vote with its private key at the time the ticket is selected. Since it is a 1-of-2 multi-signature script though, it means if the pool failed to vote for you for whatever reason (extremely unlikely as the mainnet pool will have multiple redundancy and automatic failover), it would still be possible to vote on your own behalf because you have the second private key and could therefore provide a valid signature and satisfy the 1-of-2 requirement.\n\n\nAlso, it is important to note that the original ticket purchase contains a commitment to go to a reward address for which only you have the private key. The PoS voting consensus rules enforce the commitment, so it is impossible for the pool to steal your funds.\n\n\nIn order to split rewards the pool would have to be the recipient of all rewards and then be trusted to properly split the rewards amongst all of the participants according to their proportionality. I fully expect such a scheme will be developed with the understanding it is less secure than the approach the current pool uses.\n\n\n\n\n3. I have to run my wallet to buy tickets, but will they vote properly without me if I shut it down and the pool votes for me instead?\n\n\nYes\n2\n, that is correct. You only need to run wallet in order to spend your coins to purchase the ticket which delegates your voting rights to the pool that will then vote on your behalf. The reward address is a consensus-enforced commitment in the ticket purchase for one of your own addresses for which only you have private key.\n\n\n\n\n4. Are there any issues that could arise from a stake pool having too many people. For example, force voting a block in or out?\n\n\nIt is certainly possible\n3\n, but one of the things that all pools should support is allowing each user to select their individual voting preferences. That way, whenever their ticket comes up and the pool votes on their behalf, it will vote according to their preferences.\n\n\n\n\n5. Are vote bits set when you purchase a stake or when you actually are called to vote? Does this change when in a proof-of-stake pool?\n\n\nThey are set when you actually vote\n4\n (which really only makes sense because you might have bought the ticket weeks or months before a specific voting agenda even exists).\n\n\nA PoS pool can operate however it wants since there is a lot of room for flexibility due to the way the ticket purchase commitment scheme is designed. That said, in general, people should avoid using stake pools that do not allow them control over how they want to vote on non-pool specific issues.\n\n\n\n\n6. What safeguards are in place to stop pool owners disappearing with the funds in the pool?\n\n\nThe current pool design is such that the pool can NOT steal the funds\n5\n. You are only delegating voting rights (and in reality it\ns a 1-of-2 multisig which means either you OR the pool can vote). The ticket purchase contains a consensus-enforced commitment for the final subsidy address, so there is simply no way for the pool to steal the funds.\n\n\nThe worst that would happen if a pool owner disappears is the votes will be missed which results in the ticket being revoked which in turn causes the original coins to go back to the original coin owner (minus the initial transaction fee of course). However, as mentioned previously, because the ticket is a 1-of-2 multisig, each user could run their own wallet in order to vote should the pool owner disappear.\n\n\n\n\n7. Where can I see an example of a stake pool ticket on the block explorer?\n\n\nStake pools involve \nDc\n addresss since the stake pool uses pay-to-script-hash addresses\n6\n. For example, see txid: \nc0abc0ec63a8de15550f067e2b6fde28f0432fb91b938574b282daa69f914103\n.\n\n\n\n\n Sources\n\n\n\n\n\n\n\n\n\n\nDecred Forum, \nPost 9,262\n\n\n\n\n\n\nDecred Forum, \nPost 9,274\n\n\n\n\n\n\nDecred Forum, \nPost 9,311\n\n\n\n\n\n\nDecred Forum, \nPost 13,607\n\n\n\n\n\n\nDecred Forum, \nPost 14,593\n\n\n\n\n\n\nDecred Forum, \nPost 17,515", 
            "title": "Stake Pools"
        }, 
        {
            "location": "/faq/proof-of-stake/stake-pools/#stake-pools", 
            "text": "", 
            "title": " Stake Pools"
        }, 
        {
            "location": "/faq/proof-of-stake/stake-pools/#1-are-there-any-other-benefits-to-a-stake-pool-other-than-not-needing-to-run-a-full-node-and-keeping-your-wallet-unlocked-for-example-will-it-have-a-better-chance-of-winning-or-anything-like-that", 
            "text": "Well first keep in mind that wallet ( dcrwallet ) != core network ( dcrd ). In order to stake you need to have  dcrwallet  online and unlocked 24/7.  With that out of the way, you are correct that the only real benefit of the current pool is that it will provide worry-free voting since it provides multi-location redundancy and automatic failure recovery 1 , neither of which your local setup is very likely to have.  However, it is entirely possible that a stake pool could implement proportional reward splitting so stakers receive smaller and more consistent payouts, however that would come at the expense of having to trust the pool with the rewards since it would have to receive them in order to split them out (just like with PoW pools).", 
            "title": "1. Are there any other benefits to a stake pool other than not needing to run a full node and keeping your wallet unlocked? For example, will it have a better chance of winning or anything like that?"
        }, 
        {
            "location": "/faq/proof-of-stake/stake-pools/#2-does-a-proof-of-stake-pool-split-reward-between-all-participants-based-on-the-amount-of-tickets-you-submitted-to-pool", 
            "text": "It is technically possible to create a pool that supports proportional reward splitting 1 , but this pool does not do that at all. This one simply votes on your behalf. It does this by making the ticket voting rights a 1-of-2 multi-signature P2SH script. The pool signs the vote with its private key at the time the ticket is selected. Since it is a 1-of-2 multi-signature script though, it means if the pool failed to vote for you for whatever reason (extremely unlikely as the mainnet pool will have multiple redundancy and automatic failover), it would still be possible to vote on your own behalf because you have the second private key and could therefore provide a valid signature and satisfy the 1-of-2 requirement.  Also, it is important to note that the original ticket purchase contains a commitment to go to a reward address for which only you have the private key. The PoS voting consensus rules enforce the commitment, so it is impossible for the pool to steal your funds.  In order to split rewards the pool would have to be the recipient of all rewards and then be trusted to properly split the rewards amongst all of the participants according to their proportionality. I fully expect such a scheme will be developed with the understanding it is less secure than the approach the current pool uses.", 
            "title": "2. Does a proof-of-stake pool split reward between all participants (% based on the amount of tickets you submitted to pool)?"
        }, 
        {
            "location": "/faq/proof-of-stake/stake-pools/#3-i-have-to-run-my-wallet-to-buy-tickets-but-will-they-vote-properly-without-me-if-i-shut-it-down-and-the-pool-votes-for-me-instead", 
            "text": "Yes 2 , that is correct. You only need to run wallet in order to spend your coins to purchase the ticket which delegates your voting rights to the pool that will then vote on your behalf. The reward address is a consensus-enforced commitment in the ticket purchase for one of your own addresses for which only you have private key.", 
            "title": "3. I have to run my wallet to buy tickets, but will they vote properly without me if I shut it down and the pool votes for me instead?"
        }, 
        {
            "location": "/faq/proof-of-stake/stake-pools/#4-are-there-any-issues-that-could-arise-from-a-stake-pool-having-too-many-people-for-example-force-voting-a-block-in-or-out", 
            "text": "It is certainly possible 3 , but one of the things that all pools should support is allowing each user to select their individual voting preferences. That way, whenever their ticket comes up and the pool votes on their behalf, it will vote according to their preferences.", 
            "title": "4. Are there any issues that could arise from a stake pool having too many people. For example, force voting a block in or out?"
        }, 
        {
            "location": "/faq/proof-of-stake/stake-pools/#5-are-vote-bits-set-when-you-purchase-a-stake-or-when-you-actually-are-called-to-vote-does-this-change-when-in-a-proof-of-stake-pool", 
            "text": "They are set when you actually vote 4  (which really only makes sense because you might have bought the ticket weeks or months before a specific voting agenda even exists).  A PoS pool can operate however it wants since there is a lot of room for flexibility due to the way the ticket purchase commitment scheme is designed. That said, in general, people should avoid using stake pools that do not allow them control over how they want to vote on non-pool specific issues.", 
            "title": "5. Are vote bits set when you purchase a stake or when you actually are called to vote? Does this change when in a proof-of-stake pool?"
        }, 
        {
            "location": "/faq/proof-of-stake/stake-pools/#6-what-safeguards-are-in-place-to-stop-pool-owners-disappearing-with-the-funds-in-the-pool", 
            "text": "The current pool design is such that the pool can NOT steal the funds 5 . You are only delegating voting rights (and in reality it s a 1-of-2 multisig which means either you OR the pool can vote). The ticket purchase contains a consensus-enforced commitment for the final subsidy address, so there is simply no way for the pool to steal the funds.  The worst that would happen if a pool owner disappears is the votes will be missed which results in the ticket being revoked which in turn causes the original coins to go back to the original coin owner (minus the initial transaction fee of course). However, as mentioned previously, because the ticket is a 1-of-2 multisig, each user could run their own wallet in order to vote should the pool owner disappear.", 
            "title": "6. What safeguards are in place to stop pool owners disappearing with the funds in the pool?"
        }, 
        {
            "location": "/faq/proof-of-stake/stake-pools/#7-where-can-i-see-an-example-of-a-stake-pool-ticket-on-the-block-explorer", 
            "text": "Stake pools involve  Dc  addresss since the stake pool uses pay-to-script-hash addresses 6 . For example, see txid:  c0abc0ec63a8de15550f067e2b6fde28f0432fb91b938574b282daa69f914103 .", 
            "title": "7. Where can I see an example of a stake pool ticket on the block explorer?"
        }, 
        {
            "location": "/faq/proof-of-stake/stake-pools/#sources", 
            "text": "Decred Forum,  Post 9,262    Decred Forum,  Post 9,274    Decred Forum,  Post 9,311    Decred Forum,  Post 13,607    Decred Forum,  Post 14,593    Decred Forum,  Post 17,515", 
            "title": " Sources"
        }, 
        {
            "location": "/faq/proof-of-work-mining/", 
            "text": "Proof-of-work Mining\n\n\n\n\n1. How long does it take for mined coins to get to my wallet?\n\n\nThe coinbase maturity is 256 blocks\n1\n. That means the coins will not show up as spendable for that many blocks.\n\n\n\n\n2. How do I find out which block I mined?\n\n\nThere will be an entry in the \ndcrd\n log\n2\n that looks something like:\n\n\nAccepted block 000... via getwork.\n\n\n\n\n\n\n Sources\n\n\n\n\n\n\n\n\n\n\nDecred Forum, \nPost 16,085\n\n\n\n\n\n\nDecred Forum, \nPost 16,093", 
            "title": "Proof-of-work Mining"
        }, 
        {
            "location": "/faq/proof-of-work-mining/#proof-of-work-mining", 
            "text": "", 
            "title": " Proof-of-work Mining"
        }, 
        {
            "location": "/faq/proof-of-work-mining/#1-how-long-does-it-take-for-mined-coins-to-get-to-my-wallet", 
            "text": "The coinbase maturity is 256 blocks 1 . That means the coins will not show up as spendable for that many blocks.", 
            "title": "1. How long does it take for mined coins to get to my wallet?"
        }, 
        {
            "location": "/faq/proof-of-work-mining/#2-how-do-i-find-out-which-block-i-mined", 
            "text": "There will be an entry in the  dcrd  log 2  that looks something like:  Accepted block 000... via getwork.", 
            "title": "2. How do I find out which block I mined?"
        }, 
        {
            "location": "/faq/proof-of-work-mining/#sources", 
            "text": "Decred Forum,  Post 16,085    Decred Forum,  Post 16,093", 
            "title": " Sources"
        }, 
        {
            "location": "/advanced/storing-login-details/", 
            "text": "Storing Login Details\n\n\nMost parameters that are specified on the command line can also be kept in configuration files. This is a good way of storing your login credentials so that you do not need to include them in scripts or type them into the terminal all the time.\n\n\n\n\n Operating system differences\n\n\nThe files and file content are the same in both Linux and Windows. The only difference is the file location. There is one directory for two of the three Decred programs, \ndcrd\n and \ndcrwallet\n. In Windows they are located in \n%LOCALAPPDATA%\n (you can type that into the Windows explorer location bar to go straight to the folder), while in Linux they are in \n~/.dcrd\n, and \n~/.dcrwallet\n respectively. These are hidden directories and will not show up with \nls\n, but are accessible using \ncd .dcrd\n and \ncd .dcrwallet\n from the home directory.\n\n\nOnly the \ndcrd\n and \ndcrwallet\n folders are created by default. Since \ndcrctl\n interfaces with the daemon on localhost, no extra authentication is needed.\n\n\n\n\n dcrd\n\n\nGo to your \ndcrd\n folder as specified above and create a text file called \ndcrd.conf\n. Open it and type it the following lines:\n\n\nrpcuser=\nusername\n\nrpcpass=\npassword\n\n\n\n\n\nWhere the username and password are ones you can make up on the spot. You do not need to register anywhere. They just secure your connection to the network. Save the file and exit the editor.\n\n\n\n\n dcrwallet\n\n\nThe procedure for the wallet is almost the same as for \ndcrd\n. Go to the \ndcrwallet\n folder and create a text file called \ndcrwallet.conf\n. Open it and enter the following lines:\n\n\nusername=\nusername\n\npassword=\npassword\n\n\n\n\n\nYou can make up the username, but the password must be the one you used to create your wallet (that is the password you were asked to enter, not the seed key words).\n\n\n\n\n dcrctl\n\n\nAs mentioned above, \ndcrctl\n uses the daemon already active on the local machine and so does not require extra authentication. As long as you are using config files for \ndcrd\n and \ndcrwallet\n, you do not need a config file for \ndcrctl\n.\n\n\n\n\n Other uses for the config file\n\n\nAlmost any command that you specify on the command line can be put into a config file. Have a look at the three sample files that came in the Decred download package for all the options available. To use the \ndcrctl\n config file, you will need to create a \ndcrctl\n folder next to the other two folders and put the file there.", 
            "title": "Storing Login Details"
        }, 
        {
            "location": "/advanced/storing-login-details/#storing-login-details", 
            "text": "Most parameters that are specified on the command line can also be kept in configuration files. This is a good way of storing your login credentials so that you do not need to include them in scripts or type them into the terminal all the time.", 
            "title": " Storing Login Details"
        }, 
        {
            "location": "/advanced/storing-login-details/#operating-system-differences", 
            "text": "The files and file content are the same in both Linux and Windows. The only difference is the file location. There is one directory for two of the three Decred programs,  dcrd  and  dcrwallet . In Windows they are located in  %LOCALAPPDATA%  (you can type that into the Windows explorer location bar to go straight to the folder), while in Linux they are in  ~/.dcrd , and  ~/.dcrwallet  respectively. These are hidden directories and will not show up with  ls , but are accessible using  cd .dcrd  and  cd .dcrwallet  from the home directory.  Only the  dcrd  and  dcrwallet  folders are created by default. Since  dcrctl  interfaces with the daemon on localhost, no extra authentication is needed.", 
            "title": " Operating system differences"
        }, 
        {
            "location": "/advanced/storing-login-details/#dcrd", 
            "text": "Go to your  dcrd  folder as specified above and create a text file called  dcrd.conf . Open it and type it the following lines:  rpcuser= username \nrpcpass= password   Where the username and password are ones you can make up on the spot. You do not need to register anywhere. They just secure your connection to the network. Save the file and exit the editor.", 
            "title": " dcrd"
        }, 
        {
            "location": "/advanced/storing-login-details/#dcrwallet", 
            "text": "The procedure for the wallet is almost the same as for  dcrd . Go to the  dcrwallet  folder and create a text file called  dcrwallet.conf . Open it and enter the following lines:  username= username \npassword= password   You can make up the username, but the password must be the one you used to create your wallet (that is the password you were asked to enter, not the seed key words).", 
            "title": " dcrwallet"
        }, 
        {
            "location": "/advanced/storing-login-details/#dcrctl", 
            "text": "As mentioned above,  dcrctl  uses the daemon already active on the local machine and so does not require extra authentication. As long as you are using config files for  dcrd  and  dcrwallet , you do not need a config file for  dcrctl .", 
            "title": " dcrctl"
        }, 
        {
            "location": "/advanced/storing-login-details/#other-uses-for-the-config-file", 
            "text": "Almost any command that you specify on the command line can be put into a config file. Have a look at the three sample files that came in the Decred download package for all the options available. To use the  dcrctl  config file, you will need to create a  dcrctl  folder next to the other two folders and put the file there.", 
            "title": " Other uses for the config file"
        }, 
        {
            "location": "/advanced/network-parameters/", 
            "text": "Network Parameters\n\n\n\n\nThe default options are sane for most users. This means \ndcrd\n will work \nout of the box\n for most users. However, there are also a wide variety of flags that can be used to control it. The following section provides a usage overview which enumerates the flags. An interesting point to note is that the long form of all of these options (except \n-C\n) can be specified in a configuration file that is automatically parsed when dcrd starts up. By default, the configuration file is located at \n~/.dcrd/dcrd.conf\n on POSIX-style operating systems and \n%LOCALAPPDATA%\\dcrd\\dcrd.conf\n on Windows. The \n-C\n (\n--configfile\n) flag, as shown below, can be used to override this location.\n\n\n\n\nUsage\n\n\ndcrd [OPTIONS]\n\n\n\n\n\n\nApplication options\n\n\n\n\n\n\n\n\nOption\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n-V\n or \n--version\n\n\nDisplay version information and exit\n\n\n\n\n\n\n-C\n or \n--configfile=\n\n\nPath to configuration file\n\n\n\n\n\n\n-b\n or \n--datadir=\n\n\nDirectory to store data\n\n\n\n\n\n\n-a\n or \n--addpeer=\n\n\nAdd a peer to connect with at startup\n\n\n\n\n\n\n--connect=\n\n\nConnect only to the specified peers at startup\n\n\n\n\n\n\n--nolisten\n\n\nDisable listening for incoming connections \n NOTE: Listening is automatically disabled if the \n--connect\n or \n--proxy\n options are used without also specifying listen interfaces via \n--listen\n\n\n\n\n\n\n--listen=\n\n\nAdd an interface/port to listen for connections (default all interfaces port: \n9108\n, testnet: \n19108\n)\n\n\n\n\n\n\n--maxpeers=\n\n\nMax number of inbound and outbound peers (125)\n\n\n\n\n\n\n--banduration=\n\n\nHow long to ban misbehaving peers. Valid time units are {s, m, h}.  Minimum 1 second (24h0m0s)\n\n\n\n\n\n\n-u\n or \n--rpcuser=\n\n\nUsername for RPC connections\n\n\n\n\n\n\n-P\n or \n--rpcpass=\n\n\nPassword for RPC connections\n\n\n\n\n\n\n--rpclimituser=\n\n\nUsername for limited RPC connections\n\n\n\n\n\n\n--rpclimitpass=\n\n\nPassword for limited RPC connections\n\n\n\n\n\n\n--rpclisten=\n\n\nAdd an interface/port to listen for RPC connections (default port: \n8334\n, testnet: \n18334\n)\n\n\n\n\n\n\n--rpccert=\n\n\nFile containing the certificate file\n\n\n\n\n\n\n--rpckey=\n\n\nFile containing the certificate key\n\n\n\n\n\n\n--rpcmaxclients=\n\n\nMax number of RPC clients for standard connections (10)\n\n\n\n\n\n\n--rpcmaxwebsockets=\n\n\nMax number of RPC clients for standard connections (25)\n\n\n\n\n\n\n--norpc\n\n\nDisable built-in RPC server \n NOTE: The RPC server is disabled by default if no \nrpcuser\n/\nrpcpass\n is specified\n\n\n\n\n\n\n--notls\n\n\nDisable TLS for the RPC server \n NOTE: This is only allowed if the RPC server is bound to localhost\n\n\n\n\n\n\n--nodnsseed\n\n\nDisable DNS seeding for peers\n\n\n\n\n\n\n--externalip:\n\n\nAdd an ip to the list of local addresses we claim to listen on to peers\n\n\n\n\n\n\n--proxy=\n\n\nConnect via SOCKS5 proxy (eg. 127.0.0.1:9050)\n\n\n\n\n\n\n--proxyuser=\n\n\nUsername for proxy server\n\n\n\n\n\n\n--proxypass=\n\n\nPassword for proxy server\n\n\n\n\n\n\n--onion=\n\n\nConnect to tor hidden services via SOCKS5 proxy (eg. 127.0.0.1:9050)\n\n\n\n\n\n\n--onionuser=\n\n\nUsername for onion proxy server\n\n\n\n\n\n\n--onionpass=\n\n\nPassword for onion proxy server\n\n\n\n\n\n\n--noonion=\n\n\nDisable connecting to tor hidden services\n\n\n\n\n\n\n--torisolation\n\n\nEnable Tor stream isolation by randomizing user credentials for each connection\n\n\n\n\n\n\n--testnet=\n\n\nUse the test network\n\n\n\n\n\n\n--regtest=\n\n\nUse the regression test network\n\n\n\n\n\n\n--nocheckpoints=\n\n\nDisable built-in checkpoints. Don\nt do this unless you know what you\nre doing.\n\n\n\n\n\n\n--dbtype=\n\n\nDatabase backend to use for the Block Chain (leveldb)\n\n\n\n\n\n\n--profile=\n\n\nEnable HTTP profiling on given port \n NOTE port must be between 1024 and 65536 (6060)\n\n\n\n\n\n\n--cpuprofile=\n\n\nWrite CPU profile to the specified file\n\n\n\n\n\n\n-d\n or \n--debuglevel:\n\n\nLogging level for all subsystems {trace, debug, info, warn, error, critical} \n You may also specify \nsubsystem\n=\nlevel\n,\nsubsystem2\n=\nlevel\n,\n to set the log level for individual subsystems \n Use show to list available subsystems (info)\n\n\n\n\n\n\n--upnp\n\n\nUse UPnP to map our listening port outside of NAT\n\n\n\n\n\n\n--limitfreerelay=\n\n\nLimit relay of transactions with no transaction fee to the given amount in thousands of bytes per minute (15)\n\n\n\n\n\n\n--maxorphantx=\n\n\nMax number of orphan transactions to keep in memory (1000)\n\n\n\n\n\n\n--generate=\n\n\nGenerate (mine) decreds using the CPU\n\n\n\n\n\n\n--miningaddr=\n\n\nAdd the specified payment address to the list of addresses to use for generated blocks \n At least one address is required if the generate option is set\n\n\n\n\n\n\n--blockminsize=\n\n\nMininum block size in bytes to be used when creating a block\n\n\n\n\n\n\n--blockmaxsize=\n\n\nMaximum block size in bytes to be used when creating a block (750000)\n\n\n\n\n\n\n--blockprioritysize=\n\n\nSize in bytes for high-priority/low-fee transactions when creating a block (50000)\n\n\n\n\n\n\n--getworkkey=\n\n\nDEPRECATED \n Use the \nminingaddr option instead\n\n\n\n\n\n\n--addrindex=\n\n\nBuild and maintain a full address index. Currently only supported by leveldb.\n\n\n\n\n\n\n--dropaddrindex=\n\n\nDeletes the address-based transaction index from the database on start up, and the exits.\n\n\n\n\n\n\n\n\n\n\nHelp options\n\n\n\n\n\n\n\n\nOption\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n-h\n or \n--help\n\n\nShow this help message\n\n\n\n\n\n\n\n\n\n\nPoS Commands\n\n\nWhile it\ns quite easy to get started PoS mining, there\ns a lot happening in the background. Let\ns have a look at some of the information available:\n\n\ndcrctl -u \ndaemon username\n - P \ndaemon password\n --wallet \ncommand\n\n\n\n\n\ngetbalance (\"account\" minconf=1 \"balancetype\")\n Gets the balance for the given account (not address). On its own it will display spendable coins. To see all coins, you need to set balancetype to all e.g. \u2018getbalance * 0 all\n will show the total balance in wallet.\n\n\ngetstakeinfo\n  \npoolsize\n: 42208,\n  \ndifficulty\n: 17.4973371,\n  \nallmempooltix\n: 0,\n  \nownmempooltix\n: 0,\n  \nimmature\n: 0,\n  \nlive\n: 213,\n  \nproportionlive\n: 0.005046436694465504,\n  \nvoted\n: 129,\n  \ntotalsubsidy\n: 239.06504718,\n  \nmissed\n: 50,\n  \nproportionmissed\n: 0.0011832079132945241,\n  \nrevoked\n: 50\n\n\n\n\nThe \ngetstakeinfo\n command returns a list of data about your PoS mining results.\n\n\n\n\n\n\n\n\nOutput\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npoolsize\n\n\nThe number of tickets current in the voting pool.\n\n\n\n\n\n\ndifficulty\n\n\nThis is the cost of a ticket. It goes up or down depending on the number of tickets currently in the pool as well as the number of tickets over the last 2880 blocks using an exponential moving average \nSource(https://github.com/decred/dcrd/blob/master/chaincfg/params.go#L336). The network will adjust the price to try to keep the pool size near the target of 40,960 tickets. Note this doesn\nt mean the price will always go up if above this number, nor will it always go down if below. The rate that tickets enter the pool also affects the price. It is adjusted every 144 blocks.\n\n\n\n\n\n\nallmempooltix\n\n\nOnly 20 tickets per block are accepted in to the voting pool. Extra tickets wait in the mempool. Tickets are accepted into the voting pool according to txfee which is 0.05 by default. See PoS mining#Purchasing-Tickets for more information.\n\n\n\n\n\n\nownmempooltix\n\n\nYour tickets that are waiting in the mempool.\n\n\n\n\n\n\nimmature\n\n\nAll tickets have a 256 (about a day) maturity time during which they cannot be selected to vote. This indicates how many of your tickets are in this state.\n\n\n\n\n\n\nlive\n\n\nTickets in the voting pool that are active and able to vote when selected.\n\n\n\n\n\n\nproportionlive\n\n\nProportion of your live tickets in the voting pool.\n\n\n\n\n\n\nvoted\n\n\nNumber of your tickets that have voted in this wallet.\n\n\n\n\n\n\ntotalsubsidy\n\n\nTotal amount this wallet has earned through voting.\n\n\n\n\n\n\nmissed\n\n\nTickets that were selected to vote but didn\nt, likely because the wallet was offline.\n\n\n\n\n\n\nproportionmissed\n\n\nProportion of all missed tickets that were yours.\n\n\n\n\n\n\nrevoked\n\n\nNumber of revoked tickets. Since missed tickets are revoked (removed from the voting pool without voting) this number will usually (but not always) equal missed tickets.\n\n\n\n\n\n\n\n\n\n\nPoS network parameters\n\n\n\n\n\n\n\n\nParameter\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMinimumStakeDiff\n\n\n2\n\n\nThe minimum price for a stake ticket.\n\n\n\n\n\n\nTicketPoolSize\n\n\n8,192\n\n\nThis is multiplied by TicketsPerBlock to get the desired voting pool size (40,960).\n\n\n\n\n\n\nTicketsPerBlock\n\n\n5\n\n\nThis many tickets will be chosen to vote each block.\n\n\n\n\n\n\nTicketMaturity\n\n\n256\n\n\nTime in blocks (about a day) until a ticket is able to vote after being purchased.\n\n\n\n\n\n\nTicketExpiry\n\n\n40,960\n\n\nTickets that haven\nt voted after this many blocks will be revoked (about 142 days).\n\n\n\n\n\n\nCoinbaseMaturity\n\n\n256\n\n\nHistoric. Before this block coins could not be transferred.\n\n\n\n\n\n\nSStxChangeMaturity\n\n\n1\n\n\nAfter voting, this many blocks must pass for stake and reward to return to PoS miners.\n\n\n\n\n\n\nTicketPoolSizeWeight\n\n\n4\n\n\nTickets will not change price up or down by more than this multiplier in one update.\n\n\n\n\n\n\nStakeDiffAlpha\n\n\n1\n\n\nThis is the stake difficulty EMA calculation alpha (smoothing) value. It is different from a normal EMA alpha. Closer to 1 \n smoother.\n\n\n\n\n\n\nStakeDiffWindowSize\n\n\n144\n\n\nThe number of blocks in a window. Averaged per window, used below.\n\n\n\n\n\n\nStakeDiffWindows\n\n\n20\n\n\nAn exponential moving average over this many windows is used to calculate stake cost.\n\n\n\n\n\n\nMaxFreshStakePerBlock\n\n\n20\n\n\nThis many new tickets will be added from the mempool to the voting pool each block.\n\n\n\n\n\n\nStakeEnabledHeight\n\n\n256 + 256\n\n\nHistoric. This is the height in which the first ticket could possibly mature. Since coins were locked until block 256, no tickets could be purchased until then. After that, there was another 256 blocks before they matured.\n\n\n\n\n\n\nStakeValidationHeight\n\n\n4,096\n\n\nHistoric. Stake mining did not occur before this block.\n\n\n\n\n\n\nStakeBaseSigScript\n\n\n[]byte{0x00, 0x00}\n\n\nThis is the consensus stakebase signature script for all votes on the network. This isn\nt signed in any way, so without forcing it to be this value, miners/daemons could freely change it. Ensures the block is on the right network.\n\n\n\n\n\n\n\n\n\n\nBlockchain parameters\n\n\n\n\n\n\n\n\nParamater\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nInitial block reward\n\n\n31.1958\n\n\nThis was the initial reward for mining a block.\n\n\n\n\n\n\nBlock reward multiplier\n\n\n100/101\n\n\nThe block reward is multiplied by this whenever the block price changes. Basically what that means is that every reward cycle (see below) the block reward given for mining a block is reduced by approximately 1%.\n\n\n\n\n\n\nBlock reward change\n\n\n6,144 blocks\n\n\nThe number of blocks between block reward changes. This occurs approximately every 3 weeks. Decred uses a more frequent change cycle (about 3 weeks compared to Bitcoins 4 years), but the magnitude of the change is much less (about 1% per cycle whereas Bitcoin is 50%). This is designed to reduce the shock in markets when a change occurs.\n\n\n\n\n\n\nBlock reward share\n\n\n60/30/10\n\n\nThe reward for a block is split between miners and the Decred development team as follows: PoW miners get 60% of the reward to reimburse them for electricity and hardware expenses. PoS miners get 6% of the reward each (30% for 5 votes) \n. This encourages people to hold their coins and invest in the Decred network. The development team receives 10% to help ensure the future of Decred by funding ongoing development.\n\n\n\n\n\n\n\n\n\n\ndcrctl parameters\n\n\nChain server commands\n\n\nNote that some commands have been omitted from this list. They include duplicate commands, unimplemented commands and those that have limited utility to the general user base.\n\n\n\n\n\n\n\n\nCommand\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngetbestblock\n\n\nGet the most recent block and hash in the chain.\n\n\n\n\n\n\ngetbestblockhash\n\n\nGet the hash of the most recent block in the chain.\n\n\n\n\n\n\ngetblockcount\n\n\nGet the current number of blocks in the chain.\n\n\n\n\n\n\ngetdifficulty\n\n\nGet the current PoW mining difficulty.\n\n\n\n\n\n\ngethashespersec\n\n\nGet the network hash rate.\n\n\n\n\n\n\ngetinfo\n\n\nDisplays some basic info about the network including current block number and network difficulty.\n\n\n\n\n\n\ngetmininginfo\n\n\nProbably the most useful PoW command. Shows the current block, size and difficulty, as well as the total network hash rate per second.\n\n\n\n\n\n\ngetnettotals\n\n\nGets the amount of data sent and received by the daemon.\n\n\n\n\n\n\ngetpeerinfo\n\n\nSimilar to getnettoals, includes network data transfer, time connected, block height when daemon was started and current block height.\n\n\n\n\n\n\ngetstakedifficulty\n\n\nReturns current PoS difficulty.\n\n\n\n\n\n\ngetticketpoolvalue\n\n\nGets the DCR value of all tickets in the pool.\n\n\n\n\n\n\nhelp (\"command\")\n\n\nShow the help for a command.\n\n\n\n\n\n\nmissedtickets\n\n\nShow all of your tickets that missed voting.\n\n\n\n\n\n\ngebroadcastmissed\n\n\nRebroadcast missed tickets to the network. This is done automatically on starting the wallet.\n\n\n\n\n\n\nrebroadcastwinners\n\n\nAs above, but for voted tickets.\n\n\n\n\n\n\nstop\n\n\nStop the daemon.\n\n\n\n\n\n\n\n\nWallet server commands (--wallet)\n\n\n\n\n\n\n\n\nCommand\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\naddmultisigaddress nrequired [\"key\",...] (\"account\")\n\n\nAdds an address that requires multiple signatures to use.\n\n\n\n\n\n\nconsolidate inputs (\"account\")\n\n\nCleans up funds in multiple addresses in an account and puts it in a single address. Note there is a transaction fee to use this command.\n\n\n\n\n\n\ncreatemultisig nrequired [\"key\",...]\n\n\nUsed for multi signature wallets.\n\n\n\n\n\n\ncreatenewaccount \"account\"\n\n\nCreate a new account. Note, this makes a new account within the current wallet, NOT a new wallet.\n\n\n\n\n\n\ndumpprivkey \"address\"\n\n\nDisabled on mainnet for security reasons.\n\n\n\n\n\n\nencryptwallet \"passphrase\"\n\n\nEncrypt the wallet with the given phrase\n\n\n\n\n\n\ngetaccount \"address\"\n\n\nThis command will tell you what account the given address belongs to.\n\n\n\n\n\n\ngetaccountaddress \"account\"\n\n\nReturn the first address in the given account (default is \u2018default\n).\n\n\n\n\n\n\ngetaddressesbyaccount \"account\"\n\n\nGet all the addresses in the given account.\n\n\n\n\n\n\ngetbalance (\"account\" minconf=1 \"balancetype\")\n\n\nGet the spendable balance in the given account. To get the entire balance in the wallet, use \u2018getbalance * 0 all\n.\n\n\n\n\n\n\ngetbalancetomaintain\n\n\nThis is the minimum balance to maintain in the wallet when using auto stake buying.\n\n\n\n\n\n\ngetmasterpubkey\n\n\nGet the public key for your wallet. This will allow people to view, but not spend funds in your wallet. It is safe to provide to others.\n\n\n\n\n\n\ngetnewaddress (\"account\" verbose=false)\n\n\nGet a new address in the given account.\n\n\n\n\n\n\ngetreceivedbyaccount \"account\" (minconf=1)\n\n\nGets the total amount of DCR ever received by this wallet. This includes stake returns so it could be quite large if you\nre PoS mining.\n\n\n\n\n\n\ngetreceivedbyaddress \"address\" (minconf=1)\n\n\nGet funds received by the given address.\n\n\n\n\n\n\ngetseed\n\n\nDisabled on mainnet for security.\n\n\n\n\n\n\ngetstakeinfo\n\n\nRetreive useful information on the current status of the PoS pool. See \nPoS Commands.\n\n\n\n\n\n\ngetticketfee\n\n\nGet the average fee being paid for tickets.\n\n\n\n\n\n\ngetticketmaxprice\n\n\nGet the maximum price that your wallet will auto purchase tickets for.\n\n\n\n\n\n\ngettickets includeimmature\n\n\nGet all your current tickets. Second argument should be true if you want to see immature tickets too.\n\n\n\n\n\n\ngettransaction \"txid\" (includewatchonly=false)\n\n\nGet the transaction associated with the given id.\n\n\n\n\n\n\nlistaccounts (minconf=1)\n\n\nSee all accounts and their spendable balance in your wallet.\n\n\n\n\n\n\nlistreceivedbyaccount (minconf=1 includeempty=false includewatchonly=false)\n\n\nGet a list of all your accounts and the amount of DCR that has been received by them.\n\n\n\n\n\n\nlistreceivedbyaddress (minconf=1 includeempty=false includewatchonly=false)\n\n\nGet a list of all your addresses and the amount of DCR that has been received by them.\n\n\n\n\n\n\nlistsinceblock (\"blockhash\" targetconfirmations=1 includewatchonly=false)\n\n\nList transactions that occurred since the given block hash.\n\n\n\n\n\n\nlisttransactions (\"account\" count=10 from=0 includewatchonly=false)\n\n\nList the number of transactions as specified by \u2018count\n in the given account.\n\n\n\n\n\n\nmove \"fromaccount\" \"toaccount\" amount (minconf=1 \"comment\")\n\n\nMove funds between accounts in the same wallet.\n\n\n\n\n\n\npurchaseticket \"fromaccount\" spendlimit (minconf=1 \"ticketaddress\" \"comment\")\n\n\nManually purchase PoS tickets. \u2018fromaccount\n will usually be \ndefault\n. \u2018spendlimit\n is the amount you want to spend on tickets in total, not per ticket.\n\n\n\n\n\n\nrenameaccount \"oldaccount\" \"newaccount\"\n\n\nRename an account in your wallet.\n\n\n\n\n\n\nsendfrom \"fromaccount\" \"toaddress\" amount (minconf=1 \"comment\" \"commentto\")\n\n\nSend DCR from the given account to the given address. You can add an optional comment.\n\n\n\n\n\n\nsendtoaddress \"address\" amount (\"comment\" \"commentto\")\n\n\nSimilar to above but uses the default account to send from.\n\n\n\n\n\n\nsetbalancetomaintain balance\n\n\nUsed for auto staking. The wallet will auto buy tickets until it reaches this threshold.\n\n\n\n\n\n\nsetticketfee fee\n\n\nSet the (non-refunable) fee for purchasing stake tickets. See \nFAQ#Ticket fee\n\n\n\n\n\n\nsetticketmaxprice max\n\n\nSet the maximum price the wallet will pay when auto buying tickets.\n\n\n\n\n\n\nsetticketvotebits \"txhash\" votebits (\"votebitsext\")\n\n\nSets the given ticket to vote \u2018yes\n or \u2018no\n (default yes)\n\n\n\n\n\n\nsettxfee amount\n\n\nSets the fee per kB of transaction data you are willing to pay. Note this is NOT the same as setticketfee above.\n\n\n\n\n\n\nwalletlock\n\n\nLock the wallet (no funds can be sent).\n\n\n\n\n\n\nwalletpassphrase \"passphrase\" timeout\n\n\nUnlock the wallet using the given pass phrase for the given time period in seconds. 0 will unlock the wallet until it is restarted.\n\n\n\n\n\n\nwalletpassphrasechange \"oldpassphrase\" \"newpassphrase\"\n\n\nChange your wallet passphrase.", 
            "title": "Network Parameters"
        }, 
        {
            "location": "/advanced/network-parameters/#network-parameters", 
            "text": "The default options are sane for most users. This means  dcrd  will work  out of the box  for most users. However, there are also a wide variety of flags that can be used to control it. The following section provides a usage overview which enumerates the flags. An interesting point to note is that the long form of all of these options (except  -C ) can be specified in a configuration file that is automatically parsed when dcrd starts up. By default, the configuration file is located at  ~/.dcrd/dcrd.conf  on POSIX-style operating systems and  %LOCALAPPDATA%\\dcrd\\dcrd.conf  on Windows. The  -C  ( --configfile ) flag, as shown below, can be used to override this location.", 
            "title": "Network Parameters"
        }, 
        {
            "location": "/advanced/network-parameters/#usage", 
            "text": "dcrd [OPTIONS]", 
            "title": "Usage"
        }, 
        {
            "location": "/advanced/network-parameters/#application-options", 
            "text": "Option  Description      -V  or  --version  Display version information and exit    -C  or  --configfile=  Path to configuration file    -b  or  --datadir=  Directory to store data    -a  or  --addpeer=  Add a peer to connect with at startup    --connect=  Connect only to the specified peers at startup    --nolisten  Disable listening for incoming connections   NOTE: Listening is automatically disabled if the  --connect  or  --proxy  options are used without also specifying listen interfaces via  --listen    --listen=  Add an interface/port to listen for connections (default all interfaces port:  9108 , testnet:  19108 )    --maxpeers=  Max number of inbound and outbound peers (125)    --banduration=  How long to ban misbehaving peers. Valid time units are {s, m, h}.  Minimum 1 second (24h0m0s)    -u  or  --rpcuser=  Username for RPC connections    -P  or  --rpcpass=  Password for RPC connections    --rpclimituser=  Username for limited RPC connections    --rpclimitpass=  Password for limited RPC connections    --rpclisten=  Add an interface/port to listen for RPC connections (default port:  8334 , testnet:  18334 )    --rpccert=  File containing the certificate file    --rpckey=  File containing the certificate key    --rpcmaxclients=  Max number of RPC clients for standard connections (10)    --rpcmaxwebsockets=  Max number of RPC clients for standard connections (25)    --norpc  Disable built-in RPC server   NOTE: The RPC server is disabled by default if no  rpcuser / rpcpass  is specified    --notls  Disable TLS for the RPC server   NOTE: This is only allowed if the RPC server is bound to localhost    --nodnsseed  Disable DNS seeding for peers    --externalip:  Add an ip to the list of local addresses we claim to listen on to peers    --proxy=  Connect via SOCKS5 proxy (eg. 127.0.0.1:9050)    --proxyuser=  Username for proxy server    --proxypass=  Password for proxy server    --onion=  Connect to tor hidden services via SOCKS5 proxy (eg. 127.0.0.1:9050)    --onionuser=  Username for onion proxy server    --onionpass=  Password for onion proxy server    --noonion=  Disable connecting to tor hidden services    --torisolation  Enable Tor stream isolation by randomizing user credentials for each connection    --testnet=  Use the test network    --regtest=  Use the regression test network    --nocheckpoints=  Disable built-in checkpoints. Don t do this unless you know what you re doing.    --dbtype=  Database backend to use for the Block Chain (leveldb)    --profile=  Enable HTTP profiling on given port   NOTE port must be between 1024 and 65536 (6060)    --cpuprofile=  Write CPU profile to the specified file    -d  or  --debuglevel:  Logging level for all subsystems {trace, debug, info, warn, error, critical}   You may also specify  subsystem = level , subsystem2 = level ,  to set the log level for individual subsystems   Use show to list available subsystems (info)    --upnp  Use UPnP to map our listening port outside of NAT    --limitfreerelay=  Limit relay of transactions with no transaction fee to the given amount in thousands of bytes per minute (15)    --maxorphantx=  Max number of orphan transactions to keep in memory (1000)    --generate=  Generate (mine) decreds using the CPU    --miningaddr=  Add the specified payment address to the list of addresses to use for generated blocks   At least one address is required if the generate option is set    --blockminsize=  Mininum block size in bytes to be used when creating a block    --blockmaxsize=  Maximum block size in bytes to be used when creating a block (750000)    --blockprioritysize=  Size in bytes for high-priority/low-fee transactions when creating a block (50000)    --getworkkey=  DEPRECATED   Use the  miningaddr option instead    --addrindex=  Build and maintain a full address index. Currently only supported by leveldb.    --dropaddrindex=  Deletes the address-based transaction index from the database on start up, and the exits.", 
            "title": "Application options"
        }, 
        {
            "location": "/advanced/network-parameters/#help-options", 
            "text": "Option  Description      -h  or  --help  Show this help message", 
            "title": "Help options"
        }, 
        {
            "location": "/advanced/network-parameters/#pos-commands", 
            "text": "While it s quite easy to get started PoS mining, there s a lot happening in the background. Let s have a look at some of the information available:  dcrctl -u  daemon username  - P  daemon password  --wallet  command   getbalance (\"account\" minconf=1 \"balancetype\")  Gets the balance for the given account (not address). On its own it will display spendable coins. To see all coins, you need to set balancetype to all e.g. \u2018getbalance * 0 all  will show the total balance in wallet.  getstakeinfo\n   poolsize : 42208,\n   difficulty : 17.4973371,\n   allmempooltix : 0,\n   ownmempooltix : 0,\n   immature : 0,\n   live : 213,\n   proportionlive : 0.005046436694465504,\n   voted : 129,\n   totalsubsidy : 239.06504718,\n   missed : 50,\n   proportionmissed : 0.0011832079132945241,\n   revoked : 50  The  getstakeinfo  command returns a list of data about your PoS mining results.     Output  Description      poolsize  The number of tickets current in the voting pool.    difficulty  This is the cost of a ticket. It goes up or down depending on the number of tickets currently in the pool as well as the number of tickets over the last 2880 blocks using an exponential moving average  Source(https://github.com/decred/dcrd/blob/master/chaincfg/params.go#L336). The network will adjust the price to try to keep the pool size near the target of 40,960 tickets. Note this doesn t mean the price will always go up if above this number, nor will it always go down if below. The rate that tickets enter the pool also affects the price. It is adjusted every 144 blocks.    allmempooltix  Only 20 tickets per block are accepted in to the voting pool. Extra tickets wait in the mempool. Tickets are accepted into the voting pool according to txfee which is 0.05 by default. See PoS mining#Purchasing-Tickets for more information.    ownmempooltix  Your tickets that are waiting in the mempool.    immature  All tickets have a 256 (about a day) maturity time during which they cannot be selected to vote. This indicates how many of your tickets are in this state.    live  Tickets in the voting pool that are active and able to vote when selected.    proportionlive  Proportion of your live tickets in the voting pool.    voted  Number of your tickets that have voted in this wallet.    totalsubsidy  Total amount this wallet has earned through voting.    missed  Tickets that were selected to vote but didn t, likely because the wallet was offline.    proportionmissed  Proportion of all missed tickets that were yours.    revoked  Number of revoked tickets. Since missed tickets are revoked (removed from the voting pool without voting) this number will usually (but not always) equal missed tickets.", 
            "title": "PoS Commands"
        }, 
        {
            "location": "/advanced/network-parameters/#pos-network-parameters", 
            "text": "Parameter  Value  Description      MinimumStakeDiff  2  The minimum price for a stake ticket.    TicketPoolSize  8,192  This is multiplied by TicketsPerBlock to get the desired voting pool size (40,960).    TicketsPerBlock  5  This many tickets will be chosen to vote each block.    TicketMaturity  256  Time in blocks (about a day) until a ticket is able to vote after being purchased.    TicketExpiry  40,960  Tickets that haven t voted after this many blocks will be revoked (about 142 days).    CoinbaseMaturity  256  Historic. Before this block coins could not be transferred.    SStxChangeMaturity  1  After voting, this many blocks must pass for stake and reward to return to PoS miners.    TicketPoolSizeWeight  4  Tickets will not change price up or down by more than this multiplier in one update.    StakeDiffAlpha  1  This is the stake difficulty EMA calculation alpha (smoothing) value. It is different from a normal EMA alpha. Closer to 1   smoother.    StakeDiffWindowSize  144  The number of blocks in a window. Averaged per window, used below.    StakeDiffWindows  20  An exponential moving average over this many windows is used to calculate stake cost.    MaxFreshStakePerBlock  20  This many new tickets will be added from the mempool to the voting pool each block.    StakeEnabledHeight  256 + 256  Historic. This is the height in which the first ticket could possibly mature. Since coins were locked until block 256, no tickets could be purchased until then. After that, there was another 256 blocks before they matured.    StakeValidationHeight  4,096  Historic. Stake mining did not occur before this block.    StakeBaseSigScript  []byte{0x00, 0x00}  This is the consensus stakebase signature script for all votes on the network. This isn t signed in any way, so without forcing it to be this value, miners/daemons could freely change it. Ensures the block is on the right network.", 
            "title": "PoS network parameters"
        }, 
        {
            "location": "/advanced/network-parameters/#blockchain-parameters", 
            "text": "Paramater  Value  Description      Initial block reward  31.1958  This was the initial reward for mining a block.    Block reward multiplier  100/101  The block reward is multiplied by this whenever the block price changes. Basically what that means is that every reward cycle (see below) the block reward given for mining a block is reduced by approximately 1%.    Block reward change  6,144 blocks  The number of blocks between block reward changes. This occurs approximately every 3 weeks. Decred uses a more frequent change cycle (about 3 weeks compared to Bitcoins 4 years), but the magnitude of the change is much less (about 1% per cycle whereas Bitcoin is 50%). This is designed to reduce the shock in markets when a change occurs.    Block reward share  60/30/10  The reward for a block is split between miners and the Decred development team as follows: PoW miners get 60% of the reward to reimburse them for electricity and hardware expenses. PoS miners get 6% of the reward each (30% for 5 votes)  . This encourages people to hold their coins and invest in the Decred network. The development team receives 10% to help ensure the future of Decred by funding ongoing development.", 
            "title": "Blockchain parameters"
        }, 
        {
            "location": "/advanced/network-parameters/#dcrctl-parameters", 
            "text": "", 
            "title": "dcrctl parameters"
        }, 
        {
            "location": "/advanced/network-parameters/#chain-server-commands", 
            "text": "Note that some commands have been omitted from this list. They include duplicate commands, unimplemented commands and those that have limited utility to the general user base.     Command  Description      getbestblock  Get the most recent block and hash in the chain.    getbestblockhash  Get the hash of the most recent block in the chain.    getblockcount  Get the current number of blocks in the chain.    getdifficulty  Get the current PoW mining difficulty.    gethashespersec  Get the network hash rate.    getinfo  Displays some basic info about the network including current block number and network difficulty.    getmininginfo  Probably the most useful PoW command. Shows the current block, size and difficulty, as well as the total network hash rate per second.    getnettotals  Gets the amount of data sent and received by the daemon.    getpeerinfo  Similar to getnettoals, includes network data transfer, time connected, block height when daemon was started and current block height.    getstakedifficulty  Returns current PoS difficulty.    getticketpoolvalue  Gets the DCR value of all tickets in the pool.    help (\"command\")  Show the help for a command.    missedtickets  Show all of your tickets that missed voting.    gebroadcastmissed  Rebroadcast missed tickets to the network. This is done automatically on starting the wallet.    rebroadcastwinners  As above, but for voted tickets.    stop  Stop the daemon.", 
            "title": "Chain server commands"
        }, 
        {
            "location": "/advanced/network-parameters/#wallet-server-commands-4545wallet", 
            "text": "Command  Description      addmultisigaddress nrequired [\"key\",...] (\"account\")  Adds an address that requires multiple signatures to use.    consolidate inputs (\"account\")  Cleans up funds in multiple addresses in an account and puts it in a single address. Note there is a transaction fee to use this command.    createmultisig nrequired [\"key\",...]  Used for multi signature wallets.    createnewaccount \"account\"  Create a new account. Note, this makes a new account within the current wallet, NOT a new wallet.    dumpprivkey \"address\"  Disabled on mainnet for security reasons.    encryptwallet \"passphrase\"  Encrypt the wallet with the given phrase    getaccount \"address\"  This command will tell you what account the given address belongs to.    getaccountaddress \"account\"  Return the first address in the given account (default is \u2018default ).    getaddressesbyaccount \"account\"  Get all the addresses in the given account.    getbalance (\"account\" minconf=1 \"balancetype\")  Get the spendable balance in the given account. To get the entire balance in the wallet, use \u2018getbalance * 0 all .    getbalancetomaintain  This is the minimum balance to maintain in the wallet when using auto stake buying.    getmasterpubkey  Get the public key for your wallet. This will allow people to view, but not spend funds in your wallet. It is safe to provide to others.    getnewaddress (\"account\" verbose=false)  Get a new address in the given account.    getreceivedbyaccount \"account\" (minconf=1)  Gets the total amount of DCR ever received by this wallet. This includes stake returns so it could be quite large if you re PoS mining.    getreceivedbyaddress \"address\" (minconf=1)  Get funds received by the given address.    getseed  Disabled on mainnet for security.    getstakeinfo  Retreive useful information on the current status of the PoS pool. See  PoS Commands.    getticketfee  Get the average fee being paid for tickets.    getticketmaxprice  Get the maximum price that your wallet will auto purchase tickets for.    gettickets includeimmature  Get all your current tickets. Second argument should be true if you want to see immature tickets too.    gettransaction \"txid\" (includewatchonly=false)  Get the transaction associated with the given id.    listaccounts (minconf=1)  See all accounts and their spendable balance in your wallet.    listreceivedbyaccount (minconf=1 includeempty=false includewatchonly=false)  Get a list of all your accounts and the amount of DCR that has been received by them.    listreceivedbyaddress (minconf=1 includeempty=false includewatchonly=false)  Get a list of all your addresses and the amount of DCR that has been received by them.    listsinceblock (\"blockhash\" targetconfirmations=1 includewatchonly=false)  List transactions that occurred since the given block hash.    listtransactions (\"account\" count=10 from=0 includewatchonly=false)  List the number of transactions as specified by \u2018count  in the given account.    move \"fromaccount\" \"toaccount\" amount (minconf=1 \"comment\")  Move funds between accounts in the same wallet.    purchaseticket \"fromaccount\" spendlimit (minconf=1 \"ticketaddress\" \"comment\")  Manually purchase PoS tickets. \u2018fromaccount  will usually be  default . \u2018spendlimit  is the amount you want to spend on tickets in total, not per ticket.    renameaccount \"oldaccount\" \"newaccount\"  Rename an account in your wallet.    sendfrom \"fromaccount\" \"toaddress\" amount (minconf=1 \"comment\" \"commentto\")  Send DCR from the given account to the given address. You can add an optional comment.    sendtoaddress \"address\" amount (\"comment\" \"commentto\")  Similar to above but uses the default account to send from.    setbalancetomaintain balance  Used for auto staking. The wallet will auto buy tickets until it reaches this threshold.    setticketfee fee  Set the (non-refunable) fee for purchasing stake tickets. See  FAQ#Ticket fee    setticketmaxprice max  Set the maximum price the wallet will pay when auto buying tickets.    setticketvotebits \"txhash\" votebits (\"votebitsext\")  Sets the given ticket to vote \u2018yes  or \u2018no  (default yes)    settxfee amount  Sets the fee per kB of transaction data you are willing to pay. Note this is NOT the same as setticketfee above.    walletlock  Lock the wallet (no funds can be sent).    walletpassphrase \"passphrase\" timeout  Unlock the wallet using the given pass phrase for the given time period in seconds. 0 will unlock the wallet until it is restarted.    walletpassphrasechange \"oldpassphrase\" \"newpassphrase\"  Change your wallet passphrase.", 
            "title": "Wallet server commands (--wallet)"
        }, 
        {
            "location": "/advanced/block-header-specifications/", 
            "text": "Block Header Specifications\n\n\n\n\nBlock header format\n\n\nDecred block headers occupy 180 bytes when serialized. The serialization format for a block header is displayed below:\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\nSize\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nBlock header version\n\n\n4 bytes\n\n\n\n\n\n\nPrevious block\n\n\nHash of the previous block\n\n\n32 bytes\n\n\n\n\n\n\nMerkle root\n\n\nMerkle tree hash calculated using all transactions in the block\n\n\n32 bytes\n\n\n\n\n\n\nStake root\n\n\nMerkle tree hash calculated using all stake transactions in the block\n\n\n32 bytes\n\n\n\n\n\n\nVote bits\n\n\nBit flags. Currently only used to signify votes on the previous merkle root\n\n\n2 bytes\n\n\n\n\n\n\nFinal state\n\n\nCommitment to the final state of the PRNG (for lottery purposes)\n\n\n6 bytes\n\n\n\n\n\n\nVoters\n\n\nNumber of participating voters in the block\n\n\n2 bytes\n\n\n\n\n\n\nFresh stake\n\n\nNumber of new tickets in the block\n\n\n1 byte\n\n\n\n\n\n\nRevocations\n\n\nNumber of revocations present in the block\n\n\n1 byte\n\n\n\n\n\n\nPool size\n\n\nSize of the ticket pool\n\n\n4 bytes\n\n\n\n\n\n\nBits\n\n\nDifficulty target for the block\n\n\n4 bytes\n\n\n\n\n\n\nSBits\n\n\nStake difficulty target for the block\n\n\n8 bytes\n\n\n\n\n\n\nHeight\n\n\nThe number of blocks that precede the block in the blockchain\n\n\n4 bytes\n\n\n\n\n\n\nSize\n\n\nNumber of bytes that the serialized block occupies\n\n\n4 bytes\n\n\n\n\n\n\nTimestamp\n\n\nTime that the block was created\n\n\n4 bytes\n\n\n\n\n\n\nExtra data\n\n\nThe nonce and any other data that may be used later for consensus purposes\n\n\n40 bytes\n\n\n\n\n\n\n\n\n\n\nExample encoded block header\n\n\n        0x01, 0x00, 0x00, 0x00, // Version 1\n        0x6f, 0xe2, 0x8c, 0x0a, 0xb6, 0xf1, 0xb3, 0x72, // PrevBlock\n        0xc1, 0xa6, 0xa2, 0x46, 0xae, 0x63, 0xf7, 0x4f,\n        0x93, 0x1e, 0x83, 0x65, 0xe1, 0x5a, 0x08, 0x9c,\n        0x68, 0xd6, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x3b, 0xa3, 0xed, 0xfd, 0x7a, 0x7b, 0x12, 0xb2, // MerkleRoot\n        0x7a, 0xc7, 0x2c, 0x3e, 0x67, 0x76, 0x8f, 0x61,\n        0x7f, 0xc8, 0x1b, 0xc3, 0x88, 0x8a, 0x51, 0x32,\n        0x3a, 0x9f, 0xb8, 0xaa, 0x4b, 0x1e, 0x5e, 0x4a,\n        0x3b, 0xa3, 0xed, 0xfd, 0x7a, 0x7b, 0x12, 0xb2, // StakeRoot\n        0x7a, 0xc7, 0x2c, 0x3e, 0x67, 0x76, 0x8f, 0x61,\n        0x7f, 0xc8, 0x1b, 0xc3, 0x88, 0x8a, 0x51, 0x32,\n        0x3a, 0x9f, 0xb8, 0xaa, 0x4b, 0x1e, 0x5e, 0x4a,\n        0x00, 0x00, // VoteBits\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // FinalState\n        0x00, 0x00, // Voters\n        0x00,                   // FreshStake\n        0x00,                   // Revocations\n        0x00, 0x00, 0x00, 0x00, //Poolsize\n        0xff, 0xff, 0x00, 0x1d, // Bits\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // SBits\n        0x00, 0x00, 0x00, 0x00, // Height\n        0x00, 0x00, 0x00, 0x00, // Size\n        0x29, 0xab, 0x5f, 0x49, // Timestamp\n        0xf3, 0xe0, 0x01, 0x00, // Nonce\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ExtraData\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n\n\n\n\n\n\nExample encoded block header as raw bytes\n\n\n        0x01, 0x00, 0x00, 0x00, // Version 1\n        0x6f, 0xe2, 0x8c, 0x0a, 0xb6, 0xf1, 0xb3, 0x72, // PrevBlock\n        0xc1, 0xa6, 0xa2, 0x46, 0xae, 0x63, 0xf7, 0x4f,\n        0x93, 0x1e, 0x83, 0x65, 0xe1, 0x5a, 0x08, 0x9c,\n        0x68, 0xd6, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x3b, 0xa3, 0xed, 0xfd, 0x7a, 0x7b, 0x12, 0xb2, // MerkleRoot\n        0x7a, 0xc7, 0x2c, 0x3e, 0x67, 0x76, 0x8f, 0x61,\n        0x7f, 0xc8, 0x1b, 0xc3, 0x88, 0x8a, 0x51, 0x32,\n        0x3a, 0x9f, 0xb8, 0xaa, 0x4b, 0x1e, 0x5e, 0x4a,\n        0x3b, 0xa3, 0xed, 0xfd, 0x7a, 0x7b, 0x12, 0xb2, // StakeRoot\n        0x7a, 0xc7, 0x2c, 0x3e, 0x67, 0x76, 0x8f, 0x61,\n        0x7f, 0xc8, 0x1b, 0xc3, 0x88, 0x8a, 0x51, 0x32,\n        0x3a, 0x9f, 0xb8, 0xaa, 0x4b, 0x1e, 0x5e, 0x4a,\n        0x00, 0x00, // VoteBits\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // FinalState\n        0x00, 0x00, // Voters\n        0x00,                   // FreshStake\n        0x00,                   // Revocations\n        0x00, 0x00, 0x00, 0x00, //Poolsize\n        0xff, 0xff, 0x00, 0x1d, // Bits\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // SBits\n        0x00, 0x00, 0x00, 0x00, // Height\n        0x00, 0x00, 0x00, 0x00, // Size\n        0x29, 0xab, 0x5f, 0x49, // Timestamp\n        0xf3, 0xe0, 0x01, 0x00, // Nonce\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ExtraData\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n\n\n\n\n\n\nMining details\n\n\nBoth getwork and getblocktemplate are implemented, but neither is precisely the same as in Bitcoin. getwork is very similar, but returns a non-int32 reversed byte string to work off of. The \ndata\n field refers to the properly padded blake256 input of 3x64 byte chunks. Only the last chunk needs to be modified when mining.\n\n\nExample \ngetwork\n response:\n\n\n{\n  \ndata\n: \n00000000bf9d58482135c4d8d9445af7604b24ccf1d31b33df33abf21a4e11f52c\n000000ef9d462a20d734def40076f0027faa8ef8d9c52d68c46741d03b1732377a556ed9cbf3b\n694e65c1b287e8fd2be2e2243a74356d1ef95413d9fc74ffb8a8a07530100e11754a6af500500\n03000115000000096f1d28d1354d000000000a0d0000591300009329a55600000000000000000\n00000000000000000000000000000000000000000000000000000000000000080000001000000\n00000005a0\n,\n  \ntarget\n: \n000000000000000000000000000000000000000000000000000000096f000000\n\n}\n\n\n\n\ngetblocktemplate\n also returns a full header and data about the transactions that are included in the block. An example:\n\n\n{\n  \nheader\n: \n...\n,\n  \nsigoplimit\n: 20000,\n  \nsizelimit\n: 1000000,\n  \ntransactions\n: [\n    {\n      \ndata\n: \n...\n,\n      \nhash\n: \n9e72fdd4f0ac763da72ef672e6a4a9ec157412439fc578f979a6643fb9ad3bb6\n,\n      \ndepends\n: [],\n      \nfee\n: 1000,\n      \nsigops\n: 2,\n      \ntxtype\n: \nregular\n\n    }\n  ],\n  \nstransactions\n: [\n    {\n      \ndata\n: \n...\n,\n      \nhash\n: \n53b4dd7e041f492d9b2de54215b8fff107885313e4556eadabec7784b936f96e\n,\n      \ndepends\n: [],\n      \nfee\n: 0,\n      \nsigops\n: 1,\n      \ntxtype\n: \nvote\n\n    },\n    {\n      \ndata\n: \n...\n,\n      \nhash\n: \n316819cd5ab8a67d56e81cb02f2386a52ce9e88e2984c8fb773b9a7435a843fe\n,\n      \ndepends\n: [],\n      \nfee\n: 0,\n      \nsigops\n: 1,\n      \ntxtype\n: \nvote\n\n    },\n    {\n      \ndata\n: \n...\n,\n      \nhash\n: \nec478ed0572049dea679feeb2cfac70740644dde18ad9241d9075501ea293f25\n,\n      \ndepends\n: [],\n      \nfee\n: 0,\n      \nsigops\n: 1,\n      \ntxtype\n: \nvote\n\n    },\n    {\n      \ndata\n: \n...\n,\n      \nhash\n: \nc83befd244e25cc79b79956d1046003c605aaee672da14c03f4a12a42ba85126\n,\n      \ndepends\n: [],\n      \nfee\n: 0,\n      \nsigops\n: 1,\n      \ntxtype\n: \nvote\n\n    },\n    {\n      \ndata\n: \n...\n,\n      \nhash\n: \n17e7cad2a56540c64c6a655263de22bf45c3ed4d43d059f808038212e3c7d840\n,\n      \ndepends\n: [],\n      \nfee\n: 0,\n      \nsigops\n: 1,\n      \ntxtype\n: \nvote\n\n    },\n    {\n      \ndata\n: \n...\n,\n      \nhash\n: \ne4f17fd4f487fdbf8c24cd1bde1b621203561e9edce975c9f649961160819afb\n,\n      \ndepends\n: [],\n      \nfee\n: 1000,\n      \nsigops\n: 3,\n      \ntxtype\n: \nticket\n\n    },\n    {\n      \ndata\n: \n...\n,\n      \nhash\n: \ne214c31c466a60772cfc463b856c29236c7db10126d0a7a4da000aba0e2a58bb\n,\n      \ndepends\n: [],\n      \nfee\n: 1000,\n      \nsigops\n: 2,\n      \ntxtype\n: \nticket\n\n    },\n    {\n      \ndata\n: \n...\n,\n      \nhash\n: \n2dd201d2960a8e44cbe33caae34d8cdb4c7a9bcfcfc397e88fb5e4afd9e3e425\n,\n      \ndepends\n: [],\n      \nfee\n: 1000,\n      \nsigops\n: 2,\n      \ntxtype\n: \nticket\n\n    },\n    {\n      \ndata\n: \n...\n,\n      \nhash\n: \nb00a34879e4dffacd79f1adae07cf78a415c733695cb309290843f81b860a570\n,\n      \ndepends\n: [],\n      \nfee\n: 1000,\n      \nsigops\n: 3,\n      \ntxtype\n: \nticket\n\n    }\n  ],\n  \ncoinbaseaux\n: {\n    \nflags\n: \n062f646372642f\n\n  },\n  \ncoinbasevalue\n: 247524752,\n  \nlongpollid\n: \n0000005de504d40790bbcccdbe7c693b5bbc0e4871c2d9375625e5248be2f645-1453664716\n,\n  \ntarget\n: \n0000006f09000000000000000000000000000000000000000000000000000000\n,\n  \nmaxtime\n: 1453671916,\n  \nmintime\n: 1453664454,\n  \nmutable\n: [\n    \ntime\n,\n    \ntransactions/add\n,\n    \nprevblock\n,\n    \ncoinbase/append\n\n  ],\n  \nnoncerange\n: \n00000000ffffffff\n,\n  \ncapabilities\n: [\n    \nproposal\n\n  ]\n}\n\n\n\n\nMining is performed by incrementing nonce until the block header is below target. ExtraData is allowed to be used as an extra nonce for fast hashing devices like ASICs, but may be used later by soft fork to provide the root for further data structures required for consensus.", 
            "title": "Block Header Specifications"
        }, 
        {
            "location": "/advanced/block-header-specifications/#block-header-specifications", 
            "text": "", 
            "title": "Block Header Specifications"
        }, 
        {
            "location": "/advanced/block-header-specifications/#block-header-format", 
            "text": "Decred block headers occupy 180 bytes when serialized. The serialization format for a block header is displayed below:     Field  Description  Size      Version  Block header version  4 bytes    Previous block  Hash of the previous block  32 bytes    Merkle root  Merkle tree hash calculated using all transactions in the block  32 bytes    Stake root  Merkle tree hash calculated using all stake transactions in the block  32 bytes    Vote bits  Bit flags. Currently only used to signify votes on the previous merkle root  2 bytes    Final state  Commitment to the final state of the PRNG (for lottery purposes)  6 bytes    Voters  Number of participating voters in the block  2 bytes    Fresh stake  Number of new tickets in the block  1 byte    Revocations  Number of revocations present in the block  1 byte    Pool size  Size of the ticket pool  4 bytes    Bits  Difficulty target for the block  4 bytes    SBits  Stake difficulty target for the block  8 bytes    Height  The number of blocks that precede the block in the blockchain  4 bytes    Size  Number of bytes that the serialized block occupies  4 bytes    Timestamp  Time that the block was created  4 bytes    Extra data  The nonce and any other data that may be used later for consensus purposes  40 bytes", 
            "title": "Block header format"
        }, 
        {
            "location": "/advanced/block-header-specifications/#example-encoded-block-header", 
            "text": "0x01, 0x00, 0x00, 0x00, // Version 1\n        0x6f, 0xe2, 0x8c, 0x0a, 0xb6, 0xf1, 0xb3, 0x72, // PrevBlock\n        0xc1, 0xa6, 0xa2, 0x46, 0xae, 0x63, 0xf7, 0x4f,\n        0x93, 0x1e, 0x83, 0x65, 0xe1, 0x5a, 0x08, 0x9c,\n        0x68, 0xd6, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x3b, 0xa3, 0xed, 0xfd, 0x7a, 0x7b, 0x12, 0xb2, // MerkleRoot\n        0x7a, 0xc7, 0x2c, 0x3e, 0x67, 0x76, 0x8f, 0x61,\n        0x7f, 0xc8, 0x1b, 0xc3, 0x88, 0x8a, 0x51, 0x32,\n        0x3a, 0x9f, 0xb8, 0xaa, 0x4b, 0x1e, 0x5e, 0x4a,\n        0x3b, 0xa3, 0xed, 0xfd, 0x7a, 0x7b, 0x12, 0xb2, // StakeRoot\n        0x7a, 0xc7, 0x2c, 0x3e, 0x67, 0x76, 0x8f, 0x61,\n        0x7f, 0xc8, 0x1b, 0xc3, 0x88, 0x8a, 0x51, 0x32,\n        0x3a, 0x9f, 0xb8, 0xaa, 0x4b, 0x1e, 0x5e, 0x4a,\n        0x00, 0x00, // VoteBits\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // FinalState\n        0x00, 0x00, // Voters\n        0x00,                   // FreshStake\n        0x00,                   // Revocations\n        0x00, 0x00, 0x00, 0x00, //Poolsize\n        0xff, 0xff, 0x00, 0x1d, // Bits\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // SBits\n        0x00, 0x00, 0x00, 0x00, // Height\n        0x00, 0x00, 0x00, 0x00, // Size\n        0x29, 0xab, 0x5f, 0x49, // Timestamp\n        0xf3, 0xe0, 0x01, 0x00, // Nonce\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ExtraData\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,", 
            "title": "Example encoded block header"
        }, 
        {
            "location": "/advanced/block-header-specifications/#example-encoded-block-header-as-raw-bytes", 
            "text": "0x01, 0x00, 0x00, 0x00, // Version 1\n        0x6f, 0xe2, 0x8c, 0x0a, 0xb6, 0xf1, 0xb3, 0x72, // PrevBlock\n        0xc1, 0xa6, 0xa2, 0x46, 0xae, 0x63, 0xf7, 0x4f,\n        0x93, 0x1e, 0x83, 0x65, 0xe1, 0x5a, 0x08, 0x9c,\n        0x68, 0xd6, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x3b, 0xa3, 0xed, 0xfd, 0x7a, 0x7b, 0x12, 0xb2, // MerkleRoot\n        0x7a, 0xc7, 0x2c, 0x3e, 0x67, 0x76, 0x8f, 0x61,\n        0x7f, 0xc8, 0x1b, 0xc3, 0x88, 0x8a, 0x51, 0x32,\n        0x3a, 0x9f, 0xb8, 0xaa, 0x4b, 0x1e, 0x5e, 0x4a,\n        0x3b, 0xa3, 0xed, 0xfd, 0x7a, 0x7b, 0x12, 0xb2, // StakeRoot\n        0x7a, 0xc7, 0x2c, 0x3e, 0x67, 0x76, 0x8f, 0x61,\n        0x7f, 0xc8, 0x1b, 0xc3, 0x88, 0x8a, 0x51, 0x32,\n        0x3a, 0x9f, 0xb8, 0xaa, 0x4b, 0x1e, 0x5e, 0x4a,\n        0x00, 0x00, // VoteBits\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // FinalState\n        0x00, 0x00, // Voters\n        0x00,                   // FreshStake\n        0x00,                   // Revocations\n        0x00, 0x00, 0x00, 0x00, //Poolsize\n        0xff, 0xff, 0x00, 0x1d, // Bits\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // SBits\n        0x00, 0x00, 0x00, 0x00, // Height\n        0x00, 0x00, 0x00, 0x00, // Size\n        0x29, 0xab, 0x5f, 0x49, // Timestamp\n        0xf3, 0xe0, 0x01, 0x00, // Nonce\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ExtraData\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,", 
            "title": "Example encoded block header as raw bytes"
        }, 
        {
            "location": "/advanced/block-header-specifications/#mining-details", 
            "text": "Both getwork and getblocktemplate are implemented, but neither is precisely the same as in Bitcoin. getwork is very similar, but returns a non-int32 reversed byte string to work off of. The  data  field refers to the properly padded blake256 input of 3x64 byte chunks. Only the last chunk needs to be modified when mining.  Example  getwork  response:  {\n   data :  00000000bf9d58482135c4d8d9445af7604b24ccf1d31b33df33abf21a4e11f52c\n000000ef9d462a20d734def40076f0027faa8ef8d9c52d68c46741d03b1732377a556ed9cbf3b\n694e65c1b287e8fd2be2e2243a74356d1ef95413d9fc74ffb8a8a07530100e11754a6af500500\n03000115000000096f1d28d1354d000000000a0d0000591300009329a55600000000000000000\n00000000000000000000000000000000000000000000000000000000000000080000001000000\n00000005a0 ,\n   target :  000000000000000000000000000000000000000000000000000000096f000000 \n}  getblocktemplate  also returns a full header and data about the transactions that are included in the block. An example:  {\n   header :  ... ,\n   sigoplimit : 20000,\n   sizelimit : 1000000,\n   transactions : [\n    {\n       data :  ... ,\n       hash :  9e72fdd4f0ac763da72ef672e6a4a9ec157412439fc578f979a6643fb9ad3bb6 ,\n       depends : [],\n       fee : 1000,\n       sigops : 2,\n       txtype :  regular \n    }\n  ],\n   stransactions : [\n    {\n       data :  ... ,\n       hash :  53b4dd7e041f492d9b2de54215b8fff107885313e4556eadabec7784b936f96e ,\n       depends : [],\n       fee : 0,\n       sigops : 1,\n       txtype :  vote \n    },\n    {\n       data :  ... ,\n       hash :  316819cd5ab8a67d56e81cb02f2386a52ce9e88e2984c8fb773b9a7435a843fe ,\n       depends : [],\n       fee : 0,\n       sigops : 1,\n       txtype :  vote \n    },\n    {\n       data :  ... ,\n       hash :  ec478ed0572049dea679feeb2cfac70740644dde18ad9241d9075501ea293f25 ,\n       depends : [],\n       fee : 0,\n       sigops : 1,\n       txtype :  vote \n    },\n    {\n       data :  ... ,\n       hash :  c83befd244e25cc79b79956d1046003c605aaee672da14c03f4a12a42ba85126 ,\n       depends : [],\n       fee : 0,\n       sigops : 1,\n       txtype :  vote \n    },\n    {\n       data :  ... ,\n       hash :  17e7cad2a56540c64c6a655263de22bf45c3ed4d43d059f808038212e3c7d840 ,\n       depends : [],\n       fee : 0,\n       sigops : 1,\n       txtype :  vote \n    },\n    {\n       data :  ... ,\n       hash :  e4f17fd4f487fdbf8c24cd1bde1b621203561e9edce975c9f649961160819afb ,\n       depends : [],\n       fee : 1000,\n       sigops : 3,\n       txtype :  ticket \n    },\n    {\n       data :  ... ,\n       hash :  e214c31c466a60772cfc463b856c29236c7db10126d0a7a4da000aba0e2a58bb ,\n       depends : [],\n       fee : 1000,\n       sigops : 2,\n       txtype :  ticket \n    },\n    {\n       data :  ... ,\n       hash :  2dd201d2960a8e44cbe33caae34d8cdb4c7a9bcfcfc397e88fb5e4afd9e3e425 ,\n       depends : [],\n       fee : 1000,\n       sigops : 2,\n       txtype :  ticket \n    },\n    {\n       data :  ... ,\n       hash :  b00a34879e4dffacd79f1adae07cf78a415c733695cb309290843f81b860a570 ,\n       depends : [],\n       fee : 1000,\n       sigops : 3,\n       txtype :  ticket \n    }\n  ],\n   coinbaseaux : {\n     flags :  062f646372642f \n  },\n   coinbasevalue : 247524752,\n   longpollid :  0000005de504d40790bbcccdbe7c693b5bbc0e4871c2d9375625e5248be2f645-1453664716 ,\n   target :  0000006f09000000000000000000000000000000000000000000000000000000 ,\n   maxtime : 1453671916,\n   mintime : 1453664454,\n   mutable : [\n     time ,\n     transactions/add ,\n     prevblock ,\n     coinbase/append \n  ],\n   noncerange :  00000000ffffffff ,\n   capabilities : [\n     proposal \n  ]\n}  Mining is performed by incrementing nonce until the block header is below target. ExtraData is allowed to be used as an extra nonce for fast hashing devices like ASICs, but may be used later by soft fork to provide the root for further data structures required for consensus.", 
            "title": "Mining details"
        }, 
        {
            "location": "/advanced/verifying-binaries/", 
            "text": "Verifying Binaries\n\n\n\n\nIn order to verify binaries or other signed files from the Decred Project, there are a couple pieces of software required:\n\n\n\n\nSHA256 \n Once you download your file(s), you need to check their SHA256 hashes, so you may need to download a tool to do this, depending on your OS.\n\n\nGnuPG or PGP \n This is required to import public keys and verify signatures. Examples below use GnuPG.\n\n\n\n\nThe steps to verify the binaries are as follows:\n\n\n\n\nStep One\n\n\n\n\nDownload the file manifest, the signature for the file manifest, and the zip/tarball for your OS from here. Obtain the SHA256 value for the zip/tarball for your OS and check that it matches the value in the file manifest, e.g. for 64-bit Linux:\n\n\n$ sha256sum linux-amd64-20160127-02.tar.gz\n8ffaa268a329890ebf0f96b3cd1bc9f69359e431edbb95d89cec5a605108574b linux-amd64-20160127-02.tar.gz\n\n\n\n\n\n\nStep Two\n\n\n\n\nImport the Decred Release Signing Key in GnuPG:\n\n\n$ gpg --keyserver pgp.mit.edu --recv-keys 0x518A031D\ngpg: requesting key 518A031D from hkp server pgp.mit.edu\ngpg: /home/user/.gnupg/trustdb.gpg: trustdb created\ngpg: key 7608AF04: public key \nDecred Release \nrelease@decred.org\n imported\ngpg: Total number processed: 1\ngpg: imported: 1 (RSA: 1)\n\n\n\n\n\n\nStep Three\n\n\n\n\nVerify the signature for the file manifest is valid and created by the Decred Release Signing Key:\n\n\n$ gpg --verify manifest-20160127-02.txt.asc\ngpg: assuming signed data in `manifest-20160127-02.txt'\ngpg: Signature made Wed 27 Jan 2016 08:56:59 PM UTC using RSA key ID 518A031D\ngpg: Good signature from \nDecred Release \nrelease@decred.org\n\ngpg: WARNING: This key is not certified with a trusted signature!\ngpg: There is no indication that the signature belongs to the owner.\nPrimary key fingerprint: FD13 B683 5E24 8FAF 4BD1 838D 6DF6 34AA 7608 AF04\nSubkey fingerprint: F516 ADB7 A069 852C 7C28 A02D 6D89 7EDF 518A 031D\n\n\n\n\nThe zip or tarball with binaries for your platform is now verified and you can be confident they were generated by the Decred Project.", 
            "title": "Verifying Binaries"
        }, 
        {
            "location": "/advanced/verifying-binaries/#verifying-binaries", 
            "text": "In order to verify binaries or other signed files from the Decred Project, there are a couple pieces of software required:   SHA256   Once you download your file(s), you need to check their SHA256 hashes, so you may need to download a tool to do this, depending on your OS.  GnuPG or PGP   This is required to import public keys and verify signatures. Examples below use GnuPG.   The steps to verify the binaries are as follows:   Step One   Download the file manifest, the signature for the file manifest, and the zip/tarball for your OS from here. Obtain the SHA256 value for the zip/tarball for your OS and check that it matches the value in the file manifest, e.g. for 64-bit Linux:  $ sha256sum linux-amd64-20160127-02.tar.gz\n8ffaa268a329890ebf0f96b3cd1bc9f69359e431edbb95d89cec5a605108574b linux-amd64-20160127-02.tar.gz   Step Two   Import the Decred Release Signing Key in GnuPG:  $ gpg --keyserver pgp.mit.edu --recv-keys 0x518A031D\ngpg: requesting key 518A031D from hkp server pgp.mit.edu\ngpg: /home/user/.gnupg/trustdb.gpg: trustdb created\ngpg: key 7608AF04: public key  Decred Release  release@decred.org  imported\ngpg: Total number processed: 1\ngpg: imported: 1 (RSA: 1)   Step Three   Verify the signature for the file manifest is valid and created by the Decred Release Signing Key:  $ gpg --verify manifest-20160127-02.txt.asc\ngpg: assuming signed data in `manifest-20160127-02.txt'\ngpg: Signature made Wed 27 Jan 2016 08:56:59 PM UTC using RSA key ID 518A031D\ngpg: Good signature from  Decred Release  release@decred.org \ngpg: WARNING: This key is not certified with a trusted signature!\ngpg: There is no indication that the signature belongs to the owner.\nPrimary key fingerprint: FD13 B683 5E24 8FAF 4BD1 838D 6DF6 34AA 7608 AF04\nSubkey fingerprint: F516 ADB7 A069 852C 7C28 A02D 6D89 7EDF 518A 031D  The zip or tarball with binaries for your platform is now verified and you can be confident they were generated by the Decred Project.", 
            "title": "Verifying Binaries"
        }, 
        {
            "location": "/research/overview/", 
            "text": "Overview\n\n\n\n\nDistributed timestamping protocols were first applied to decentralizing a financial network in the ground-breaking paper on Bitcoin by Nakamoto\n1\n. The field has seen explosive research follow-up from both amateurs and professionals, competing to offer extensions, adjustments, improvements, and refinements of the existing protocol. Notable implementations of new ideas include Ethereum\n2\n, which extended scripting, CryptoNote\n3\n, which refined privacy, and Sidechains\n4\n, which investigated two-way pegs with 1:1 Bitcoin tokens. These protocols all utilize proof-of-work (PoW) as originally described in the Bitcoin whitepaper.\n\n\nA common extension to the Bitcoin protocol modifies the consensus mechanism to either completely or partially use proof-of-stake (PoS), or the use of one\ns stake (tokens) rather than one\ns computational power to participate in the timestamping process. The first proof-of-stake blockchain based on the Bitcoin protocol was implemented in 2012 by King and Nadal\n5\n, and includes both PoW and PoS that gradually skew towards complete PoS over time. Criticisms of pure PoS consensus systems have themselves been abundant\n6\n \n7\n, with the most vehement opposition coming from those working with purely PoW blockchains. The most common argument against PoS for distributed timestamping is \nnothing-at-stake\n or \ncostless simulation\n, describing the systematic instability resulting from stakeholders being able to generate alternatively timestamped histories with no cost to themselves.\n\n\nDespite the controversy, it is apparent that systems who have a PoS overlay dependent on a PoW timestamping system may be able to independently achieve consensus. This is mathematically explored by Bentov and colleagues\n8\n in a paper on their scheme, proof-of-activity (PoA), and appears to be a viable extension to the PoW protocols that may enable some interesting new properties. A similar design called MC2 was earlier proposed by Mackenzie in 2013\n9\n. Here we describe the construction and implementation of a similar consensus system that we have named \nDecred\n.\n\n\n References\n\n\n\n\n\n\n\n\n\n\nNakamoto S. 2008. \nBitcoin: A peer-to-peer electronic cash system\n.\n\n\n\n\n\n\nButerin V. 2014. \nA Next-generation smart contract and decentralized application platform\n.\n\n\n\n\n\n\nvon Saberhagen N. 2013. \nCryptoNote v2.0\n.\n\n\n\n\n\n\nBack A., Corallo M., Dashjr L., Friedenbach M., Maxwell G., Miller A., Poelstra A., Timon A., Wuille P. 2014. \nEnabling Bitcoin innovations with pegged sidechains\n.\n\n\n\n\n\n\nKing S. and Nadal S. 2012. \nPPCoin: Peer-to-peer crypto-currency with proof-of-stake\n.\n\n\n\n\n\n\nBentov I., Gabizon A., Mizrahi A. 2015. \nCryptocurrencies without proof-of-work\n.\n\n\n\n\n\n\nPoelstra A. 2015. \nOn stake and consensus\n.\n\n\n\n\n\n\nBentov I., Lee C., Mizrahi A., Rosenfeld M. 2014. \nProof-of-activity: Extending Bitcoin\ns proof-of-work via proof-of-stake\n.\n\n\n\n\n\n\nMackenzie A. 2013. \nMEMCOIN2: A hybrid proof-of-work, proof-of-stake crypto-currency\n.", 
            "title": "Overview"
        }, 
        {
            "location": "/research/overview/#overview", 
            "text": "Distributed timestamping protocols were first applied to decentralizing a financial network in the ground-breaking paper on Bitcoin by Nakamoto 1 . The field has seen explosive research follow-up from both amateurs and professionals, competing to offer extensions, adjustments, improvements, and refinements of the existing protocol. Notable implementations of new ideas include Ethereum 2 , which extended scripting, CryptoNote 3 , which refined privacy, and Sidechains 4 , which investigated two-way pegs with 1:1 Bitcoin tokens. These protocols all utilize proof-of-work (PoW) as originally described in the Bitcoin whitepaper.  A common extension to the Bitcoin protocol modifies the consensus mechanism to either completely or partially use proof-of-stake (PoS), or the use of one s stake (tokens) rather than one s computational power to participate in the timestamping process. The first proof-of-stake blockchain based on the Bitcoin protocol was implemented in 2012 by King and Nadal 5 , and includes both PoW and PoS that gradually skew towards complete PoS over time. Criticisms of pure PoS consensus systems have themselves been abundant 6   7 , with the most vehement opposition coming from those working with purely PoW blockchains. The most common argument against PoS for distributed timestamping is  nothing-at-stake  or  costless simulation , describing the systematic instability resulting from stakeholders being able to generate alternatively timestamped histories with no cost to themselves.  Despite the controversy, it is apparent that systems who have a PoS overlay dependent on a PoW timestamping system may be able to independently achieve consensus. This is mathematically explored by Bentov and colleagues 8  in a paper on their scheme, proof-of-activity (PoA), and appears to be a viable extension to the PoW protocols that may enable some interesting new properties. A similar design called MC2 was earlier proposed by Mackenzie in 2013 9 . Here we describe the construction and implementation of a similar consensus system that we have named  Decred .", 
            "title": " Overview"
        }, 
        {
            "location": "/research/overview/#references", 
            "text": "Nakamoto S. 2008.  Bitcoin: A peer-to-peer electronic cash system .    Buterin V. 2014.  A Next-generation smart contract and decentralized application platform .    von Saberhagen N. 2013.  CryptoNote v2.0 .    Back A., Corallo M., Dashjr L., Friedenbach M., Maxwell G., Miller A., Poelstra A., Timon A., Wuille P. 2014.  Enabling Bitcoin innovations with pegged sidechains .    King S. and Nadal S. 2012.  PPCoin: Peer-to-peer crypto-currency with proof-of-stake .    Bentov I., Gabizon A., Mizrahi A. 2015.  Cryptocurrencies without proof-of-work .    Poelstra A. 2015.  On stake and consensus .    Bentov I., Lee C., Mizrahi A., Rosenfeld M. 2014.  Proof-of-activity: Extending Bitcoin s proof-of-work via proof-of-stake .    Mackenzie A. 2013.  MEMCOIN2: A hybrid proof-of-work, proof-of-stake crypto-currency .", 
            "title": " References"
        }, 
        {
            "location": "/research/hybrid-design/", 
            "text": "Hybrid Design\n\n\n\n\nThe major contrast to the follow-the-satoshi scheme previously described\n1\n is a new lottery system in which tickets must be purchased and then wait on a maturity period before they can be selected and spent. Selection of tickets for a block is performed lexicographically from a mature ticket pool based on pseudorandomness contained in the block header. Because manipulation of this pseudorandomness is difficult in a PoW system, manipulation of ticket selection is associated with a fundamental cost to the PoW miner. The selection of tickets over a time period can be described by a probability density function similar to the probability of obtaining a block in PoW at a constant hash rate over time at a constant difficulty\n2\n, yielding a probability distribution with a mode approximately equal to half the ticket pool size. The price to purchase a ticket is regulated by a new stake difficulty that is determined by the exponentially weight average number of tickets purchased and the size of the mature ticket pool in prior blocks.\n\n\nThe validation of PoW blocks is explained by the following steps:\n\n\n\n\nA block is mined by a PoW miner, who selects the transactions to put inside it. Stake system related transactions are inserted into the UTXO set.\n\n\nPoS miners vote on the block by producing a vote transaction from their ticket. The vote both enables a block to be built on top of the previous block and selects whether or not the previous regular transaction tree (containing the coinbase and non-stake related transactions) is valid.\n\n\nAnother PoW miner begins building a block, inserting the PoS miners\n votes. A majority of the votes cast must be included in the following block for that block to be accepted by the network. Of the vote transactions in this new block, the PoW miner checks a flag to see if the PoS miner indicated if the block\ns regular transaction tree was valid. These voting flags are tallied and, based on majority vote, a bit flag is set in this block to indicate if the previous block\ns regular transaction tree is valid.\n\n\nA nonce is found that satisfies the network difficulty, and the block is inserted into the blockchain. If the previous block\ns regular transaction tree was validated, insert these transactions into the UTXO set. Go to 1.\n\n\n\n\nTo discourage manipulation of the included votes, a linear subsidy penalty is applied to the current block if they fail to include all the voting transactions into their block. The \nsoft\n penalty of invalidating the previous transaction tree helps prevent the discarding of work, which is necessary to secure the system, and makes the assumption that the next block will be obtained by a miner who is disinterested in preserving the subsidy of the former block in favour of their own. Even in the case that this is not true, a malicious miner with a high hash rate will still need at least \n(\\text{number for majority}/2)+1\n votes in favour of their previous block\ns transaction tree in order to produce a block that gives them any subsidy from the previous block.\n\n\nBit flags are explicitly added to both the block header and votes so that either miner can easily vote in new hard or soft forks.\n\n\n References\n\n\n\n\n\n\n\n\n\n\nBentov I., Lee C., Mizrahi A., Rosenfeld M. 2014. \nProof-of-activity: Extending Bitcoin\ns proof-of-work via proof-of-stake\n.\n\n\n\n\n\n\nNakamoto N. 2008. \nBitcoin: A peer-to-peer electronic cash system\n.", 
            "title": "Hybrid Design"
        }, 
        {
            "location": "/research/hybrid-design/#hybrid-design", 
            "text": "The major contrast to the follow-the-satoshi scheme previously described 1  is a new lottery system in which tickets must be purchased and then wait on a maturity period before they can be selected and spent. Selection of tickets for a block is performed lexicographically from a mature ticket pool based on pseudorandomness contained in the block header. Because manipulation of this pseudorandomness is difficult in a PoW system, manipulation of ticket selection is associated with a fundamental cost to the PoW miner. The selection of tickets over a time period can be described by a probability density function similar to the probability of obtaining a block in PoW at a constant hash rate over time at a constant difficulty 2 , yielding a probability distribution with a mode approximately equal to half the ticket pool size. The price to purchase a ticket is regulated by a new stake difficulty that is determined by the exponentially weight average number of tickets purchased and the size of the mature ticket pool in prior blocks.  The validation of PoW blocks is explained by the following steps:   A block is mined by a PoW miner, who selects the transactions to put inside it. Stake system related transactions are inserted into the UTXO set.  PoS miners vote on the block by producing a vote transaction from their ticket. The vote both enables a block to be built on top of the previous block and selects whether or not the previous regular transaction tree (containing the coinbase and non-stake related transactions) is valid.  Another PoW miner begins building a block, inserting the PoS miners  votes. A majority of the votes cast must be included in the following block for that block to be accepted by the network. Of the vote transactions in this new block, the PoW miner checks a flag to see if the PoS miner indicated if the block s regular transaction tree was valid. These voting flags are tallied and, based on majority vote, a bit flag is set in this block to indicate if the previous block s regular transaction tree is valid.  A nonce is found that satisfies the network difficulty, and the block is inserted into the blockchain. If the previous block s regular transaction tree was validated, insert these transactions into the UTXO set. Go to 1.   To discourage manipulation of the included votes, a linear subsidy penalty is applied to the current block if they fail to include all the voting transactions into their block. The  soft  penalty of invalidating the previous transaction tree helps prevent the discarding of work, which is necessary to secure the system, and makes the assumption that the next block will be obtained by a miner who is disinterested in preserving the subsidy of the former block in favour of their own. Even in the case that this is not true, a malicious miner with a high hash rate will still need at least  (\\text{number for majority}/2)+1  votes in favour of their previous block s transaction tree in order to produce a block that gives them any subsidy from the previous block.  Bit flags are explicitly added to both the block header and votes so that either miner can easily vote in new hard or soft forks.", 
            "title": "Hybrid Design"
        }, 
        {
            "location": "/research/hybrid-design/#references", 
            "text": "Bentov I., Lee C., Mizrahi A., Rosenfeld M. 2014.  Proof-of-activity: Extending Bitcoin s proof-of-work via proof-of-stake .    Nakamoto N. 2008.  Bitcoin: A peer-to-peer electronic cash system .", 
            "title": " References"
        }, 
        {
            "location": "/research/decentralized-stake-pooling/", 
            "text": "Decentralized Stake Pooling\n\n\n\n\nOne issue arising from previous PoS designs is how to perform pooling in PoS mining analogous to PoW mining pooling. This is advantageous to PoW miner pooling as PoS miner pooling does not require dedicated hardware to mine beyond simply running a node, and, unlike PoW mining, it\ns unlikely that the centralization-promoting scenario will arise in which capital costs to mine increase as profit decreases. Decred solves this problem by allowing multiple inputs into a ticket purchase transaction and committing to the UTXO subsidy amount for each input proportionally, while also committing to a new output public key or script for these proportional rewards. The subsidy is then given to those generating the ticket in a trustless manner, and the ticket can be signed round robin before submission to the network. Importantly, control over the production of the vote itself is given to another public key or script which can not manipulate the subsidy given to the recipients. Production of the vote in a distributed manner can be achieved by using a script in the ticket that allows for multiple signers.", 
            "title": "Decentralized Stake Pooling"
        }, 
        {
            "location": "/research/decentralized-stake-pooling/#decentralized-stake-pooling", 
            "text": "One issue arising from previous PoS designs is how to perform pooling in PoS mining analogous to PoW mining pooling. This is advantageous to PoW miner pooling as PoS miner pooling does not require dedicated hardware to mine beyond simply running a node, and, unlike PoW mining, it s unlikely that the centralization-promoting scenario will arise in which capital costs to mine increase as profit decreases. Decred solves this problem by allowing multiple inputs into a ticket purchase transaction and committing to the UTXO subsidy amount for each input proportionally, while also committing to a new output public key or script for these proportional rewards. The subsidy is then given to those generating the ticket in a trustless manner, and the ticket can be signed round robin before submission to the network. Importantly, control over the production of the vote itself is given to another public key or script which can not manipulate the subsidy given to the recipients. Production of the vote in a distributed manner can be achieved by using a script in the ticket that allows for multiple signers.", 
            "title": "Decentralized Stake Pooling"
        }, 
        {
            "location": "/research/elliptic-curve-signature-algorithms/", 
            "text": "Elliptic Curve Signature Algorithms\n\n\nAlthough secp256k1 is widely considered to have a secure choice of elliptic curve parameters, some questions about the origin of the curve remain. For example, the selection of the Koblitz curve,\n\n\n\n\n(y^2 + xy = x^3 + ax^2 + b \\text{ and } a = a^2 \\text{, } b = b^2 \\text{; } a = 1 \\text{ or } 2 \\text{, } b != 0)\n\n\n\n\nis typically done by enumerating the binary extension Galois fields \nGF(2^m)\n where \nm\n is a prime in the range {\n0\n, \n...\n, higher limit} and \nx,y \\in GF(2^m)\n\n\n1\n. For 128-bit security, \nm\n is required to be \n\\geqslant 257\n and typically the smallest prime possible in this range to facilitate fast calculation. In this case, the obvious choice for \nm\n is \n277\\text{, } a = 0\n; despite the existence of this appropriate $m$ value being known by the curators of the curve parameters\n2\n and the fact that it was the most computationally efficient solution, the parameters \nm = 283\n and \na = 0\n were selected out of three possible options:\n\n\n\n\n(m = 277\\text{, } a = 0\\text{; } m = 283\\text{, } a = 0\\text{; } m = 283\\text{, } a = 1)\n.\n\n\nFor all other Koblitz curve specifications, the most obvious \nm\n value is selected. Although this is curious, there are no known attacks that can be applied by using a slightly larger $m$ value for the Galois field. Other objections to the parameters used by secp256k1 have also been raised\n3\n.\n\n\nAnother extremely popular digital signature algorithm (DSA) with 128-bits of security is Ed25519\n4\n. This uses the EdDSA signing algorithm over a curve birationally equivalent to Curve25519 and is widely employed today. Unlike secp256k1\ns ECDSA, Ed25519 uses simpler Schnorr signatures that are provably secure in a random oracle model (See: \nSchnorr Signatures\n).\n\n\nSchnorr signatures have also been proposed for Bitcoin\n5\n. However, instead of using an OP code exclusive to Schnorr signatures utilizing the curve parameters for secp256k1, Decred instead uses a new OP code OP_CHECKSIGALT to verify an unlimited number of new signature schemes. In the current implementation, both secp256k1 Schnorr signatures and Ed25519 signatures are available to supplement secp256k1 ECDSA signatures. In the future, it is trivial to add new signature schemes in a soft fork, such as those that are quantum secure. Having these two Schnorr suites available also allows for the generation of simple group signatures occupying the same space of a normal signature\n6\n, which for both is implemented. In the future, threshold signatures using dealerless secret sharing will also enable t-of-n threshold signatures occupying the same amount of space\n7\n.\n\n\n References\n\n\n\n\n\n\n\n\n\n\nPornin T. 2013. \nStackExchange Cryptography: Should we trust the NIST-recommended ECC parameters?\n\n\n\n\n\n\nSolinas J. 2000. \nEfficient arithmetic on Koblitz curves\n.\n\n\n\n\n\n\nBernstein D. and Lange T. 2014. \nSafeCurves: Choosing safe curves for elliptic-curve cryptography\n.\n\n\n\n\n\n\nBernstein D., Duif N., Lange T., Schwabe P., Yang B. 2012. \nHigh-speed high-security signatures\n.\n\n\n\n\n\n\nOsuntokun O. 2015. \nOP_SCHNORRCHECKSIG: Exploring Schnorr Signatures as an alternative to ECDSA for Bitcoin\n.\n\n\n\n\n\n\nPetersen T. 1992. \nDistributed provers and verifiable secret sharing based on the discrete logarithm problem\n.\n\n\n\n\n\n\nStinson D. and Strobl R. 2001. Provably secure distributed Schnorr signatures and a (t,n) threshold scheme for implicit certificates.", 
            "title": "Elliptic Curve Signature Algorithms"
        }, 
        {
            "location": "/research/elliptic-curve-signature-algorithms/#elliptic-curve-signature-algorithms", 
            "text": "Although secp256k1 is widely considered to have a secure choice of elliptic curve parameters, some questions about the origin of the curve remain. For example, the selection of the Koblitz curve,   (y^2 + xy = x^3 + ax^2 + b \\text{ and } a = a^2 \\text{, } b = b^2 \\text{; } a = 1 \\text{ or } 2 \\text{, } b != 0)   is typically done by enumerating the binary extension Galois fields  GF(2^m)  where  m  is a prime in the range { 0 ,  ... , higher limit} and  x,y \\in GF(2^m)  1 . For 128-bit security,  m  is required to be  \\geqslant 257  and typically the smallest prime possible in this range to facilitate fast calculation. In this case, the obvious choice for  m  is  277\\text{, } a = 0 ; despite the existence of this appropriate $m$ value being known by the curators of the curve parameters 2  and the fact that it was the most computationally efficient solution, the parameters  m = 283  and  a = 0  were selected out of three possible options:   (m = 277\\text{, } a = 0\\text{; } m = 283\\text{, } a = 0\\text{; } m = 283\\text{, } a = 1) .  For all other Koblitz curve specifications, the most obvious  m  value is selected. Although this is curious, there are no known attacks that can be applied by using a slightly larger $m$ value for the Galois field. Other objections to the parameters used by secp256k1 have also been raised 3 .  Another extremely popular digital signature algorithm (DSA) with 128-bits of security is Ed25519 4 . This uses the EdDSA signing algorithm over a curve birationally equivalent to Curve25519 and is widely employed today. Unlike secp256k1 s ECDSA, Ed25519 uses simpler Schnorr signatures that are provably secure in a random oracle model (See:  Schnorr Signatures ).  Schnorr signatures have also been proposed for Bitcoin 5 . However, instead of using an OP code exclusive to Schnorr signatures utilizing the curve parameters for secp256k1, Decred instead uses a new OP code OP_CHECKSIGALT to verify an unlimited number of new signature schemes. In the current implementation, both secp256k1 Schnorr signatures and Ed25519 signatures are available to supplement secp256k1 ECDSA signatures. In the future, it is trivial to add new signature schemes in a soft fork, such as those that are quantum secure. Having these two Schnorr suites available also allows for the generation of simple group signatures occupying the same space of a normal signature 6 , which for both is implemented. In the future, threshold signatures using dealerless secret sharing will also enable t-of-n threshold signatures occupying the same amount of space 7 .", 
            "title": "Elliptic Curve Signature Algorithms"
        }, 
        {
            "location": "/research/elliptic-curve-signature-algorithms/#references", 
            "text": "Pornin T. 2013.  StackExchange Cryptography: Should we trust the NIST-recommended ECC parameters?    Solinas J. 2000.  Efficient arithmetic on Koblitz curves .    Bernstein D. and Lange T. 2014.  SafeCurves: Choosing safe curves for elliptic-curve cryptography .    Bernstein D., Duif N., Lange T., Schwabe P., Yang B. 2012.  High-speed high-security signatures .    Osuntokun O. 2015.  OP_SCHNORRCHECKSIG: Exploring Schnorr Signatures as an alternative to ECDSA for Bitcoin .    Petersen T. 1992.  Distributed provers and verifiable secret sharing based on the discrete logarithm problem .    Stinson D. and Strobl R. 2001. Provably secure distributed Schnorr signatures and a (t,n) threshold scheme for implicit certificates.", 
            "title": " References"
        }, 
        {
            "location": "/research/blake-256-hash-function/", 
            "text": "BLAKE-256 Hash Function\n\n\n\n\nSHA256, used in Bitcoin, has a number of technical shortcomings due to its Merkle-Damg\u00e5rd construction. These vulnerabilities led to the SHA3 competition for a new hash function based on a different fundamental construction. Decred has chosen BLAKE256 as its hash function, a finalist for the competition\n1\n \n2\n. The hash function is based around a HAIFA construction that incorporates a variation of the ChaCha stream cipher by Bernstein. The hash function is notable for its high performance on x86-64 microarchitecture, being faster for short messages than SHA256\n3\n despite being considered to have a much higher security margin at 14-rounds.\n\n\n References\n\n\n\n\n\n\n\n\n\n\nAumasson J., Henzen L., Meier W., Phan R. 2010. \nSHA-3 proposal BLAKE\n.\n\n\n\n\n\n\nAumasson J., Henzen L., Meier W., Phan R. 2014. The hash function BLAKE.\n\n\n\n\n\n\nBernstein D. and Lange T. 2013. \neBACS: ECRYPT benchmarking of cryptographic systems\n.", 
            "title": "BLAKE-256 Hash Function"
        }, 
        {
            "location": "/research/blake-256-hash-function/#blake-256-hash-function", 
            "text": "SHA256, used in Bitcoin, has a number of technical shortcomings due to its Merkle-Damg\u00e5rd construction. These vulnerabilities led to the SHA3 competition for a new hash function based on a different fundamental construction. Decred has chosen BLAKE256 as its hash function, a finalist for the competition 1   2 . The hash function is based around a HAIFA construction that incorporates a variation of the ChaCha stream cipher by Bernstein. The hash function is notable for its high performance on x86-64 microarchitecture, being faster for short messages than SHA256 3  despite being considered to have a much higher security margin at 14-rounds.", 
            "title": "BLAKE-256 Hash Function"
        }, 
        {
            "location": "/research/blake-256-hash-function/#references", 
            "text": "Aumasson J., Henzen L., Meier W., Phan R. 2010.  SHA-3 proposal BLAKE .    Aumasson J., Henzen L., Meier W., Phan R. 2014. The hash function BLAKE.    Bernstein D. and Lange T. 2013.  eBACS: ECRYPT benchmarking of cryptographic systems .", 
            "title": " References"
        }, 
        {
            "location": "/research/script-extensions/", 
            "text": "Script Extensions\n\n\n\n\nAside from the previously mentioned OP_CHECKSIGALT and OP_CHECKSIGALTVERIFY, other modifications to Bitcoin scripting have been made. A version byte has been added to output scripts to enable simple soft forking to new scripting languages, as first suggested by Wuille\n1\n. All math and logic related OP codes have been re-enabled and now operate on int32 registers. Various byte string manipulation OP codes have also been implemented and re-enabled. The remaining unused Bitcoin OP codes have been repurposed for future soft forks. Some longstanding bugs in the Bitcoin scripting language have been also been fixed\n2\n \n3\n.\n\n\n References\n\n\n\n\n\n\n\n\n\n\nWuille P. 2015. \nSegregated witness for Bitcoin\n.\n\n\n\n\n\n\nTodd P. \nThe difficulty of writing consensus critical code: The SIGHASH_SINGLE bug\n.\n\n\n\n\n\n\nFranco P. Understanding Bitoin, 6.3: Multisignature (M-of-N) Transactions.", 
            "title": "Script Extensions"
        }, 
        {
            "location": "/research/script-extensions/#script-extensions", 
            "text": "Aside from the previously mentioned OP_CHECKSIGALT and OP_CHECKSIGALTVERIFY, other modifications to Bitcoin scripting have been made. A version byte has been added to output scripts to enable simple soft forking to new scripting languages, as first suggested by Wuille 1 . All math and logic related OP codes have been re-enabled and now operate on int32 registers. Various byte string manipulation OP codes have also been implemented and re-enabled. The remaining unused Bitcoin OP codes have been repurposed for future soft forks. Some longstanding bugs in the Bitcoin scripting language have been also been fixed 2   3 .", 
            "title": "Script Extensions"
        }, 
        {
            "location": "/research/script-extensions/#references", 
            "text": "Wuille P. 2015.  Segregated witness for Bitcoin .    Todd P.  The difficulty of writing consensus critical code: The SIGHASH_SINGLE bug .    Franco P. Understanding Bitoin, 6.3: Multisignature (M-of-N) Transactions.", 
            "title": " References"
        }, 
        {
            "location": "/research/signature-script-isolation-and-fraud-proofs/", 
            "text": "Signature Script Isolation and Fraud Proofs\n\n\n\n\nTo prevent transaction malleability, the ability to generate a transaction with the same input references and outputs and yet a different transaction ID, input scripts have been removed from the calculation of the transaction hash. The origins of this modification have been controversial, although it appears to have been implemented in both CryptoNote coins and sidechains in the past\n1\n \n2\n. It is now being proposed for Bitcoin as a soft fork referred to as \nSegregated Witness\n3\n. As in the Elements sidechains implementation, commitments to the witness data are included in the merkle tree of the block\n2\n. In addition, fraud proofs, as suggested for Bitcoin\ns soft fork\n3\n, are set by miners and also committed to as part of the data in the merkle tree.\n\n\n References\n\n\n\n\n\n\n\n\n\n\nvon Saberhagen N. 2013. \nCryptoNote v2.0\n.\n\n\n\n\n\n\nMaxwell G. 2015. \nBringing new elements to Bitcoin with sidechains\n.\n\n\n\n\n\n\nWuille P. 2015. \nSegregated witness for Bitcoin\n.", 
            "title": "Signature Script Isolation and Fraud Proofs"
        }, 
        {
            "location": "/research/signature-script-isolation-and-fraud-proofs/#signature-script-isolation-and-fraud-proofs", 
            "text": "To prevent transaction malleability, the ability to generate a transaction with the same input references and outputs and yet a different transaction ID, input scripts have been removed from the calculation of the transaction hash. The origins of this modification have been controversial, although it appears to have been implemented in both CryptoNote coins and sidechains in the past 1   2 . It is now being proposed for Bitcoin as a soft fork referred to as  Segregated Witness 3 . As in the Elements sidechains implementation, commitments to the witness data are included in the merkle tree of the block 2 . In addition, fraud proofs, as suggested for Bitcoin s soft fork 3 , are set by miners and also committed to as part of the data in the merkle tree.", 
            "title": "Signature Script Isolation and Fraud Proofs"
        }, 
        {
            "location": "/research/signature-script-isolation-and-fraud-proofs/#references", 
            "text": "von Saberhagen N. 2013.  CryptoNote v2.0 .    Maxwell G. 2015.  Bringing new elements to Bitcoin with sidechains .    Wuille P. 2015.  Segregated witness for Bitcoin .", 
            "title": " References"
        }, 
        {
            "location": "/research/transaction-extensions/", 
            "text": "Transactions Extensions\n\n\n\n\nTransaction expiry has been added, which allows one to prune transactions from the memory pool if the blockchain has reached a certain height\n1\n. Previously the only way to remove a transaction from the mempool was to double spend it.\n\n\n References\n\n\n\n\n\n\n\n\n\n\nByteCoin. 2010. \nNeed OP_BLOCKNUMBER to allow \ntime\n limited transactions\n.", 
            "title": "Transaction Extensions"
        }, 
        {
            "location": "/research/transaction-extensions/#transactions-extensions", 
            "text": "Transaction expiry has been added, which allows one to prune transactions from the memory pool if the blockchain has reached a certain height 1 . Previously the only way to remove a transaction from the mempool was to double spend it.", 
            "title": "Transactions Extensions"
        }, 
        {
            "location": "/research/transaction-extensions/#references", 
            "text": "ByteCoin. 2010.  Need OP_BLOCKNUMBER to allow  time  limited transactions .", 
            "title": " References"
        }, 
        {
            "location": "/research/schnorr-signatures/", 
            "text": "Schnorr Signatures\n\n\n\n\nSchnorr signatures have been proposed for Bitcoin. They have also been used extensively in other cryptocurrencies, such as Nxt and CryptoNote coins. In the simplest case, a Schnorr signature ECDSA cryptosystem can be described as follows:\n\n\n\n\n\n\ny = xG\n where \ny\n is the public key point on the curve, \nx\n is the private scalar, \nG\n is the curve generator.\n\n\n\n\nr = kG\n where \nr\n is the point on the curve resulting from the multiplication of \nk\n, the nonce scalar, by the generator.\n\n\n\n\nh = H(M || r)\n where \nH\n is a secure hash function, \nM\n is the message (usually a 32 byte hash), and \nr\n is the encoded point previously described. \n||\n denotes concatenation.\n\n\n\n\ns = k - hx\n where \ns\n is the scalar denoted from \nk - hx\n.\n\n\nThe signature is \n(r,s)\n, and verification is simply \nH(M || r) == hQ + sG\n.\n\n\n\n\nIn the above, multiplications by a capital letter (e.g., \nkG\n) are point multiplications by a scalar, and so always result in a point on the curve. Addition of these points results in another point. Additions and multiplications of scalars amongst themselves is the same as regular multiplication you would do with any integer. It\ns important to note that multiplying a point by a scalar is considered an irreversible step, because the calculation of the scalar from the new point defaults to the discrete logarithm problem.\n\n\nFrom the above it is clear that \nr\n is a point on the curve, while \ns\n is a scalar. Consider the group of signers represented by \nx_{sum} = x_1 + ... + x_n\n with nonces \nk_{sum} = k_1 + ... + k_n\n. The public key for the private scalar sum would be: \ny = x_{sum} G\n. The signature for these sums (from all group participants) would be: \nr' = k_{sum} G s' = k_{sum} - h x_{sum}\n. To generate this signature all participants would have to share their private key and nonces beforehand. We want to obviously avoid this, so instead let us have each participant create a partial signature. \nr_n = k_1 G + ... + k_n G = r'\n (the sum of the public nonce points, which the participants may freely individually publish) \ns_n = k_n - h x_n\n. Substituting this into the general formulas for signatures and using point or scalar addition: \nr = r_n = r'\n (the same as above) \ns = s_1 + ... + s_n = s'\n (simple scalar addition; it must be true that \n(k_1 - h x_1) + ... + (k_n - h x_n) = s_1 + ... + s_n = s')\n. Doing an m-of-n signature is non-trivial. It has been suggested that a merkle tree containing all possible public key sums for \nm\n participants be used for these cases, generating a \nlog(n)\n sized signature [28].\n\n\n References\n\n\n\n\n\n\n\n\n\n\nWuille P. 2015. \nTree signatures: Multisig on steroids using tree signatures\n.", 
            "title": "Schnorr Signatures"
        }, 
        {
            "location": "/research/schnorr-signatures/#schnorr-signatures", 
            "text": "Schnorr signatures have been proposed for Bitcoin. They have also been used extensively in other cryptocurrencies, such as Nxt and CryptoNote coins. In the simplest case, a Schnorr signature ECDSA cryptosystem can be described as follows:    y = xG  where  y  is the public key point on the curve,  x  is the private scalar,  G  is the curve generator.   r = kG  where  r  is the point on the curve resulting from the multiplication of  k , the nonce scalar, by the generator.   h = H(M || r)  where  H  is a secure hash function,  M  is the message (usually a 32 byte hash), and  r  is the encoded point previously described.  ||  denotes concatenation.   s = k - hx  where  s  is the scalar denoted from  k - hx .  The signature is  (r,s) , and verification is simply  H(M || r) == hQ + sG .   In the above, multiplications by a capital letter (e.g.,  kG ) are point multiplications by a scalar, and so always result in a point on the curve. Addition of these points results in another point. Additions and multiplications of scalars amongst themselves is the same as regular multiplication you would do with any integer. It s important to note that multiplying a point by a scalar is considered an irreversible step, because the calculation of the scalar from the new point defaults to the discrete logarithm problem.  From the above it is clear that  r  is a point on the curve, while  s  is a scalar. Consider the group of signers represented by  x_{sum} = x_1 + ... + x_n  with nonces  k_{sum} = k_1 + ... + k_n . The public key for the private scalar sum would be:  y = x_{sum} G . The signature for these sums (from all group participants) would be:  r' = k_{sum} G s' = k_{sum} - h x_{sum} . To generate this signature all participants would have to share their private key and nonces beforehand. We want to obviously avoid this, so instead let us have each participant create a partial signature.  r_n = k_1 G + ... + k_n G = r'  (the sum of the public nonce points, which the participants may freely individually publish)  s_n = k_n - h x_n . Substituting this into the general formulas for signatures and using point or scalar addition:  r = r_n = r'  (the same as above)  s = s_1 + ... + s_n = s'  (simple scalar addition; it must be true that  (k_1 - h x_1) + ... + (k_n - h x_n) = s_1 + ... + s_n = s') . Doing an m-of-n signature is non-trivial. It has been suggested that a merkle tree containing all possible public key sums for  m  participants be used for these cases, generating a  log(n)  sized signature [28].", 
            "title": "Schnorr Signatures"
        }, 
        {
            "location": "/research/schnorr-signatures/#references", 
            "text": "Wuille P. 2015.  Tree signatures: Multisig on steroids using tree signatures .", 
            "title": " References"
        }, 
        {
            "location": "/research/miscellaneous-improvements/", 
            "text": "Miscellaneous Improvements\n\n\n\n\nAs in Bitcoin, subsidy decays exponentially with block height. However, Decred\ns algorithm, though also extremely simple, better interpolates this decay over time so as not to produce market shock with steep subsidy drops similar to CryptoNote\n1\n. Like PeerCoin\n2\n, the PoW difficulty is calculated from the exponentially weighted average of differences in previous block times. However, this calculation is also interpolated into Bitcoin-like difficulty window periods. The \ntimewarp\n bug in Bitcoin is corrected\n3\n, by ensuring that every difference in block time in incorporated into the difficulty calculation.\n\n\nIt should also be noted that many well known mining attacks, such as selfish mining\n4\n and stubborn mining\n5\n, will no longer function advantageously in a system where there is effective decentralization of stake mining and no PoW-PoS miner collusion. This is simply because it is impossible to generate secret extensions to blockchains without the assistance of stake miners. Resilience to previously described mining attacks, and newly conceived mining attacks specific to our system, will be a fruitful area for future research.\n\n\n References\n\n\n\n\n\n\n\n\n\n\nButerin V. 2014. \nA next-generation smart contract and decentralized application platform\n.\n\n\n\n\n\n\nKing S. and Nadal S. 2012. \nPPCoin: Peer-to-peer crypto-currency with proof-of-stake\n.\n\n\n\n\n\n\nArtForz. 2011. \nRe: Possible way to make a very profitable 50 plus-ish attack for pools?\n\n\n\n\n\n\nEyal I. 2015. \nThe miner\ns dilemma\n.\n\n\n\n\n\n\nNayak K., Kumar S., Miller A., Shi E. 2015. \nStubborn mining: Generalizing selfish mining and combining with an eclipse attack\n.", 
            "title": "Miscellaneous Improvements"
        }, 
        {
            "location": "/research/miscellaneous-improvements/#miscellaneous-improvements", 
            "text": "As in Bitcoin, subsidy decays exponentially with block height. However, Decred s algorithm, though also extremely simple, better interpolates this decay over time so as not to produce market shock with steep subsidy drops similar to CryptoNote 1 . Like PeerCoin 2 , the PoW difficulty is calculated from the exponentially weighted average of differences in previous block times. However, this calculation is also interpolated into Bitcoin-like difficulty window periods. The  timewarp  bug in Bitcoin is corrected 3 , by ensuring that every difference in block time in incorporated into the difficulty calculation.  It should also be noted that many well known mining attacks, such as selfish mining 4  and stubborn mining 5 , will no longer function advantageously in a system where there is effective decentralization of stake mining and no PoW-PoS miner collusion. This is simply because it is impossible to generate secret extensions to blockchains without the assistance of stake miners. Resilience to previously described mining attacks, and newly conceived mining attacks specific to our system, will be a fruitful area for future research.", 
            "title": "Miscellaneous Improvements"
        }, 
        {
            "location": "/research/miscellaneous-improvements/#references", 
            "text": "Buterin V. 2014.  A next-generation smart contract and decentralized application platform .    King S. and Nadal S. 2012.  PPCoin: Peer-to-peer crypto-currency with proof-of-stake .    ArtForz. 2011.  Re: Possible way to make a very profitable 50 plus-ish attack for pools?    Eyal I. 2015.  The miner s dilemma .    Nayak K., Kumar S., Miller A., Shi E. 2015.  Stubborn mining: Generalizing selfish mining and combining with an eclipse attack .", 
            "title": " References"
        }, 
        {
            "location": "/about/credits/", 
            "text": "Credits\n\n\n\n\n\n\n\n\n\n\nContributor\n\n\nSource\n\n\n\n\n\n\n\n\n\n\n@anondran\n\n\nBrief Guide: Setting Up Mainnet Wallet \n Airdop Included \n With Basic Commands \n OS Neutral\n\n\n\n\n\n\n@anondran\n\n\nBrief Guide: Setting Up Testnet Wallet, Sending, And Receiving Coins \n OS Neutral\n\n\n\n\n\n\n@Ayush\n\n\nPoS Guide Any OS \n Solo Stake Mining\n\n\n\n\n\n\n@brencelj\n\n\nLinux PoS Helping Scripts\n\n\n\n\n\n\n@ClokworkGremlin\n\n\nTutorial: Getting A Dedicated Chain Server Set Up On Your Raspberry Pi 2\n\n\n\n\n\n\n@davecgh\n\n\nDescription Of The Different Usernames, Passwords, And Passphrases\n\n\n\n\n\n\n@davecgh\n\n\nGuide (With Screenshots) To Claim Airdrop Coins With wallet.decred.org\n\n\n\n\n\n\n@David\n\n\nHow dcrd Works And The Shortage Of Public dcrd Nodes\n\n\n\n\n\n\n@David\n\n\nHow To Track PoS Mining \n Purchases, Votes, And Revokes\n\n\n\n\n\n\n@Dirbaio\n\n\nGuide: Arch Linux \n Headless Amd Opencl Setup \n Cgminer From Source\n\n\n\n\n\n\n@drunkenmugsy\n\n\nPoS Mining FAQ\n\n\n\n\n\n\n@Finksy\n\n\nQuestion about Setup\n\n\n\n\n\n\n@norikai\n\n\nHow To Rebuild/Resync Wallet Successfully\n\n\n\n\n\n\n@Reynold\n\n\nDecred Setup On Windows X64 And Mining On Testnet\n\n\n\n\n\n\n@Reynold\n\n\nHow I Finally Got My Airdrop Coins Into My Main Decred Wallet\n\n\n\n\n\n\n@rohit pawar\n\n\nGuide For Solo PoS Mining Using AWS 24x7 \n Windows\n\n\n\n\n\n\n@sambiohazard\n\n\nPrerequisites For Mainnet. Unofficial Airdrop Import \n Mining Guide. Use At Your Own Risk!\n\n\n\n\n\n\n@sambiohazard\n\n\nTestnet Only Guide: How I Got My Daemon, Wallet, And Miner Running \n Also Started Solo Stake Mining\n\n\n\n\n\n\n@sw1\n\n\nCompile List Of Useful PoS Commands\n\n\n\n\n\n\n@thepotterone\n\n\nHow to Setup and Optimize your CGMiner Config File\n\n\n\n\n\n\n@zero\n\n\nDecred Synopsis Of Basic Commands With Notes And Explanations About Each Of Them", 
            "title": "Credits"
        }, 
        {
            "location": "/about/credits/#credits", 
            "text": "Contributor  Source      @anondran  Brief Guide: Setting Up Mainnet Wallet   Airdop Included   With Basic Commands   OS Neutral    @anondran  Brief Guide: Setting Up Testnet Wallet, Sending, And Receiving Coins   OS Neutral    @Ayush  PoS Guide Any OS   Solo Stake Mining    @brencelj  Linux PoS Helping Scripts    @ClokworkGremlin  Tutorial: Getting A Dedicated Chain Server Set Up On Your Raspberry Pi 2    @davecgh  Description Of The Different Usernames, Passwords, And Passphrases    @davecgh  Guide (With Screenshots) To Claim Airdrop Coins With wallet.decred.org    @David  How dcrd Works And The Shortage Of Public dcrd Nodes    @David  How To Track PoS Mining   Purchases, Votes, And Revokes    @Dirbaio  Guide: Arch Linux   Headless Amd Opencl Setup   Cgminer From Source    @drunkenmugsy  PoS Mining FAQ    @Finksy  Question about Setup    @norikai  How To Rebuild/Resync Wallet Successfully    @Reynold  Decred Setup On Windows X64 And Mining On Testnet    @Reynold  How I Finally Got My Airdrop Coins Into My Main Decred Wallet    @rohit pawar  Guide For Solo PoS Mining Using AWS 24x7   Windows    @sambiohazard  Prerequisites For Mainnet. Unofficial Airdrop Import   Mining Guide. Use At Your Own Risk!    @sambiohazard  Testnet Only Guide: How I Got My Daemon, Wallet, And Miner Running   Also Started Solo Stake Mining    @sw1  Compile List Of Useful PoS Commands    @thepotterone  How to Setup and Optimize your CGMiner Config File    @zero  Decred Synopsis Of Basic Commands With Notes And Explanations About Each Of Them", 
            "title": " Credits"
        }, 
        {
            "location": "/about/license/", 
            "text": "License\n\n\ndcrdocs is licensed under the \ncopyfree\n ISC License.\n\n\n\n\nCopyright \u00a9 2013-2015 The btcsuite developers. Copyright \u00a9 2015-2016 The Decred developers.\n\n\nPermission to use, copy, modify, and distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.\n\n\nTHE SOFTWARE IS PROVIDED \nAS IS\n AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/about/license/#license", 
            "text": "dcrdocs is licensed under the  copyfree  ISC License.   Copyright \u00a9 2013-2015 The btcsuite developers. Copyright \u00a9 2015-2016 The Decred developers.  Permission to use, copy, modify, and distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.  THE SOFTWARE IS PROVIDED  AS IS  AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.", 
            "title": "License"
        }
    ]
}